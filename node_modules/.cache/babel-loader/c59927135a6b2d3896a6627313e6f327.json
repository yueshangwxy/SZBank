{"remainingRequest":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\src\\views\\indicators\\workflow\\graphConfigDEL.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\src\\views\\indicators\\workflow\\graphConfigDEL.vue","mtime":1644561281419},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _objectSpread from \"C:/Users/Evicce/Desktop/work/code2/indicator/Pncui-Indicator/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Graph } from '@antv/x6';\nimport { Addon } from '@antv/x6';\nimport { Shape } from '@antv/x6';\nimport $ from 'jquery';\nimport qs from 'qs';\nimport { handleCustomNode, loadDept, loadPosi, loadGraph as _loadGraph, pubGraph as _pubGraph } from '@/api/workflow/graphConfig';\nexport default {\n  name: \"graphConfig\",\n  //components: {pagination,  crudOperation,  rrOperation, Treeselect},\n  //mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  data: function data() {\n    return {\n      type: false,\n      graph: null,\n      ports: null,\n      stencil: null,\n      elementArr: new Array(),\n      tmpView: null,\n      optType: null,\n      //1:add,2:modify\n      baseUrl: '',\n      graphParam: new Object(),\n      dept: '',\n      posi: '',\n      deptOptions: [],\n      posiOptions: [],\n      dialogFormVisible: false,\n      dialogFormVisible2: false,\n      judgeOptions: [{\n        value: '1',\n        label: '是'\n      }, {\n        value: '2',\n        label: '否'\n      }],\n      judgeOpt: ''\n    };\n  },\n  mounted: function mounted() {\n    if (!this.queryMenuType()) {\n      return;\n    }\n\n    this.initAll();\n  },\n  methods: {\n    //获取菜单参数\n    queryMenuType: function queryMenuType() {\n      this.type = this.$route.query.type;\n\n      if (!this.type || this.type != 'ZB_ADD' && this.type != 'ZB_DEL' && this.type != 'ZB_UPD') {\n        this.$message.error('菜单配置有误');\n        return false;\n      }\n\n      return true;\n    },\n    initAll: function initAll() {\n      //初始化流程图参数\n      this.initGraph(); //初始化连接点\n\n      this.initPorts(); //初始化自定义图形\n\n      this.defineElement(); //初始化拖拽栏\n\n      this.initStencil(); //加载基本元素到拖拽组件1中\n\n      this.loadStencilGroup1(); //加载基本元素到拖拽组件2中\n\n      this.loadStencilGroup2(); //绑定鼠标事件\n\n      this.bindMouseEvent(); //加载已有流程图\n\n      this.loadGraph(); //初始化部门岗位\n\n      this.initDeptPosition();\n    },\n    showAdd: function showAdd() {\n      this.dept = '';\n      this.posi = '';\n      this.posiOptions = [];\n      this.optType = 1;\n      this.dialogFormVisible = true;\n    },\n    showJudge: function showJudge(view) {\n      this.tmpView = view;\n      var lbls = view.cell.store.data.labels;\n      var labelName = '';\n\n      if (lbls) {\n        labelName = lbls[0];\n      }\n\n      this.judgeOpt = labelName == '是' ? '1' : labelName == '否' ? '2' : '';\n      this.dialogFormVisible2 = true;\n    },\n    checkExistsNodeCount: function checkExistsNodeCount(deptId, posiId) {\n      var count = 0;\n      $.each(this.elementArr, function (idx, item) {\n        if (item.store.data.dept_id == deptId && item.store.data.posi_id == posiId) {\n          count++;\n        }\n      });\n      return count;\n    },\n    createStencilNode: function createStencilNode(id, label, deptId, posiId) {\n      var node = this.graph.createNode({\n        shape: 'custom-rect',\n        label: label,\n        id: id,\n        dept_id: deptId,\n        posi_id: posiId,\n        tools: [{\n          name: 'button',\n          args: {\n            markup: [{\n              tagName: 'rect',\n              selector: 'button',\n              attrs: {\n                x: -12,\n                y: -12,\n                width: 25,\n                height: 15,\n                stroke: '#DC3545',\n                'stroke-width': 1,\n                fill: 'white',\n                cursor: 'pointer'\n              }\n            }, {\n              tagName: 'text',\n              textContent: '删除',\n              selector: 'icon',\n              attrs: {\n                fill: '#DC3545',\n                'font-size': 10,\n                'text-anchor': 'middle',\n                'pointer-events': 'none',\n                y: '-0.1em'\n              }\n            }],\n            x: '100%',\n            y: '100%',\n            offset: {\n              x: -50,\n              y: -50\n            },\n            onClick: function onClick(_ref) {\n              var view = _ref.view;\n              showDelete(view);\n            }\n          }\n        }, {\n          name: 'button',\n          args: {\n            markup: [{\n              tagName: 'rect',\n              selector: 'button',\n              attrs: {\n                x: -12,\n                y: -12,\n                width: 25,\n                height: 15,\n                stroke: '#DC3545',\n                'stroke-width': 1,\n                fill: 'white',\n                cursor: 'pointer'\n              }\n            }, {\n              tagName: 'text',\n              textContent: '修改',\n              selector: 'icon',\n              attrs: {\n                fill: '#DC3545',\n                'font-size': 10,\n                'text-anchor': 'middle',\n                'pointer-events': 'none',\n                y: '-0.1em'\n              }\n            }],\n            x: '100%',\n            y: '100%',\n            offset: {\n              x: -21,\n              y: -50\n            },\n            onClick: function onClick(_ref2) {\n              var view = _ref2.view;\n              showModify(view);\n            }\n          }\n        }]\n      });\n      return node;\n    },\n    delNode: function delNode(cell) {\n      var nodes = this.graph.getNodes();\n\n      for (var i = nodes.length - 1; i >= 0; i--) {\n        if (nodes[i].store.data.dept_id == cell.store.data.dept_id && nodes[i].store.data.posi_id == cell.store.data.posi_id) {\n          this.graph.removeNode(nodes[i]);\n        }\n      }\n\n      for (var _i = 0; _i < this.elementArr.length; _i++) {\n        if (this.elementArr[_i].id == cell.id) {\n          this.elementArr.splice(_i, 1);\n          break;\n        }\n      }\n    },\n    showPorts: function showPorts(ports, show) {\n      for (var i = 0, len = ports.length; i < len; i = i + 1) {\n        ports[i].style.visibility = show ? 'visible' : 'hidden';\n      }\n    },\n    initDeptPosition: function initDeptPosition() {\n      var _this = this;\n\n      loadDept().then(function (data) {\n        _this.deptOptions = [];\n\n        _this.parseDept(data.content);\n      });\n    },\n    initStencil: function initStencil() {\n      this.stencil = new Addon.Stencil({\n        target: this.graph,\n        groups: [{\n          title: '基础节点',\n          name: 'group1',\n          graphHeight: 230,\n          layoutOptions: {\n            rowHeight: 70\n          }\n        }, {\n          title: '自定义节点',\n          name: 'group2',\n          graphHeight: 520,\n          layoutOptions: {\n            rowHeight: 80\n          }\n        }],\n        stencilGraphWidth: 370,\n        //stencilGraphHeight: 600,\n        layoutOptions: {\n          columns: 2,\n          columnWidth: 175,\n          rowHeight: 80\n        }\n      });\n      $(\"#stencilContainer\").empty();\n      document.getElementById('stencilContainer').appendChild(this.stencil.container); //添加按钮\n\n      var btnAdd = '<div style=\"position:absolute;top:4px;left:125px;z-index:10;\">' + '<button type=\"button\" id=\"btnAdd\" onclick=\"showAdd()\">添加</button>' + '</div>';\n      $(\"#stencilContainer div.x6-widget-stencil-group:last\").css(\"position\", \"relative\").append(btnAdd);\n    },\n    defineElement: function defineElement() {\n      Graph.registerNode('custom-polygon', {\n        inherit: 'polygon',\n        width: 90,\n        height: 50,\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: '#EFF4FF',\n            refPoints: '0,10 10,0 20,10 10,20'\n          },\n          text: {\n            fontSize: 12,\n            fill: '#262626'\n          }\n        },\n        ports: _objectSpread(_objectSpread({}, this.ports), {}, {\n          items: [{\n            group: 'top'\n          }, {\n            group: 'bottom'\n          }, {\n            group: 'left'\n          }, {\n            group: 'right'\n          }]\n        })\n      }, true);\n      Graph.registerNode('custom-rect', {\n        inherit: 'rect',\n        width: 150,\n        height: 50,\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: '#EFF4FF'\n          },\n          text: {\n            fontSize: 12,\n            fill: '#262626',\n            lineHeight: '1.1em',\n            textWrap: {\n              width: -4,\n              height: '110%',\n              ellipsis: true,\n              breakWord: true\n            }\n          }\n        },\n        ports: _objectSpread({}, this.ports)\n      }, true);\n      Graph.registerNode('custom-circle', {\n        inherit: 'circle',\n        width: 50,\n        height: 50,\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: '#EFF4FF'\n          },\n          text: {\n            fontSize: 12,\n            fill: '#262626'\n          }\n        },\n        ports: _objectSpread({}, this.ports)\n      }, true);\n      Graph.registerNode('custom-judge', {\n        inherit: 'polygon',\n        width: 90,\n        height: 50,\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: '#EFF4FF',\n            refPoints: '0,10 10,0 20,10 10,20'\n          },\n          text: {\n            fontSize: 12,\n            fill: '#262626'\n          }\n        },\n        ports: _objectSpread({}, this.ports)\n      }, true);\n    },\n    initGraph: function initGraph() {\n      this.graph = new Graph({\n        container: document.getElementById('canvasContainer'),\n        width: 720,\n        height: 600,\n        mousewheel: {\n          enabled: true,\n          factor: 1.1,\n          zoomAtMousePosition: true,\n          modifiers: 'ctrl',\n          minScale: 0.5,\n          maxScale: 2\n        },\n        panning: {\n          enabled: true,\n          eventTypes: ['leftMouseDown']\n        },\n        grid: true,\n        scroller: {\n          enabled: true,\n          pannable: true\n        },\n        connecting: {\n          router: 'manhattan',\n          connector: {\n            name: 'rounded',\n            args: {\n              radius: 8\n            }\n          },\n          anchor: 'center',\n          connectionPoint: 'anchor',\n          allowBlank: false,\n          snap: {\n            radius: 20\n          },\n          createEdge: function createEdge() {\n            return new Shape.Edge({\n              attrs: {\n                line: {\n                  stroke: '#A2B1C3',\n                  strokeWidth: 2,\n                  targetMarker: {\n                    name: 'block',\n                    width: 12,\n                    height: 8\n                  }\n                }\n              },\n              zIndex: 0\n            });\n          },\n          validateConnection: function validateConnection(_ref3) {\n            var targetMagnet = _ref3.targetMagnet;\n            return !!targetMagnet;\n          }\n        },\n        highlighting: {\n          magnetAdsorbed: {\n            name: 'stroke',\n            args: {\n              attrs: {\n                fill: '#5F95FF',\n                stroke: '#5F95FF'\n              }\n            }\n          }\n        },\n        resizing: false,\n        rotating: false,\n        selecting: {\n          enabled: false,\n          rubberband: true,\n          showNodeSelectionBox: true\n        },\n        snapline: true,\n        keyboard: true,\n        clipboard: true\n      });\n    },\n    initPorts: function initPorts() {\n      this.ports = {\n        groups: {\n          top: {\n            position: 'top',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden'\n                }\n              }\n            }\n          },\n          right: {\n            position: 'right',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden'\n                }\n              }\n            }\n          },\n          bottom: {\n            position: 'bottom',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden'\n                }\n              }\n            }\n          },\n          left: {\n            position: 'left',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden'\n                }\n              }\n            }\n          }\n        },\n        items: [{\n          group: 'top'\n        }, {\n          group: 'right'\n        }, {\n          group: 'bottom'\n        }, {\n          group: 'left'\n        }]\n      };\n    },\n    loadGraph: function loadGraph() {\n      var _this2 = this;\n\n      var param = 'procKey=' + this.type;\n\n      _loadGraph(param).then(function (data) {\n        _this2.graphParam = new Object();\n\n        if (!$.isArray(data) || data.length == 0) {\n          return;\n        }\n\n        _this2.graphParam.id = data[0].id;\n        _this2.graphParam.rev = data[0].rev;\n        _this2.graphParam.procKey = data[0].procKey;\n\n        _this2.graph.fromJSON(JSON.parse(data[0].defByte));\n      });\n    },\n    loadStencilGroup1: function loadStencilGroup1() {\n      var start = this.graph.createNode({\n        shape: 'custom-circle',\n        label: 'Start',\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: '#EFF4FF'\n          }\n        }\n      });\n      var end = this.graph.createNode({\n        shape: 'custom-circle',\n        label: 'End',\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: 'lightgrey'\n          }\n        }\n      });\n      var countersignStart = this.graph.createNode({\n        shape: 'custom-polygon',\n        label: '会签开始'\n      });\n      var countersignEnd = this.graph.createNode({\n        shape: 'custom-polygon',\n        label: '会签结束',\n        attrs: {\n          body: {\n            strokeWidth: 1,\n            stroke: '#5F95FF',\n            fill: 'lightgrey'\n          }\n        }\n      });\n      var judge = this.graph.createNode({\n        shape: 'custom-judge',\n        label: '是否'\n      });\n      this.stencil.load([start, countersignStart, end, countersignEnd, judge], 'group1');\n    },\n    loadStencilGroup2: function loadStencilGroup2() {\n      var _this3 = this;\n\n      var param = 'type=QUERY&procKey=' + this.type;\n      handleCustomNode(param).then(function (data) {\n        if (!data || data.code != \"0000\") {\n          _this3.$message.warning('加载自定义节点失败');\n\n          return;\n        }\n\n        _this3.elementArr = new Array();\n\n        if (data.data && data.data.length > 0) {\n          for (var i = 0; i < data.data.length; i++) {\n            _this3.elementArr.push(_this3.createStencilNode(data.data[i].id, data.data[i].deptName + \"-\" + data.data[i].postName, data.data[i].deptCode, data.data[i].postCode));\n          }\n        }\n\n        _this3.stencil.load(_this3.elementArr, 'group2');\n      });\n    },\n    refreshStencilGroup2: function refreshStencilGroup2() {\n      this.initStencil();\n      this.loadStencilGroup1();\n      this.stencil.load(this.elementArr, 'group2');\n    },\n    bindMouseEvent: function bindMouseEvent() {\n      var _this4 = this;\n\n      this.graph.on('node:mouseenter', function () {\n        var container = document.getElementById('canvasContainer');\n        var ports = container.querySelectorAll('.x6-port-body');\n\n        _this4.showPorts(ports, true);\n      });\n      this.graph.on('node:mouseleave', function () {\n        var container = document.getElementById('canvasContainer');\n        var ports = container.querySelectorAll('.x6-port-body');\n\n        _this4.showPorts(ports, false);\n      }); //tools\n\n      this.graph.on('cell:mouseenter', function (_ref4) {\n        var cell = _ref4.cell;\n        var offsetWidth = 0;\n        var offsetHeight = 0;\n        var sourceShape = null;\n\n        if (cell.isEdge()) {\n          var sourceCellId = cell.getSource().cell;\n          sourceShape = $('#canvasContainer').find(\"g[data-cell-id='\" + sourceCellId + \"']\").attr('data-shape');\n        }\n\n        if (cell.isNode()) {\n          if (cell.store.data.shape == 'custom-polygon' || cell.store.data.shape == 'custom-judge') {\n            offsetWidth = cell.store.data.size.width - 20;\n            offsetHeight = cell.store.data.size.height / 2 - 10;\n          } else {\n            offsetWidth = cell.store.data.size.width;\n            offsetHeight = 8;\n          }\n        }\n\n        if (cell.isEdge() && sourceShape == 'custom-judge') {\n          cell.addTools([{\n            name: 'button-remove',\n            args: {\n              x: 0,\n              y: 0,\n              offset: {\n                x: offsetWidth,\n                y: offsetHeight\n              }\n            }\n          }, {\n            name: 'button',\n            args: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'button',\n                attrs: {\n                  r: 7,\n                  stroke: '#fe854f',\n                  'stroke-width': 2,\n                  fill: 'white',\n                  cursor: 'pointer'\n                }\n              }, {\n                tagName: 'text',\n                textContent: '+',\n                selector: 'icon',\n                attrs: {\n                  fill: '#fe854f',\n                  'font-size': 12,\n                  'font-weight': 'bold',\n                  'text-anchor': 'middle',\n                  'pointer-events': 'none',\n                  y: '0.3em'\n                }\n              }],\n              onClick: function onClick(_ref5) {\n                var view = _ref5.view;\n                showJudge(view);\n              }\n            }\n          }]);\n        } else {\n          cell.addTools([{\n            name: 'button-remove',\n            args: {\n              x: 0,\n              y: 0,\n              offset: {\n                x: offsetWidth,\n                y: offsetHeight\n              }\n            }\n          }]);\n        }\n      });\n      this.graph.on('cell:mouseleave', function (_ref6) {\n        var cell = _ref6.cell;\n        cell.removeTools();\n      });\n    },\n    parseDept: function parseDept(deptArr) {\n      if (!$.isArray(deptArr)) {\n        return;\n      }\n\n      var obj = null;\n\n      for (var i = 0; i < deptArr.length; i++) {\n        if (deptArr[i].enabled) {\n          obj = new Object();\n          obj.value = deptArr[i].id;\n          obj.label = deptArr[i].name;\n          this.deptOptions.push(obj);\n        }\n\n        this.parseDept(deptArr[i].children);\n      }\n    },\n    parsePosi: function parsePosi(posiArr) {\n      if (!$.isArray(posiArr)) {\n        return;\n      }\n\n      var obj = null;\n\n      for (var i = 0; i < posiArr.length; i++) {\n        if (posiArr[i].enabled) {\n          obj = new Object();\n          obj.value = posiArr[i].id;\n          obj.label = posiArr[i].name;\n          this.posiOptions.push(obj);\n        }\n      }\n\n      ;\n    },\n    //确认添加/修改\n    confirmAdd: function confirmAdd() {\n      var _this5 = this;\n\n      var newDeptId = this.dept;\n      var newPosiId = this.posi;\n\n      if (newDeptId == '' || newDeptId == null || newPosiId == '' || newPosiId == null) {\n        this.$message.warning('请选择部门和岗位');\n        return;\n      }\n\n      var count = this.checkExistsNodeCount(newDeptId, newPosiId);\n      var newLabel = this.findLabel(this.deptOptions, newDeptId) + \"-\" + this.findLabel(this.posiOptions, newPosiId); //添加\n\n      if (this.optType == 1) {\n        if (count > 0) {\n          this.$message.warning('您选择的部门和岗位已存在');\n          this.dept = '';\n          this.posi = '';\n          return;\n        }\n\n        var param = 'type=ADD&procKey=' + this.type + '&deptCode=' + newDeptId + '&deptName=' + this.findLabel(this.deptOptions, newDeptId) + '&postCode=' + newPosiId + '&postName=' + this.findLabel(this.posiOptions, newPosiId);\n        handleCustomNode(param).then(function (data) {\n          _this5.dialogFormVisible = false;\n\n          if (!data || data.code != \"0000\") {\n            _this5.$message.error(data.msg);\n\n            return;\n          }\n\n          _this5.elementArr.push(_this5.createStencilNode(data.id, newLabel, newDeptId, newPosiId));\n\n          _this5.refreshStencilGroup2();\n\n          _this5.$message.success('节点添加成功');\n        });\n        return;\n      } //修改\n\n\n      if (this.optType == 2) {\n        var cell = this.tmpView.cell;\n        var oldDeptId = cell.store.data.dept_id;\n        var oldPosiId = cell.store.data.posi_id;\n\n        if (newDeptId == oldDeptId && newPosiId == oldPosiId) {\n          this.$message.warning('您选择的部门和岗位已存在');\n          return;\n        }\n\n        if (count > 0) {\n          this.$message.warning('您选择的部门和岗位已存在');\n          return;\n        }\n\n        var _param = 'type=UPD&procKey=' + this.type + '&deptCode=' + newDeptId + '&deptName=' + this.findLabel(this.deptOptions, newDeptId) + '&postCode=' + newPosiId + '&postName=' + this.findLabel(this.posiOptions, newPosiId) + '&id=' + cell.id;\n\n        handleCustomNode(_param).then(function (data) {\n          _this5.dialogFormVisible = false;\n\n          if (!data || data.code != \"0000\") {\n            _this5.$message.error(data.msg);\n\n            return;\n          } //处理流程图中的节点\n\n\n          var nodes = _this5.graph.getNodes();\n\n          for (var i = nodes.length - 1; i >= 0; i--) {\n            if (nodes[i].store.data.shape != \"custom-rect\") {\n              continue;\n            }\n\n            if (nodes[i].store.data.dept_id == oldDeptId && nodes[i].store.data.posi_id == oldPosiId) {\n              nodes[i].store.data.dept_id = newDeptId;\n              nodes[i].store.data.posi_id = newPosiId;\n              nodes[i].label = newLabel;\n            }\n          } //处理数组中的节点\n\n\n          for (var _i2 = 0; _i2 < _this5.elementArr.length; _i2++) {\n            if (_this5.elementArr[_i2].id == cell.id) {\n              _this5.elementArr[_i2].store.data.dept_id = newDeptId;\n              _this5.elementArr[_i2].store.data.posi_id = newPosiId;\n              _this5.elementArr[_i2].label = newLabel;\n            }\n          } //刷新group2\n\n\n          _this5.refreshStencilGroup2();\n\n          _this5.$message.success('节点修改成功');\n        });\n      }\n    },\n    //确认删除\n    confirmDel: function confirmDel() {\n      var _this6 = this;\n\n      var cell = this.tmpView.cell;\n      var param = 'type=DEL&procKey=' + this.type + '&id=' + cell.id;\n      handleCustomNode(param).then(function (data) {\n        _this6.dialogFormVisible = false;\n\n        if (!data || data.code != \"0000\") {\n          _this6.$message.error(data.msg);\n\n          return;\n        }\n\n        _this6.delNode(cell);\n\n        cell.removeTools();\n        cell.remove();\n\n        _this6.refreshStencilGroup2();\n\n        _this6.$message.success('节点删除成功');\n      });\n    },\n    //确认设置判断\n    confirmJudge: function confirmJudge() {\n      var cell = this.tmpView.cell;\n\n      if (this.judgeOpt != 1 && this.judgeOpt != 2) {\n        return;\n      }\n\n      var labelName = this.judgeOpt == 1 ? \"是\" : \"否\";\n      cell.setLabels([labelName]);\n      this.dialogFormVisible2 = false;\n    },\n    showModify: function showModify(view) {\n      var _this7 = this;\n\n      var p = new Promise(function (resolve, reject) {\n        _this7.tmpView = view;\n        _this7.dept = view.cell.store.data.dept_id;\n      }).then(loadPosi(qs.stringify({\n        deptId: this.dept\n      })).then(function (data) {\n        _this7.posiOptions = [];\n\n        _this7.parsePosi(data.content);\n\n        _this7.posi = view.cell.store.data.posi_id;\n        _this7.optType = 2;\n        _this7.dialogFormVisible = true;\n      }));\n    },\n    showDelete: function showDelete(view) {\n      var _this8 = this;\n\n      this.tmpView = view;\n      this.$confirm('确认删除该自定义节点吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this8.confirmDel();\n      });\n    },\n    findLabel: function findLabel(arr, id) {\n      return arr.find(function (item) {\n        return item.value == id;\n      }).label;\n    },\n    pubGraph: function pubGraph() {\n      var _this9 = this;\n\n      var json = this.graph.toJSON();\n      this.graphParam.status = \"1\";\n      this.graphParam.procKey = this.type;\n      this.graphParam.name = this.type == 'ZB_ADD' ? '指标新增流程' : this.type == 'ZB_UPD' ? '指标修改流程' : '指标删除流程';\n      this.graphParam.defByte = JSON.stringify(json);\n\n      _pubGraph(this.graphParam).then(function (data) {\n        if (!data || data.code != \"0000\") {\n          _this9.$message.error(data.msg);\n\n          return;\n        }\n\n        _this9.$message.success('发布成功');\n\n        _this9.loadGraph();\n      });\n    },\n    selectDeptChange: function selectDeptChange() {\n      var _this10 = this;\n\n      loadPosi(qs.stringify({\n        deptId: this.dept\n      })).then(function (data) {\n        _this10.posiOptions = [];\n\n        _this10.parsePosi(data.content);\n      });\n      this.posi = '';\n    },\n    selectJobChange: function selectJobChange() {\n      if (this.dept == null || this.dept.length == 0) {\n        this.$message.error({\n          message: '请先选择部门！'\n        });\n      }\n    }\n  },\n  created: function created() {\n    window.showAdd = this.showAdd;\n    window.showModify = this.showModify;\n    window.showDelete = this.showDelete;\n    window.showJudge = this.showJudge;\n  }\n};",null]}