{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\utils\\request.js","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\utils\\request.js","mtime":1647917138739},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _routers = _interopRequireDefault(require(\"@/router/routers\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"./auth\");\n\nvar _settings = _interopRequireDefault(require(\"@public/config/settings\"));\n\n// 创建axios实例\nvar service = _axios.default.create({\n  baseURL: process.env.NODE_ENV === 'production' ? process.env.VUE_APP_BASE_API : '/api',\n  // api 的 base_url\n  //baseURL: process.env.VUE_APP_BASE_API === '' ? '/' : process.env.VUE_APP_BASE_API, // api 的 base_url\n  timeout: _settings.default.timeout,\n  // 请求超时时间\n  withCredentials: true\n}); // request拦截器\n\n\nservice.interceptors.request.use(function (config) {\n  if ((0, _auth.getToken)()) {\n    config.headers['Authorization'] = (0, _auth.getToken)(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  config.headers['Content-Type'] = 'application/json'; // console.log('========request.use=========>', store.state.user.user.currentRole)\n\n  var path = window.location.href.replace(window.location.origin, '').replace('/#', '');\n  config.headers['client-page'] = path;\n\n  try {\n    if ((0, _auth.getCurrentRole)()) {\n      config.headers['current-roleid'] = (0, _auth.getCurrentRole)().id;\n    }\n  } catch (e) {}\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // response 拦截器\n\nservice.interceptors.response.use(function (response) {\n  var code = response.status;\n\n  if (code < 200 || code > 300) {\n    _elementUi.Notification.error({\n      title: response.message\n    });\n\n    return Promise.reject('error');\n  } else {\n    return response.data;\n  }\n}, function (error) {\n  var code = 0;\n  var msg = '';\n\n  try {\n    code = error.response.data.status;\n    msg = error.response.data.message;\n  } catch (e) {\n    if (error.toString().indexOf('Error: timeout') !== -1) {\n      _elementUi.Notification.error({\n        title: '网络请求超时',\n        duration: 5000\n      });\n\n      return Promise.reject(error);\n    }\n  }\n\n  if (code) {\n    if (code === 401) {\n      _elementUi.MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _store.default.dispatch('LogOut').then(function () {\n          location.reload(); // 为了重新实例化vue-router对象 避免bug\n        });\n      });\n    } else if (code === 403) {\n      _routers.default.push({\n        path: '/401'\n      });\n    } else {\n      var errorMsg = error.response.data.message;\n\n      if (errorMsg !== undefined) {\n        _elementUi.Notification.error({\n          title: errorMsg,\n          duration: 5000\n        });\n      }\n    }\n  } else {\n    _elementUi.Notification.error({\n      title: '接口请求失败',\n      duration: 5000\n    });\n  }\n\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",{"version":3,"sources":["D:/code/DataAssetPlatform/Pncui-Ind/src/utils/request.js"],"names":["service","axios","create","baseURL","process","env","NODE_ENV","VUE_APP_BASE_API","timeout","Config","withCredentials","interceptors","request","use","config","headers","path","window","location","href","replace","origin","id","e","error","console","log","Promise","reject","response","code","status","Notification","title","message","data","msg","toString","indexOf","duration","MessageBox","confirm","confirmButtonText","cancelButtonText","type","then","store","dispatch","reload","router","push","errorMsg","undefined"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAMA,OAAO,GAAGC,eAAMC,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCF,OAAO,CAACC,GAAR,CAAYE,gBAApD,GAAuE,MADvD;AAC+D;AACxF;AACAC,EAAAA,OAAO,EAAEC,kBAAOD,OAHS;AAGD;AACxBE,EAAAA,eAAe,EAAE;AAJQ,CAAb,CAAhB,C,CAOA;;;AACAV,OAAO,CAACW,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACI,UAAAC,MAAM,EAAI;AACN,MAAI,qBAAJ,EAAgB;AACZA,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,qBAAlC,CADY,CACiC;AAChD;;AACDD,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,kBAAjC,CAJM,CAKN;;AACA,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,OAArB,CAA6BH,MAAM,CAACC,QAAP,CAAgBG,MAA7C,EAAqD,EAArD,EAAyDD,OAAzD,CAAiE,IAAjE,EAAuE,EAAvE,CAAb;AACAN,EAAAA,MAAM,CAACC,OAAP,CAAe,aAAf,IAAgCC,IAAhC;;AACA,MAAI;AACA,QAAI,2BAAJ,EAAsB;AAClBF,MAAAA,MAAM,CAACC,OAAP,CAAe,gBAAf,IAAmC,4BAAiBO,EAApD;AACH;AACJ,GAJD,CAIE,OAAOC,CAAP,EAAU,CACX;;AAED,SAAOT,MAAP;AACH,CAjBL,EAkBI,UAAAU,KAAK,EAAI;AACL;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFK,CAEc;;AACnBG,EAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf;AACH,CAtBL,E,CAyBA;;AACAxB,OAAO,CAACW,YAAR,CAAqBkB,QAArB,CAA8BhB,GAA9B,CACI,UAAAgB,QAAQ,EAAI;AACR,MAAMC,IAAI,GAAGD,QAAQ,CAACE,MAAtB;;AACA,MAAID,IAAI,GAAG,GAAP,IAAcA,IAAI,GAAG,GAAzB,EAA8B;AAC1BE,4BAAaR,KAAb,CAAmB;AACfS,MAAAA,KAAK,EAAEJ,QAAQ,CAACK;AADD,KAAnB;;AAGA,WAAOP,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AACH,GALD,MAKO;AACH,WAAOC,QAAQ,CAACM,IAAhB;AACH;AACJ,CAXL,EAYI,UAAAX,KAAK,EAAI;AACL,MAAIM,IAAI,GAAG,CAAX;AACA,MAAIM,GAAG,GAAG,EAAV;;AACA,MAAI;AACAN,IAAAA,IAAI,GAAGN,KAAK,CAACK,QAAN,CAAeM,IAAf,CAAoBJ,MAA3B;AACAK,IAAAA,GAAG,GAAGZ,KAAK,CAACK,QAAN,CAAeM,IAAf,CAAoBD,OAA1B;AACH,GAHD,CAGE,OAAOX,CAAP,EAAU;AACR,QAAIC,KAAK,CAACa,QAAN,GAAiBC,OAAjB,CAAyB,gBAAzB,MAA+C,CAAC,CAApD,EAAuD;AACnDN,8BAAaR,KAAb,CAAmB;AACfS,QAAAA,KAAK,EAAE,QADQ;AAEfM,QAAAA,QAAQ,EAAE;AAFK,OAAnB;;AAIA,aAAOZ,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;AACJ;;AACD,MAAIM,IAAJ,EAAU;AACN,QAAIA,IAAI,KAAK,GAAb,EAAkB;AACdU,4BAAWC,OAAX,CACI,2BADJ,EAEI,MAFJ,EAGI;AACIC,QAAAA,iBAAiB,EAAE,IADvB;AAEIC,QAAAA,gBAAgB,EAAE,IAFtB;AAGIC,QAAAA,IAAI,EAAE;AAHV,OAHJ,EAQEC,IARF,CAQO,YAAM;AACTC,uBAAMC,QAAN,CAAe,QAAf,EAAyBF,IAAzB,CAA8B,YAAM;AAChC3B,UAAAA,QAAQ,CAAC8B,MAAT,GADgC,CACd;AACrB,SAFD;AAGH,OAZD;AAaH,KAdD,MAcO,IAAIlB,IAAI,KAAK,GAAb,EAAkB;AACrBmB,uBAAOC,IAAP,CAAY;AAAClC,QAAAA,IAAI,EAAE;AAAP,OAAZ;AACH,KAFM,MAEA;AACH,UAAMmC,QAAQ,GAAG3B,KAAK,CAACK,QAAN,CAAeM,IAAf,CAAoBD,OAArC;;AACA,UAAIiB,QAAQ,KAAKC,SAAjB,EAA4B;AACxBpB,gCAAaR,KAAb,CAAmB;AACfS,UAAAA,KAAK,EAAEkB,QADQ;AAEfZ,UAAAA,QAAQ,EAAE;AAFK,SAAnB;AAIH;AACJ;AACJ,GA1BD,MA0BO;AACHP,4BAAaR,KAAb,CAAmB;AACfS,MAAAA,KAAK,EAAE,QADQ;AAEfM,MAAAA,QAAQ,EAAE;AAFK,KAAnB;AAIH;;AACD,SAAOZ,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CA5DL;eA8DexB,O","sourcesContent":["import axios from 'axios'\r\nimport router from '@/router/routers'\r\nimport {Notification, MessageBox} from 'element-ui'\r\nimport store from '@/store'\r\nimport {getToken, getCurrentRole} from './auth'\r\nimport Config from '@public/config/settings'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    baseURL: process.env.NODE_ENV === 'production' ? process.env.VUE_APP_BASE_API : '/api', // api 的 base_url\r\n    //baseURL: process.env.VUE_APP_BASE_API === '' ? '/' : process.env.VUE_APP_BASE_API, // api 的 base_url\r\n    timeout: Config.timeout,// 请求超时时间\r\n    withCredentials: true\r\n})\r\n\r\n// request拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        if (getToken()) {\r\n            config.headers['Authorization'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\r\n        }\r\n        config.headers['Content-Type'] = 'application/json'\r\n        // console.log('========request.use=========>', store.state.user.user.currentRole)\r\n        const path = window.location.href.replace(window.location.origin, '').replace('/#', '')\r\n        config.headers['client-page'] = path\r\n        try {\r\n            if (getCurrentRole()) {\r\n                config.headers['current-roleid'] = getCurrentRole().id\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        return config\r\n    },\r\n    error => {\r\n        // Do something with request error\r\n        console.log(error) // for debug\r\n        Promise.reject(error)\r\n    }\r\n)\r\n\r\n// response 拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const code = response.status\r\n        if (code < 200 || code > 300) {\r\n            Notification.error({\r\n                title: response.message\r\n            })\r\n            return Promise.reject('error')\r\n        } else {\r\n            return response.data\r\n        }\r\n    },\r\n    error => {\r\n        let code = 0\r\n        let msg = ''\r\n        try {\r\n            code = error.response.data.status\r\n            msg = error.response.data.message\r\n        } catch (e) {\r\n            if (error.toString().indexOf('Error: timeout') !== -1) {\r\n                Notification.error({\r\n                    title: '网络请求超时',\r\n                    duration: 5000\r\n                })\r\n                return Promise.reject(error)\r\n            }\r\n        }\r\n        if (code) {\r\n            if (code === 401) {\r\n                MessageBox.confirm(\r\n                    '登录状态已过期，您可以继续留在该页面，或者重新登录',\r\n                    '系统提示',\r\n                    {\r\n                        confirmButtonText: '确定',\r\n                        cancelButtonText: '取消',\r\n                        type: 'warning'\r\n                    }\r\n                ).then(() => {\r\n                    store.dispatch('LogOut').then(() => {\r\n                        location.reload() // 为了重新实例化vue-router对象 避免bug\r\n                    })\r\n                })\r\n            } else if (code === 403) {\r\n                router.push({path: '/401'})\r\n            } else {\r\n                const errorMsg = error.response.data.message\r\n                if (errorMsg !== undefined) {\r\n                    Notification.error({\r\n                        title: errorMsg,\r\n                        duration: 5000\r\n                    })\r\n                }\r\n            }\r\n        } else {\r\n            Notification.error({\r\n                title: '接口请求失败',\r\n                duration: 5000\r\n            })\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\nexport default service\r\n"]}]}