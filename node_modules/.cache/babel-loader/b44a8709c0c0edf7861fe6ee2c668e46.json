{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\api\\indicators\\indCategory.js","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\api\\indicators\\indCategory.js","mtime":1647917138725},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport request from '@/utils/request';\nvar url = 'v1/indicators/indCategorys';\nexport function add(data) {\n  return request({\n    url: url,\n    method: 'post',\n    data: data\n  });\n}\nexport function del(ids) {\n  return request({\n    url: url,\n    method: 'delete',\n    data: ids\n  });\n}\nexport function edit(data) {\n  return request({\n    url: url,\n    method: 'put',\n    data: data\n  });\n}\nexport function tree(type, parentId) {\n  return request({\n    url: url + \"/\".concat(type, \"/\").concat(parentId),\n    method: 'get'\n  });\n}\nexport function treeInfo(type, parentId) {\n  return request({\n    url: url + \"/treeInfo/\".concat(type, \"/\").concat(parentId),\n    method: 'get'\n  });\n}\nexport function treeByTable(type) {\n  return request({\n    url: url + \"/treeByTable/\".concat(type),\n    method: 'get'\n  });\n}\nexport function getCategoryList(data) {\n  return request({\n    url: url + \"/getCategoryList/\".concat(data),\n    method: 'get'\n  });\n}\nexport function getCategoryName(_x) {\n  return _getCategoryName.apply(this, arguments);\n}\n\nfunction _getCategoryName() {\n  _getCategoryName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", request({\n              url: url + \"/getCategoryName/\".concat(id),\n              method: 'get'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCategoryName.apply(this, arguments);\n}\n\nexport default {\n  url: url,\n  tree: tree,\n  treeInfo: treeInfo,\n  treeByTable: treeByTable,\n  getCategoryList: getCategoryList,\n  getCategoryName: getCategoryName,\n  crud: {\n    add: add,\n    edit: edit,\n    del: del\n  }\n};",null]}