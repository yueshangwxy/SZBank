{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Ind\\mock\\utils.js","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\mock\\utils.js","mtime":1647247612592},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _typeof2 = _interopRequireDefault(require(\"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/typeof\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n/**\r\n * @param {string} url\r\n * @returns {Object}\r\n */\nfunction param2Obj(url) {\n  var search = decodeURIComponent(url.split('?')[1]).replace(/\\+/g, ' ');\n\n  if (!search) {\n    return {};\n  }\n\n  var obj = {};\n  var searchArr = search.split('&');\n  searchArr.forEach(function (v) {\n    var index = v.indexOf('=');\n\n    if (index !== -1) {\n      var name = v.substring(0, index);\n      var val = v.substring(index + 1, v.length);\n      obj[name] = val;\n    }\n  });\n  return obj;\n}\n/**\r\n * This is just a simple version of deep copy\r\n * Has a lot of edge cases bug\r\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\r\n * @param {Object} source\r\n * @returns {Object}\r\n */\n\n\nfunction deepClone(source) {\n  if (!source && (0, _typeof2.default)(source) !== 'object') {\n    throw new Error('error arguments', 'deepClone');\n  }\n\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && (0, _typeof2.default)(source[keys]) === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\nmodule.exports = {\n  param2Obj: param2Obj,\n  deepClone: deepClone\n};",{"version":3,"sources":["D:/code/DataAssetPlatform/Pncui-Ind/mock/utils.js"],"names":["param2Obj","url","search","decodeURIComponent","split","replace","obj","searchArr","forEach","v","index","indexOf","name","substring","val","length","deepClone","source","Error","targetObj","constructor","Array","Object","keys","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAMC,MAAM,GAAGC,kBAAkB,CAACF,GAAG,CAACG,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAD,CAAlB,CAAsCC,OAAtC,CAA8C,KAA9C,EAAqD,GAArD,CAAf;;AACA,MAAI,CAACH,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AACD,MAAMI,GAAG,GAAG,EAAZ;AACA,MAAMC,SAAS,GAAGL,MAAM,CAACE,KAAP,CAAa,GAAb,CAAlB;AACAG,EAAAA,SAAS,CAACC,OAAV,CAAkB,UAAAC,CAAC,EAAI;AACrB,QAAMC,KAAK,GAAGD,CAAC,CAACE,OAAF,CAAU,GAAV,CAAd;;AACA,QAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAME,IAAI,GAAGH,CAAC,CAACI,SAAF,CAAY,CAAZ,EAAeH,KAAf,CAAb;AACA,UAAMI,GAAG,GAAGL,CAAC,CAACI,SAAF,CAAYH,KAAK,GAAG,CAApB,EAAuBD,CAAC,CAACM,MAAzB,CAAZ;AACAT,MAAAA,GAAG,CAACM,IAAD,CAAH,GAAYE,GAAZ;AACD;AACF,GAPD;AAQA,SAAOR,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,MAAI,CAACA,MAAD,IAAW,sBAAOA,MAAP,MAAkB,QAAjC,EAA2C;AACzC,UAAM,IAAIC,KAAJ,CAAU,iBAAV,EAA6B,WAA7B,CAAN;AACD;;AACD,MAAMC,SAAS,GAAGF,MAAM,CAACG,WAAP,KAAuBC,KAAvB,GAA+B,EAA/B,GAAoC,EAAtD;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBT,OAApB,CAA4B,UAAAe,IAAI,EAAI;AAClC,QAAIN,MAAM,CAACM,IAAD,CAAN,IAAgB,sBAAON,MAAM,CAACM,IAAD,CAAb,MAAwB,QAA5C,EAAsD;AACpDJ,MAAAA,SAAS,CAACI,IAAD,CAAT,GAAkBP,SAAS,CAACC,MAAM,CAACM,IAAD,CAAP,CAA3B;AACD,KAFD,MAEO;AACLJ,MAAAA,SAAS,CAACI,IAAD,CAAT,GAAkBN,MAAM,CAACM,IAAD,CAAxB;AACD;AACF,GAND;AAOA,SAAOJ,SAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,SAAS,EAATA,SADe;AAEfgB,EAAAA,SAAS,EAATA;AAFe,CAAjB","sourcesContent":["/**\r\n * @param {string} url\r\n * @returns {Object}\r\n */\r\nfunction param2Obj(url) {\r\n  const search = decodeURIComponent(url.split('?')[1]).replace(/\\+/g, ' ')\r\n  if (!search) {\r\n    return {}\r\n  }\r\n  const obj = {}\r\n  const searchArr = search.split('&')\r\n  searchArr.forEach(v => {\r\n    const index = v.indexOf('=')\r\n    if (index !== -1) {\r\n      const name = v.substring(0, index)\r\n      const val = v.substring(index + 1, v.length)\r\n      obj[name] = val\r\n    }\r\n  })\r\n  return obj\r\n}\r\n\r\n/**\r\n * This is just a simple version of deep copy\r\n * Has a lot of edge cases bug\r\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\r\n * @param {Object} source\r\n * @returns {Object}\r\n */\r\nfunction deepClone(source) {\r\n  if (!source && typeof source !== 'object') {\r\n    throw new Error('error arguments', 'deepClone')\r\n  }\r\n  const targetObj = source.constructor === Array ? [] : {}\r\n  Object.keys(source).forEach(keys => {\r\n    if (source[keys] && typeof source[keys] === 'object') {\r\n      targetObj[keys] = deepClone(source[keys])\r\n    } else {\r\n      targetObj[keys] = source[keys]\r\n    }\r\n  })\r\n  return targetObj\r\n}\r\n\r\nmodule.exports = {\r\n  param2Obj,\r\n  deepClone\r\n}\r\n"]}]}