{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-system\\src\\views\\system\\dict\\dictDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-system\\src\\views\\system\\dict\\dictDetail.vue","mtime":1647917128241},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport crud from '@eladmin/mixins/crud';\nimport crudDictDetail, { getList } from \"../../../api/system/dictDetail\";\nimport { getDicts } from \"eladmin-system/src/api/system/dict\";\nexport default {\n  mixins: [crud],\n  dicts: ['user_status'],\n  data: function data() {\n    return {\n      title: '参数详情',\n      sort: ['sort,asc', 'id,desc'],\n      crudMethod: _objectSpread({}, crudDictDetail),\n      dictName: '',\n      detailArr: [],\n      form: {\n        id: null,\n        label: null,\n        value: null,\n        dict: {\n          id: null\n        },\n        sort: 999,\n        enabled: true\n      },\n      rules: {\n        label: [{\n          required: true,\n          message: '请输入参数标签',\n          trigger: 'blur'\n        }],\n        sort: [{\n          required: true,\n          message: '请输入序号',\n          trigger: 'blur',\n          type: 'number'\n        }],\n        value: [{\n          required: true,\n          message: '请输入参数值',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 获取数据前设置好接口地址\n    beforeInit: function beforeInit() {\n      var _this = this;\n\n      this.url = 'api/dictDetail';\n\n      if (this.dictName) {\n        this.params['dictName'] = this.dictName;\n      }\n\n      getList(this.dictName).then(function (data) {\n        _this.detailArr = data.content;\n      });\n      return true;\n    },\n    beforeSubmitMethod: function beforeSubmitMethod() {\n      for (var i = 0; i < Object.keys(this.detailArr).length; i++) {\n        if (this.form.id == null) {\n          if (this.form.label == this.detailArr[i].label) {\n            this.$message({\n              message: '参数标签不可以重复！',\n              type: 'error'\n            });\n            return false;\n          } else if (this.form.value == this.detailArr[i].value) {\n            this.$message({\n              message: '参数值不可以重复！',\n              type: 'error'\n            });\n            return false;\n          }\n        } else {\n          for (var j = 0; j < Object.keys(this.detailArr).length; j++) {\n            if (this.form.id == this.detailArr[j].id) {\n              this.detailArr.splice(j, 1);\n              break;\n            }\n          }\n\n          if (this.form.label == this.detailArr[i].label) {\n            this.$message({\n              message: '参数标签不可以重复！',\n              type: 'error'\n            });\n            return false;\n          } else if (this.form.value == this.detailArr[i].value) {\n            this.$message({\n              message: '参数值不可以重复！',\n              type: 'error'\n            });\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    afterEditMethod: function afterEditMethod() {\n      var _this2 = this;\n\n      getList(this.dictName).then(function (data) {\n        _this2.allDate = data;\n      });\n    },\n    afterDelMethod: function afterDelMethod() {\n      var _this3 = this;\n\n      getList(this.dictName).then(function (data) {\n        _this3.allDate = data;\n      });\n    }\n  }\n};",null]}