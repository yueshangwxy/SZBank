{"remainingRequest":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\dataLab\\datasearch\\dataImportPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\dataLab\\datasearch\\dataImportPage.vue","mtime":1654652482547},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/code/DataAssetPlatform000/Pncui-Ind/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/code/DataAssetPlatform000/Pncui-Ind/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _request = _interopRequireDefault(require(\"@/utils/request\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"dataImportPage\",\n  data: function data() {\n    return {\n      currentStep: 0,\n      firstForm: {},\n      firstShow: true,\n      secondForm: {},\n      secondShow: false,\n      file: undefined,\n      fileList: [],\n      fileType: ['csv'],\n      fileSize: 1024\n    };\n  },\n  methods: {\n    executeSQL: function executeSQL() {\n      var _this = this;\n\n      if (this.firstForm.sqlText == null || this.firstForm.sqlText === \"\") {\n        this.$message.error(\"请输入SQL语句\");\n        return;\n      }\n\n      (0, _request.default)({\n        url: \"/datalab/dataImport/executeMgrSql\",\n        method: \"post\",\n        data: {\n          sqlText: this.firstForm.sqlText\n        }\n      }).then(function (res) {\n        if (res.returnCode === '200') {\n          _this.$message({\n            message: \"执行成功\",\n            type: 'success'\n          });\n\n          _this.jumpStep();\n        } else {\n          _this.$message({\n            message: res.returnMsg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    jumpStep: function jumpStep() {\n      this.currentStep++;\n      this.firstShow = false;\n      this.secondShow = true;\n    },\n    lastStep: function lastStep() {\n      this.currentStep--;\n      this.firstShow = true;\n      this.secondShow = false;\n    },\n    queryTableNames: function () {\n      var _queryTableNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _request.default)({\n                  url: \"/datalab/dataImport/showAnableTables\",\n                  method: \"get\",\n                  data: {}\n                });\n\n              case 2:\n                res = _context.sent;\n\n                if (res.returnCode === '200') {\n                  this.secondForm.projectName = res.data.projectName;\n                  this.secondForm.tableNames = res.data.tableNames;\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function queryTableNames() {\n        return _queryTableNames.apply(this, arguments);\n      }\n\n      return queryTableNames;\n    }(),\n    previewFile: function previewFile(file) {\n      if (file.url) {\n        window.location.href = file.url;\n      }\n    },\n    beforeUpload: function beforeUpload(file) {\n      if (file === null || file === undefined) {\n        this.$message.error('请选择文件');\n        return false;\n      }\n\n      var limitBody = this.fileUploadLimit(file, this.fileType);\n\n      if (limitBody.limit) {\n        //错误提示了，重置文件\n        this.fileList = [];\n        this.file = undefined;\n        this.$message({\n          message: limitBody.error,\n          type: 'error'\n        });\n      }\n\n      return !limitBody.limit;\n    },\n    //文件上传限制\n    fileUploadLimit: function fileUploadLimit(file, fileType) {\n      var filePost = file.name.substring(file.name.lastIndexOf('.') + 1);\n      var extension = fileType.findIndex(function (item) {\n        return item.toLowerCase().indexOf(filePost.toLowerCase()) > -1;\n      }); //文件大小限定50kb\n\n      var isLimit = file.size / 1024 < this.fileSize;\n\n      if (extension === -1) {\n        var fileTypeStr = fileType.join(',');\n        return {\n          limit: true,\n          error: '仅支持上传' + fileTypeStr + '格式文件'\n        };\n      }\n\n      return {\n        limit: !isLimit,\n        error: '文件大小不能超过' + this.fileSize + 'kb'\n      };\n    },\n    handleExceed: function handleExceed(files, fileList) {\n      this.$message.error('仅可上传1个文件');\n    },\n    //上传文件\n    handleImportFile: function handleImportFile(file) {\n      this.file = file.raw; //this.$refs.uploadButton.submit()\n    },\n    uploadFile: function uploadFile() {\n      var _this2 = this;\n\n      if (!this.beforeUpload(this.file)) return;\n\n      if (this.secondForm.tableName == null || this.secondForm.tableName === \"\") {\n        this.$message.error(\"请选择导入表-表名\");\n        return;\n      }\n\n      var formData = new FormData();\n      formData.append('file', this.file);\n      formData.append('tableName', this.secondForm.tableName);\n      formData.append('projectName', this.secondForm.projectName);\n      (0, _request.default)({\n        url: '/datalab/dataImport/importCsvData',\n        method: 'post',\n        headers: {\n          'Content-Type': 'multipart/form-data;charset=UTF-8'\n        },\n        data: formData\n      }).then(function (res) {\n        if (res.returnCode === '200') {\n          _this2.$message({\n            message: '导入成功',\n            type: 'success'\n          });\n\n          _this2.importDialogVisible = false; //this.queryPageList()\n        } else {\n          _this2.$message({\n            message: '导入失败，' + res.returnMsg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    handleSuccess: function handleSuccess(res, file, fileList) {\n      this.$emit('on-success', this.fileList);\n    },\n    refreshData: function refreshData() {\n      this.queryTableNames();\n    }\n  },\n  mounted: function mounted() {\n    this.queryTableNames();\n  }\n};\nexports.default = _default;",null]}