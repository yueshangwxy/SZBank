{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\utils\\validator.js","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\utils\\validator.js","mtime":1647917138740},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178}],"contextDependencies":[],"result":["import _typeof from \"D:/code/DataAssetPlatform/Pncui-Ind/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.number.constructor\";\n\n/*是否合法IP地址*/\nexport function validateIP(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    var reg = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n\n    if (!reg.test(value) && value != '') {\n      callback(new Error('请输入正确的IP地址'));\n    } else {\n      callback();\n    }\n  }\n}\n/*\r\n*校验字符长度是否超过50\r\n*/\n\nexport function validateStrLenHalfHundred(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (value != '' && value.length > 50) {\n      callback(new Error('长度不能超过50字符'));\n    } else {\n      callback();\n    }\n  }\n}\n/*\r\n*校验字符长度是否超过100\r\n*/\n\nexport function validateStrLenHundred(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (value != '' && value.length > 100) {\n      callback(new Error('长度不能超过100字符'));\n    } else {\n      callback();\n    }\n  }\n}\n/*\r\n*校验字符长度是否超过500\r\n*/\n\nexport function validateStrLenFiveHundred(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (value != '' && value.length > 500) {\n      callback(new Error('长度不能超过500字符'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 是否手机号码或者固话*/\n\nexport function validatePhoneTwo(rule, value, callback) {\n  var reg = /^((0\\d{2,3}-\\d{7,8})|(1[34578]\\d{9}))$/;\n  ;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value) && value != '') {\n      callback(new Error('请输入正确的电话号码或者固话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 是否固话*/\n\nexport function validateTelphone(rule, value, callback) {\n  var reg = /0\\d{2}-\\d{7,8}/;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value) && value != '') {\n      callback(new Error('请输入正确的固话（格式：区号+号码,如010-1234567）'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 是否手机号码*/\n\nexport function validatePhone(rule, value, callback) {\n  var reg = /^[1][3,4,5,7,8][0-9]{9}$/;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value) && value != '') {\n      callback(new Error('请输入正确的电话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 是否身份证号码*/\n\nexport function validateIdNo(rule, value, callback) {\n  var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value) && value != '') {\n      callback(new Error('请输入正确的身份证号码'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 是否邮箱*/\n\nexport function validateEMail(rule, value, callback) {\n  var reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value)) {\n      callback(new Error('请输入正确的邮箱地址'));\n    } else {\n      callback();\n    }\n  }\n}\n/* 合法uri*/\n\nexport function validateURL(textval) {\n  var urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n  return urlregex.test(textval);\n}\n/*验证内容是否英文数字以及下划线*/\n\nexport function isPassword(rule, value, callback) {\n  var reg = /^[_a-zA-Z0-9]+$/;\n\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if (!reg.test(value)) {\n      callback(new Error('密码仅由英文字母，数字以及下划线组成'));\n    } else {\n      callback();\n    }\n  }\n}\n/*自动检验数值的范围*/\n\nexport function checkMax20000(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else if (!Number(value)) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else if (value < 1 || value > 20000) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else {\n    callback();\n  }\n} //验证数字输入框最大数值,32767\n\nexport function checkMaxVal(rule, value, callback) {\n  if (value < 0 || value > 32767) {\n    callback(new Error('请输入[0,32767]之间的数字'));\n  } else {\n    callback();\n  }\n} //验证是否1-99之间\n\nexport function isOneToNinetyNine(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      var re = /^[1-9][0-9]{0,1}$/;\n      var rsCheck = re.test(value);\n\n      if (!rsCheck) {\n        callback(new Error('请输入正整数，值为【1,99】'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n} // 验证是否整数（包含带符号整数）\n\nexport function isSignedInteger(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    var re = /^-?\\d+$/;\n    var rsCheck = re.test(value);\n\n    if (!rsCheck) {\n      callback(new Error('仅允许输入数字'));\n    } else {\n      callback();\n    }\n  }\n} // 验证是否阿拉伯数字\n\nexport function isArabicFigures(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else if (value.startsWith(\".\")) {\n    callback(new Error('仅允许输入阿拉伯数字'));\n  } else {\n    var re = /^[-.]?\\d+(?:\\.\\d+)?$/;\n    var rsCheck = re.test(value);\n\n    if (!rsCheck) {\n      callback(new Error('仅允许输入阿拉伯数字'));\n    } else {\n      callback();\n    }\n  }\n} // 验证是否整数\n\nexport function isInteger(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      var re = /^[0-9]*[1-9][0-9]*$/;\n      var rsCheck = re.test(value);\n\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n} // 验证是否整数,非必填\n\nexport function isIntegerNotMust(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      var re = /^[0-9]*[1-9][0-9]*$/;\n      var rsCheck = re.test(value);\n\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 1000);\n} // 验证是否是[0-1]的小数\n\nexport function isDecimal(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入[0,1]之间的数字'));\n    } else {\n      if (value < 0 || value > 1) {\n        callback(new Error('请输入[0,1]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n} // 验证是否是[1-10]的小数,即不可以等于0\n\nexport function isBtnOneToTen(rule, value, callback) {\n  if (typeof value == 'undefined') {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数，值为[1,10]'));\n    } else {\n      if (!(value == '1' || value == '2' || value == '3' || value == '4' || value == '5' || value == '6' || value == '7' || value == '8' || value == '9' || value == '10')) {\n        callback(new Error('请输入正整数，值为[1,10]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n} // 验证是否是[1-100]的小数,即不可以等于0\n\nexport function isBtnOneToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入整数，值为[1,100]'));\n    } else {\n      if (value < 1 || value > 100) {\n        callback(new Error('请输入整数，值为[1,100]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n} // 验证是否是[0-100]的小数\n\nexport function isBtnZeroToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (!Number(value)) {\n      callback(new Error('请输入[1,100]之间的数字'));\n    } else {\n      if (value < 0 || value > 100) {\n        callback(new Error('请输入[1,100]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n} // 验证端口是否在[0,65535]之间\n\nexport function isPort(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n\n  setTimeout(function () {\n    if (value == '' || _typeof(value) == undefined) {\n      callback(new Error('请输入端口值'));\n    } else {\n      var re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      var rsCheck = re.test(value);\n\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n} // 验证端口是否在[0,65535]之间，非必填,isMust表示是否必填\n\nexport function isCheckPort(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n\n  setTimeout(function () {\n    if (value == '' || _typeof(value) == undefined) {//callback(new Error('请输入端口值'));\n    } else {\n      var re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      var rsCheck = re.test(value);\n\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n/* 小写字母*/\n\nexport function validateLowerCase(str) {\n  var reg = /^[a-z]+$/;\n  return reg.test(str);\n}\n/*保留2为小数*/\n\nexport function validatetoFixedNew(str) {\n  return str;\n}\n/* 验证key*/\n// export function validateKey(str) {\n//     var reg = /^[a-z_\\-:]+$/;\n//     return reg.test(str);\n// }\n\n/* 大写字母*/\n\nexport function validateUpperCase(str) {\n  var reg = /^[A-Z]+$/;\n  return reg.test(str);\n}\n/* 大小写字母*/\n\nexport function validatAlphabets(str) {\n  var reg = /^[A-Za-z]+$/;\n  return reg.test(str);\n}",null]}