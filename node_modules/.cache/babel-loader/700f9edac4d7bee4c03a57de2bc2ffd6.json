{"remainingRequest":"D:\\SZBank\\node_modules\\babel-loader\\lib\\index.js!D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\SZBank\\src\\views\\indicators\\dataLab\\datasearch\\umRelate.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\SZBank\\src\\views\\indicators\\dataLab\\datasearch\\umRelate.vue","mtime":1655974464043},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/SZBank/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/SZBank/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _request = _interopRequireDefault(require(\"@/utils/request\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _default = {\n  name: \"UmRelate\",\n  data: function data() {\n    return {\n      params: {\n        dataworksAccount: this.$route.query.dataworksAccount,\n        projectName: this.$route.query.projectName\n      },\n      queryForm: {\n        //nickName: \"\",\n        total: 0,\n        page: 1,\n        size: 10,\n        loading: false\n      },\n      tableData: [],\n      addDialogVisible: false,\n      editDialogVisible: false,\n      editForm: {\n        dataworksAccount: '',\n        projectName: '',\n        nickName: ''\n      },\n      oldDataAccount: \"\",\n      oldProjectName: \"\",\n      editFormRules: {\n        nickName: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          message: '请输入姓名'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 分页\n    handleSizeChange: function handleSizeChange(val) {\n      this.queryForm.size = val;\n      this.queryPageList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.queryForm.page = val;\n      this.queryPageList();\n    },\n    queryPageList: function () {\n      var _queryPageList = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.queryForm.loading = true;\n                _context.next = 3;\n                return (0, _request.default)({\n                  url: '/datalab/dataworksAcProject/detailRelateList',\n                  method: 'post',\n                  data: {\n                    pageSize: this.queryForm.size,\n                    pageNum: this.queryForm.page,\n                    dataworksAccount: this.params.dataworksAccount,\n                    projectName: this.params.projectName,\n                    nickName: this.queryForm.nickName\n                  }\n                });\n\n              case 3:\n                res = _context.sent;\n\n                if (res.data && res.data.records) {\n                  this.tableData = res.data.records;\n                  this.queryForm.total = res.data.total;\n                  this.queryForm.page = res.data.current;\n                }\n\n                this.queryForm.loading = false; //console.log(res)\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function queryPageList() {\n        return _queryPageList.apply(this, arguments);\n      }\n\n      return queryPageList;\n    }(),\n    //重置查询条件\n    resetQueryForm: function resetQueryForm() {\n      this.queryForm.nickName = '';\n      this.queryPageList();\n    },\n    handleCloseDetail: function handleCloseDetail() {\n      this.addDialogVisible = false;\n      this.editDialogVisible = false;\n      this.$refs.editFormRef.resetFields();\n      this.queryPageList();\n    },\n    //新增\n    handleAddRule: function handleAddRule() {\n      this.addDialogVisible = true;\n      this.editForm = {};\n    },\n    //编辑\n    handleEdit: function handleEdit(index, row) {\n      this.editDialogVisible = true;\n      this.editForm = row;\n      this.editForm.oldId = row.id;\n    },\n    //提交新增\n    handleSendAdd: function handleSendAdd() {\n      var _this = this;\n\n      this.$refs['editFormRef'].validate(function (valid) {\n        if (valid) {\n          (0, _request.default)({\n            url: '/datalab/dataworksAcProject/addRelate',\n            method: 'post',\n            data: {\n              dataworksAccount: _this.params.dataworksAccount,\n              projectName: _this.params.projectName,\n              id: _this.editForm.id\n            }\n          }).then(function (res) {\n            if (res.returnCode === '200') {\n              _this.$message({\n                message: '新增成功',\n                type: 'success'\n              });\n            } else {\n              _this.$message({\n                message: '新增失败,' + res.returnMsg,\n                type: 'error'\n              });\n            }\n\n            _this.addDialogVisible = false;\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    //提交编辑\n    handleSendEdit: function handleSendEdit() {\n      var _this2 = this;\n\n      this.$refs['editFormRef'].validate(function (valid) {\n        if (valid) {\n          (0, _request.default)({\n            url: '/datalab/dataworksAcProject/updateRelate',\n            method: 'post',\n            data: {\n              dataworksAccount: _this2.params.dataworksAccount,\n              projectName: _this2.params.projectName,\n              id: _this2.editForm.id,\n              oldId: _this2.editForm.oldId\n            }\n          }).then(function (res) {\n            if (res.returnCode === '200') {\n              _this2.$message({\n                message: '修改成功',\n                type: 'success'\n              });\n            } else {\n              _this2.$message({\n                message: '修改失败,' + res.returnMsg,\n                type: 'error'\n              });\n            }\n\n            _this2.editDialogVisible = false;\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    //删除\n    handleDelete: function handleDelete(index, row) {\n      var _this3 = this;\n\n      this.$confirm('确定删除UM用户关联吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        (0, _request.default)({\n          url: '/datalab/dataworksAcProject/deleteRelate',\n          method: 'post',\n          data: {\n            dataworksAccount: row.dataworksAccount,\n            id: row.id\n          }\n        }).then(function (res) {\n          if (res.returnCode === '200') {\n            _this3.$message({\n              type: 'success',\n              message: '删除成功!'\n            });\n\n            _this3.queryPageList();\n          } else {\n            _this3.$message({\n              type: 'error',\n              message: res.returnMsg\n            });\n          }\n        });\n      }).catch(function () {\n        _this3.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    //查询用户\n    searchUsersAsync: function () {\n      var _searchUsersAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(queryString, callback) {\n        var res, _iterator, _step, i;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _request.default)({\n                  url: '/datalab/dataworksAcProject/searchUsers',\n                  method: 'post',\n                  data: {\n                    queryString: queryString\n                  }\n                });\n\n              case 2:\n                res = _context2.sent;\n\n                if (res.returnCode === '200') {\n                  _iterator = _createForOfIteratorHelper(res.data);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      i = _step.value;\n                      i.value = i.nickName;\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  callback(res.data);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function searchUsersAsync(_x, _x2) {\n        return _searchUsersAsync.apply(this, arguments);\n      }\n\n      return searchUsersAsync;\n    }(),\n    //处理选中的姓名\n    handleSelectUser: function handleSelectUser(item) {\n      //console.log('item====' + item.id)\n      this.editForm.id = item.id;\n    },\n    blurForBug: function blurForBug() {\n      document.activeElement.blur();\n    }\n  },\n  mounted: function mounted() {\n    this.queryPageList();\n  },\n  created: function created() {//console.log('created:' + this.$route.query.dataworksAccount)\n  }\n};\nexports.default = _default;",null]}