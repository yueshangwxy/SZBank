{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\layout\\components\\Settings\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\layout\\components\\Settings\\index.vue","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ThemePicker from '@eladmin/components/ThemePicker';\nexport default {\n  components: {\n    ThemePicker: ThemePicker\n  },\n  data: function data() {\n    return {};\n  },\n  computed: {\n    fixedHeader: {\n      get: function get() {\n        return this.$store.state.settings.fixedHeader;\n      },\n      set: function set(val) {\n        this.$store.dispatch('settings/changeSetting', {\n          key: 'fixedHeader',\n          value: val\n        });\n      }\n    },\n    tagsView: {\n      get: function get() {\n        return this.$store.state.settings.tagsView;\n      },\n      set: function set(val) {\n        this.$store.dispatch('settings/changeSetting', {\n          key: 'tagsView',\n          value: val\n        });\n      }\n    },\n    sidebarLogo: {\n      get: function get() {\n        return this.$store.state.settings.sidebarLogo;\n      },\n      set: function set(val) {\n        this.$store.dispatch('settings/changeSetting', {\n          key: 'sidebarLogo',\n          value: val\n        });\n      }\n    },\n    uniqueOpened: {\n      get: function get() {\n        return this.$store.state.settings.uniqueOpened;\n      },\n      set: function set(val) {\n        this.$store.dispatch('settings/changeSetting', {\n          key: 'uniqueOpened',\n          value: val\n        });\n      }\n    }\n  },\n  methods: {\n    themeChange: function themeChange(val) {\n      this.$store.dispatch('settings/changeSetting', {\n        key: 'theme',\n        value: val\n      });\n    }\n  }\n};",null]}