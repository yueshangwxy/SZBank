{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue","mtime":1647917133447},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["import _defineProperty from \"D:/code/DataAssetPlatform/Pncui-Indicator/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:/code/DataAssetPlatform/Pncui-Indicator/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _methods;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport crudIndDatasource from \"../../../api/datasources/indDatasource\";\nimport CRUD, { presenter, header, form, crud } from '@crud/crud';\nimport rrOperation from '@crud/RR.operation';\nimport crudOperation from '@crud/CRUD.operation';\nimport udOperation from '@crud/UD.operation';\nimport pagination from '@crud/Pagination';\nimport { test, saveTableAndColumnForList } from \"../../../api/datasources/indDatasource\";\nimport { getTableList, getTableListById } from \"../../../api/datasources/indDataTable\";\nimport { getColumnListByDatabase, saveColumnList } from \"../../../api/datasources/indDataColumn\"; // crud交由presenter持有\n\nvar defaultCrud = CRUD({\n  title: '数据源',\n  url: crudIndDatasource.url,\n  sort: 'id,desc',\n  crudMethod: _objectSpread({}, crudIndDatasource.method)\n});\nvar defaultForm = {\n  datasourceName: null,\n  datasourceType: null,\n  datasourceSchema: null,\n  datasourceDriver: null,\n  datasourceUrl: null,\n  datasourceUser: null,\n  datasourcePassword: null,\n  datasourceDesc: null,\n  crtUserCode: null,\n  crtOrgCode: null,\n  crtDate: null,\n  updUserCode: null,\n  updOrgCode: null,\n  updDate: null,\n  id: null,\n  tenant: null,\n  datasourceDriverType: null,\n  maxConnNum: null,\n  vallidationMethod: null,\n  vallidationSql: 'SELECT 1 FROM DUAL',\n  dbCharset: null,\n  dbToCharset: null,\n  quoteString: null,\n  transitionIsolation: null\n};\nexport default {\n  name: 'IndDatasource',\n  components: {\n    pagination: pagination,\n    crudOperation: crudOperation,\n    rrOperation: rrOperation,\n    udOperation: udOperation\n  },\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  dicts: ['DATASOURCE_TYPE'],\n  data: function data() {\n    return {\n      table: {\n        columns: {\n          id: 'hidden',\n          tenant: 'hidden',\n          datasourceDriverType: 'hidden',\n          datasourceDriver: 'hidden',\n\n          /*datasourceUrl: 'hidden',*/\n          maxConnNum: 'hidden',\n          vallidationMethod: 'hidden',\n          vallidationSql: 'hidden',\n          dbCharset: 'hidden',\n          dbToCharset: 'hidden',\n          quoteString: 'hidden',\n          transitionIsolation: 'hidden',\n          datasourceDesc: 'hidden'\n        }\n      },\n      show: false,\n      showDataInfo: false,\n      showTable: false,\n      showColumnInfo: false,\n      loading: true,\n      editForm: {\n        tableName: '',\n        tableDesc: ''\n      },\n      dataSourceId: '',\n      tabName: '',\n      showType: 'primary',\n      buttonName: '高级选项',\n      tableData: [],\n      columnData: [],\n      tempData: [],\n      resultData: [],\n      passw: 'password',\n      icon: 'el-input__icon el-icon-view',\n      permission: {\n        add: ['admin', 'indDatasource:add'],\n        edit: ['admin', 'indDatasource:edit'],\n        del: ['admin', 'indDatasource:del'],\n        dataBaseManage: ['admin', 'dataBaseManage:del'],\n        details: ['admin', 'indDatasource:details']\n      },\n      rules: {\n        datasourceName: [{\n          required: true,\n          message: '数据源名称不能为空',\n          trigger: 'blur'\n        }],\n        datasourceType: [{\n          required: true,\n          message: '数据库类型不能为空',\n          trigger: 'blur'\n        }],\n        datasourceSchema: [{\n          required: true,\n          message: '数据库SCHEMA不能为空',\n          trigger: 'blur'\n        }],\n        datasourceDriver: [{\n          required: true,\n          message: '数据库驱动不能为空',\n          trigger: 'blur'\n        }],\n        datasourceUrl: [{\n          required: true,\n          message: '连接URL不能为空',\n          trigger: 'blur'\n        }],\n        datasourceUser: [{\n          required: true,\n          message: '用户名不能为空',\n          trigger: 'blur'\n        }],\n        datasourcePassword: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.$nextTick(function () {// const para = {\n      // 'dataSource_id': 'd123',\n      // 'table_id': 't1'\n      // }\n      // getColumnListById(para).then(data => {\n      // console.log('=====getColumnListById====>>>>', data)\n      // })\n    });\n  },\n  methods: (_methods = {}, _defineProperty(_methods, CRUD.HOOK.beforeRefresh, function () {\n    return true;\n  }), _defineProperty(_methods, \"toDelete\", function toDelete(data) {\n    var _this = this;\n\n    //批量删除\n    this.$confirm('确认删除数据源?', '删除数据源', {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(function () {\n      _this.crud.doDelete(data);\n    });\n  }), _defineProperty(_methods, \"showPass\", function showPass() {\n    // 点击图标是密码隐藏或显示\n    if (this.passw === 'text') {\n      this.passw = 'password'; // 更换图标\n      // this.icon=\"el-input__icon el-icon-view\"\n    } else {\n      this.passw = 'text'; // this.icon=\"el-input__icon el-icon-view\"\n    }\n  }), _defineProperty(_methods, \"setDriverType\", function setDriverType() {\n    this.form.datasourceDriverType = this.form.datasourceType;\n\n    if (this.form.datasourceType === 'mysql') {\n      this.form.datasourceDriver = 'com.mysql.jdbc.Driver';\n      this.form.datasourceUrl = 'jdbc:mysql://<servername>:<port>/<database>?useOldAliasMetadataBehavior=true&useUnicode=true&characterEntableFlag=GBK&zeroDateTimeBehavior=convertToNull';\n    } else if (this.form.datasourceType === 'oracle') {\n      this.form.datasourceDriver = 'oracle.jdbc.driver.OracleDriver';\n      this.form.datasourceUrl = 'jdbc:oracle:thin:@<ip>:1521/<serviceName>';\n    } else if (this.form.datasourceType === 'db2') {\n      this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver';\n      this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>';\n    } else if (this.form.datasourceType === 'db2') {\n      this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver';\n      this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>';\n    } else if (this.form.datasourceDriverType === 'postgresql') {\n      this.form.datasourceDriver = 'org.postgresql.Driver';\n      this.form.datasourceUrl = 'jdbc:postgresql://<servername>:<port>/<database>';\n    } else {\n      this.form.datasourceDriver = null;\n      this.form.datasourceUrl = null;\n    }\n  }), _defineProperty(_methods, \"showInfo\", function showInfo(show) {\n    if (show) {\n      // true 关闭高级选项\n      this.show = false;\n      this.showType = 'primary';\n      this.buttonName = '高级选项';\n    } else {\n      this.show = true; // false 打开高级选项\n\n      this.showType = 'primary';\n      this.buttonName = '隐藏高级选项';\n    }\n  }), _defineProperty(_methods, \"doTest\", function doTest() {\n    var _this2 = this;\n\n    this.$refs['form'].validate(function (valid) {\n      if (!valid) {\n        // rules规则校验不通过\n        return;\n      } else {\n        test(_this2.form).then(function (data) {\n          // console.log(\"测试数据源返回数据\", data)\n          if (data.code === 0) {\n            _this2.$message.success({\n              message: '连接成功'\n            });\n          } else {\n            _this2.$message.error({\n              message: '数据源连接错误'\n            });\n          }\n        });\n      }\n    });\n  }), _defineProperty(_methods, \"dataBaseManage\", function dataBaseManage(data, index) {\n    var _this3 = this;\n\n    var tempId;\n\n    if (index === 1) {\n      // 只选中一行 取该行数据源id\n      tempId = data.id;\n    } else {\n      // 未选行 默认查询local本地数据源\n      tempId = 'local';\n    }\n\n    this.tableData = [];\n    this.resultData = [];\n    this.columnData = [];\n    this.tempData = [];\n    this.tabName = null;\n    this.dataSourceId = tempId;\n    this.loading = true; // 查询已有表\n\n    getTableListById(tempId).then(function (data) {\n      if (data.code === 0) {\n        _this3.resultData = data.data;\n        console.log('=====resultData====>>>>', _this3.resultData);\n      } else {\n        _this3.resultData = [];\n\n        _this3.$message.error({\n          message: '数据源连接错误'\n        });\n      }\n    }); // 查询全部表\n\n    setTimeout(function () {\n      getTableList(tempId).then(function (data) {\n        if (data.code === 0) {\n          _this3.loading = false;\n          _this3.tableData = data.data;\n          _this3.tempData = data.data;\n          console.log('=====tableData====>>>>', _this3.tableData); // 做默认选中遍历\n\n          _this3.$nextTick(function () {\n            var _this4 = this;\n\n            this.resultData.forEach(function (item) {\n              for (var i = 0; i < _this4.tableData.length; i++) {\n                if (item.tableName === _this4.tableData[i].tableName) {\n                  _this4.tableData.splice(i, 1);\n\n                  return false;\n                }\n              }\n            });\n          });\n        } else {\n          _this3.tableData = [];\n          _this3.loading = false;\n\n          _this3.$message.error({\n            message: '数据源连接错误'\n          });\n        }\n      });\n    }, 1000);\n    this.showTable = true;\n  }), _defineProperty(_methods, \"select\", function select(selection, row) {\n    this.$nextTick(function () {\n      if (row.tableFlag === '1') {\n        this.$set(row, 'tableFlag', ''); // 取消选中\n      } else {\n        this.$set(row, 'tableFlag', '1'); // 选中\n      }\n    });\n  }), _defineProperty(_methods, \"selectColumn\", function selectColumn(selection, row) {\n    this.$nextTick(function () {\n      if (row.columnFlag === '1') {\n        this.$set(row, 'columnFlag', ''); // 取消选中\n      } else {\n        this.$set(row, 'columnFlag', '1'); // 选中\n      }\n    });\n  }), _defineProperty(_methods, \"selectAll\", function selectAll(selection) {\n    this.$nextTick(function () {\n      if (selection.length === this.tableData.length) {\n        // 取消全选\n        for (var i = 0; i < this.tableData.length; i++) {\n          this.$set(this.tableData[i], 'tableFlag', '1');\n        }\n      } else {\n        for (var _i = 0; _i < this.tableData.length; _i++) {\n          this.$set(this.tableData[_i], 'tableFlag', ''); // 全部选中\n        }\n      }\n    });\n  }), _defineProperty(_methods, \"selectAllColumn\", function selectAllColumn(selection) {\n    this.$nextTick(function () {\n      if (selection.length === this.columnData.length) {\n        // 取消全选\n        for (var i = 0; i < this.columnData.length; i++) {\n          this.$set(this.columnData[i], 'columnFlag', '1');\n        }\n      } else {\n        for (var _i2 = 0; _i2 < this.columnData.length; _i2++) {\n          this.$set(this.columnData[_i2], 'columnFlag', ''); // 全部选中\n        }\n      }\n    });\n  }), _defineProperty(_methods, \"selectRightAll\", function selectRightAll(selection) {\n    this.$nextTick(function () {\n      if (selection.length === this.resultData.length) {\n        // 取消全选\n        for (var i = 0; i < this.resultData.length; i++) {\n          this.$set(this.resultData[i], 'tableFlag', '1');\n        }\n      } else {\n        for (var _i3 = 0; _i3 < this.resultData.length; _i3++) {\n          this.$set(this.resultData[_i3], 'tableFlag', ''); // 全部选中\n        }\n      }\n    });\n  }), _defineProperty(_methods, \"save\", function save() {\n    console.log('=====resultData====>>>>', this.resultData);\n    saveTableAndColumnForList(this.resultData, this.dataSourceId).then(function (data) {\n      if (data.code === 0) {\n        console.log('保存成功', data.code);\n      } else {\n        console.log('保存失败', data.code);\n      }\n    });\n    this.$message.success({\n      message: '保存成功'\n    });\n    this.showTable = false;\n    this.tableData = [];\n  }), _defineProperty(_methods, \"searchName\", function searchName() {\n    this.$nextTick(function () {\n      var tabName = this.tabName === null ? '' : this.tabName;\n      var temp = this.tempData;\n      var result = this.resultData;\n\n      for (var i = 0; i < temp.length; i++) {\n        for (var j = 0; j < result.length; j++) {\n          if (temp[i].tableName === result[j].tableName) {\n            temp.splice(i, 1);\n          }\n        }\n      }\n\n      var data = [];\n      data = temp.filter(function (row) {\n        return row.tableName.indexOf(tabName) > -1;\n      });\n      this.tableData = data;\n    });\n  }), _defineProperty(_methods, \"selectLeft\", function selectLeft() {\n    var td = this.tableData.filter(function (row) {\n      if (row.tableFlag === '1') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (td.length === 0) {\n      return false;\n    }\n\n    this.$nextTick(function () {\n      var _this5 = this;\n\n      var leftData = [];\n      var rightData = this.resultData;\n      this.tableData.forEach(function (row) {\n        if (row.tableFlag === '1') {\n          rightData.push(row);\n        }\n      });\n      leftData = this.tableData.filter(function (row) {\n        if (row.tableFlag === '1') {\n          return false;\n        } else {\n          return true;\n        }\n      });\n      leftData.forEach(function (row) {\n        _this5.$set(row, 'tableFlag', '');\n      });\n      rightData.forEach(function (row) {\n        _this5.$set(row, 'tableFlag', '');\n      });\n      this.tableData = leftData;\n      this.resultData = rightData;\n    });\n  }), _defineProperty(_methods, \"selectRight\", function selectRight() {\n    var td = this.resultData.filter(function (row) {\n      if (row.tableFlag === '1') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (td.length === 0) {\n      return false;\n    }\n\n    this.$nextTick(function () {\n      var _this6 = this;\n\n      var leftData = this.tableData;\n      var rightData = [];\n      this.resultData.forEach(function (row) {\n        if (row.tableFlag === '1') {\n          leftData.push(row);\n        }\n      });\n      rightData = this.resultData.filter(function (row) {\n        if (row.tableFlag === '1') {\n          return false;\n        } else {\n          return true;\n        }\n      });\n      leftData.forEach(function (row) {\n        _this6.$set(row, 'tableFlag', '');\n      });\n      rightData.forEach(function (row) {\n        _this6.$set(row, 'tableFlag', '');\n      });\n      this.tableData = leftData;\n      this.resultData = rightData;\n    });\n  }), _defineProperty(_methods, \"handleInfo\", function handleInfo(row) {\n    this.form.id = row.id;\n    this.form.datasourceName = row.datasourceName;\n    this.form.datasourceType = row.datasourceType;\n    this.form.datasourceDriverType = row.datasourceDriverType;\n    this.form.datasourceDriver = row.datasourceDriver;\n    this.form.datasourceSchema = row.datasourceSchema;\n    this.form.datasourceDesc = row.datasourceDesc;\n    this.form.datasourceUrl = row.datasourceUrl;\n    this.form.datasourceUser = row.datasourceUser;\n    this.form.datasourcePassword = row.datasourcePassword;\n    this.form.tenant = row.tenant;\n    this.form.maxConnNum = row.maxConnNum;\n    this.form.vallidationMethod = row.vallidationMethod;\n    this.form.vallidationSql = row.vallidationSql;\n    this.form.dbCharset = row.dbCharset;\n    this.form.dbToCharset = row.dbToCharset;\n    this.form.quoteString = row.quoteString;\n    this.form.transitionIsolation = row.transitionIsolation;\n    this.form.crtUserCode = row.crtUserCode;\n    this.form.crtOrgCode = row.crtOrgCode;\n    this.form.crtDate = this.parseTime(row.crtDate);\n    this.form.updUserCode = row.updUserCode;\n    this.form.updOrgCode = row.updOrgCode;\n    this.form.updDate = this.parseTime(row.updDate);\n    this.showDataInfo = true;\n  }), _defineProperty(_methods, \"handleColumn\", function handleColumn(row) {\n    var _this7 = this;\n\n    this.columnData = [];\n    getColumnListByDatabase(this.dataSourceId, row.tableName).then(function (data) {\n      console.log(\"========getColumnListByDatabase====>>>>\", data);\n\n      if (data.code === 0) {\n        _this7.columnData = data.data;\n\n        _this7.$nextTick(function () {\n          var _this8 = this;\n\n          this.columnData.forEach(function (row) {\n            if (row.columnFlag === '1') {\n              _this8.$refs.multipleTable.toggleRowSelection(row, true);\n            }\n          });\n        });\n      } else {\n        _this7.columnData = [];\n      }\n    });\n    this.showColumnInfo = true;\n  }), _defineProperty(_methods, \"saveColumnInfo\", function saveColumnInfo() {\n    var _this9 = this;\n\n    console.log('=====columnData====>>>>', this.columnData);\n    saveColumnList(this.columnData).then(function (data) {\n      if (data.code === 0) {\n        _this9.$message.success({\n          message: '保存成功'\n        });\n      } else {\n        _this9.$message.error({\n          message: '保存失败'\n        });\n      }\n    });\n    this.showColumnInfo = false;\n    this.columnData = [];\n  }), _methods)\n};",null]}