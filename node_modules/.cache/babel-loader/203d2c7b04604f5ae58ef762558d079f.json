{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\components\\TreeSelect\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\components\\TreeSelect\\index.vue","mtime":1647917128137},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"el-tree-select\",\n  props: {\n    /* 配置项 */\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          value: 'id',\n          // ID字段名\n          label: 'title',\n          // 显示名称\n          children: 'children' // 子级字段名\n\n        };\n      }\n    },\n\n    /* 选项列表数据(树形结构的对象数组) */\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /* 初始值 */\n    value: {\n      type: [String, Array],\n      default: function _default() {\n        return null;\n      }\n    },\n\n    /* 可清空选项 */\n    clearable: {\n      type: Boolean,\n      default: function _default() {\n        return true;\n      }\n    },\n    multiple: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n\n    /* 自动收起 */\n    accordion: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return \"检索关键字\";\n      }\n    }\n  },\n  data: function data() {\n    return {\n      filterText: '',\n      valueId: this.value,\n      // 初始值\n      valueTitle: null,\n      defaultExpandedKey: []\n    };\n  },\n  mounted: function mounted() {\n    this.initHandle();\n  },\n  methods: {\n    // 初始化值\n    initHandle: function initHandle() {\n      var _this = this;\n\n      if (this.valueId) {\n        if (this.multiple) {\n          this.$refs.selectTree.setCheckedKeys(this.valueId.split(\",\")); // 设置默认选中\n\n          this.valueTitle = this.$refs.selectTree.getCheckedNodes().map(function (e) {\n            return e[_this.props.label];\n          }).join(\",\"); //a[this.props.label]\n        } else {\n          this.$refs.selectTree.setCurrentKey(this.valueId); // 设置默认选中\n\n          this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.label]; // 初始化显示\n        }\n\n        this.defaultExpandedKey = [this.valueId]; // 设置默认展开\n      }\n\n      this.initScroll();\n    },\n    // 初始化滚动条\n    initScroll: function initScroll() {\n      this.$nextTick(function () {\n        var scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0];\n        var scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar');\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;';\n        scrollBar.forEach(function (ele) {\n          return ele.style.width = 0;\n        });\n      });\n    },\n    // 切换选项\n    handleNodeClick: function handleNodeClick(node) {\n      if (this.multiple) {\n        return;\n      }\n\n      console.debug('=====handleNodeClick=======', node);\n      this.valueTitle = node[this.props.label];\n      this.valueId = node[this.props.value];\n      this.$emit('getValue', this.valueId);\n      this.defaultExpandedKey = [];\n    },\n    // 切换选项\n    handleCheck: function handleCheck(data, node) {\n      var _this2 = this;\n\n      console.debug('======handleCheck======', data, node);\n      this.valueId = node.checkedKeys.join(\",\");\n      this.valueTitle = node.checkedNodes.map(function (e) {\n        return e[_this2.props.label];\n      }).join(\",\");\n      this.$emit('getValue', this.valueId);\n      this.defaultExpandedKey = [];\n    },\n    // 清除选中\n    clearHandle: function clearHandle() {\n      this.valueTitle = '';\n      this.valueId = null;\n      this.defaultExpandedKey = [];\n      this.clearSelected();\n      this.$emit('getValue', null);\n    },\n\n    /* 清空选中样式 */\n    clearSelected: function clearSelected() {\n      var allNode = document.querySelectorAll('#tree-option .el-tree-node');\n      allNode.forEach(function (element) {\n        return element.classList.remove('is-current');\n      });\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    }\n  },\n  watch: {\n    value: function value() {\n      this.valueId = this.value;\n      this.initHandle();\n    },\n    filterText: function filterText(val) {\n      this.$refs.selectTree.filter(val);\n    }\n  }\n};",null]}