{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\limitRulePage.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\limitRulePage.vue","mtime":1647917138764},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getKeyValueByDimCode } from \"../../../../api/indicators/indDimension\"; //import Treeselect from '@riophae/vue-treeselect'\n\nimport TreeSelect from '@eladmin/components/TreeSelect/index';\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nexport default {\n  components: {\n    TreeSelect: TreeSelect\n  },\n  dicts: ['EXP_SYMBOL'],\n  data: function data() {\n    return {\n      limitRuleDialog: false,\n      title: '',\n      dimInfo: '',\n      tableData: [],\n      tableName: '',\n      indBaseRuleFilters: [],\n      props: {\n        value: \"typeCode\",\n        label: \"typeName\",\n        children: \"children\" // disabled:true\n\n      },\n      // 后台返回的数据和VueTreeselect要求的数据结构不同，需要进行转换\n      normalizer: function normalizer(node) {\n        //去掉children=[]的children属性\n        if (node.children && !node.children.length) {\n          delete node.children;\n        }\n\n        return {\n          id: node.typeCode,\n          label: node.typeName,\n          children: node.children\n        };\n      }\n    };\n  },\n  methods: {\n    getValue: function getValue(value, row) {\n      row.checkValue = value;\n      console.log(row.checkValue, 'checkValue');\n    },\n    //做默认选中的处理\n    selectRow: function selectRow() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var _loop = function _loop(i) {\n          console.log(_this.indBaseRuleFilters[i], 'this.indBaseRuleFilters'); // 根据维度编号查询对应的值列表方法\n\n          getKeyValueByDimCode(_this.indBaseRuleFilters[i].dimCode).then(function (retDate) {\n            if (retDate.code === 0) {\n              //新增一行\n              var newValue = {\n                checkName: _this.indBaseRuleFilters[i].dimCode,\n                colCode: _this.indBaseRuleFilters[i].expName,\n                expsymbol: _this.indBaseRuleFilters[i].expSymbol,\n                checkValue: _this.indBaseRuleFilters[i].expValue,\n                //.split(','),\n                isCheck: false,\n                tempArray: retDate.data\n              };\n\n              _this.tableData.push(newValue);\n            } else {\n              _this.$message.error({\n                message: '未查询到对应的值'\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < _this.indBaseRuleFilters.length; i++) {\n          _loop(i);\n        }\n      });\n    },\n    // 新增一行\n    addClickHandle: function addClickHandle() {\n      var newValue = {\n        checkName: '',\n        colCode: '',\n        expsymbol: 'in',\n        checkValue: null,\n        isCheck: true,\n        tempArray: []\n      };\n      this.tableData.push(newValue);\n    },\n    // 删除行数\n    handleDelete: function handleDelete(index) {\n      this.tableData.splice(index, 1);\n    },\n    // 选择维度后解锁值列表方法\n    getValueList: function getValueList(row) {\n      var _this2 = this;\n\n      var para = {\n        dimCode: row.checkName // change选中的维度编号\n\n      }; // 根据维度编号查询列名\n\n      this.dimInfo.some(function (item) {\n        if (item.dimCode == row.checkName) {\n          row.colCode = item.colCode;\n        }\n      }); // 根据维度编号查询对应的值列表方法\n\n      getKeyValueByDimCode(row.checkName).then(function (retDate) {\n        if (retDate.code === 0) {\n          //row.tempArray = this.normalizer(retDate.data)\n          console.log(\"==============retDate\", retDate, row);\n          row.tempArray = retDate.data;\n          row.isCheck = false; // 值列表状态改为可选\n\n          row.checkValue = null; // 值列表清空\n        } else {\n          _this2.$message.error({\n            message: '未查询到对应的值'\n          });\n        }\n      });\n    },\n    // 确定按钮\n    dimClickHandle: function dimClickHandle() {\n      var val = ''; // 页面显示\n\n      var indBaseRuleFilters = []; // 数据库限制规则信息\n\n      console.log('tableData', this.tableData);\n\n      for (var i = 0; i < this.tableData.length; i++) {\n        //校验维度和值列表是否为空\n        if (this.tableData[i].checkName == null || this.tableData[i].checkName == \"\") {\n          this.$message.error({\n            message: '维度不能为空'\n          });\n          return false;\n        }\n\n        if (this.tableData[i].checkValue.length == 0) {\n          this.$message.error({\n            message: '值不能为空'\n          });\n          return false;\n        } // 根据限制规则拼接限制sql - 用于页面显示\n\n\n        var checkVal = ''; //let checkVal2 = ''\n\n        var checkValues = [];\n        checkValues = this.tableData[i].checkValue.split(',');\n        console.log(checkValues, 'checkValues');\n\n        for (var j = 0; j < checkValues.length; j++) {\n          checkVal += \"'\" + checkValues[j] + \"',\"; //checkVal2 += this.tableData[i].checkValue[j] + \",\"\n        }\n\n        checkVal = checkVal.substr(0, checkVal.length - 1); //checkVal2 = checkVal2.substr(0, checkVal2.length - 1)\n\n        val = val + this.tableData[i].colCode + ' ' + this.tableData[i].expsymbol + ' (' + checkVal + ')' + ' and '; // 封装限制规则数组保存到数据库\n\n        var newValue = {\n          dimCode: this.tableData[i].checkName,\n          expSeq: i + 1,\n          expName: this.tableData[i].colCode,\n          expSymbol: this.tableData[i].expsymbol,\n          expValue: this.tableData[i].checkValue\n        };\n        indBaseRuleFilters.push(newValue);\n      }\n\n      console.log(val, 'val'); // 给父组件传递参数\n\n      this.$emit('func', val.substr(0, val.length - 5), indBaseRuleFilters);\n      this.limitRuleDialog = false;\n    }\n  }\n};",null]}