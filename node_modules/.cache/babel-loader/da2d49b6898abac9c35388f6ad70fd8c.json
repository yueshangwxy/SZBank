{"remainingRequest":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\dataLab\\sqlAnalysis\\sqlFlexibleAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\dataLab\\sqlAnalysis\\sqlFlexibleAnalysis.vue","mtime":1654824275276},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/code/DataAssetPlatform000/Pncui-Ind/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _sqlAnalysis = require(\"@/api/dataLab/sqlAnalysis\");\n\nvar _vuedraggable = _interopRequireDefault(require(\"vuedraggable\"));\n\nvar _auth = require(\"../../../../utils/auth\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  inject: [\"reload\"],\n  name: \"SqlAnalysis\",\n  data: function data() {\n    return {\n      timer: null,\n      buttonType: \"success\",\n      buttonText: \"执行\",\n      loading: false,\n      // 树形控件\n      filterText: \"\",\n      tableName: \"\",\n      defaultProps: {\n        id: \"id\",\n        children: \"tables\",\n        label: \"projectName\"\n      },\n      treeData: [],\n      // 文本域\n      textarea: \"\",\n      textarea1: \"\",\n      textarea2: \"\",\n      description: \"\",\n      // 表格\n      tableList: [],\n      propList: [],\n      // 分页\n      pageSize: 10,\n      currentPage: 1,\n      total: 0,\n      downLoadDialog: false,\n      descriptionDialog: false,\n      //flag为true的时候可以拖动，false的时候还在查找上一张表的字段信息\n      flag: true,\n      //拖到右侧的表\n      nameList: [],\n      tableAndNickname: [],\n      //表和他的别名\n      //放到右侧的节点\n      nodeList: {},\n      //表字段信息\n      tableColumnList: [],\n      //被选择字段\n      selectionList: [],\n      //删除表时，同时删除该表选择的字段\n      newSelectionList: [],\n      //ruleList\n      ruleList: [{\n        where1: \"\",\n        where2: \"\",\n        where3: \"\",\n        where4: \"\"\n      }],\n      columnList: [],\n      connList: [],\n      //拼接好的关联条件\n      //标签页相关\n      activeName: \"first\",\n      connectionShow: false,\n      inputDisabled: false,\n      dragFlag: false,\n      right: 19,\n      connection: 0,\n      type: \"0\",\n      //日志和记录的标签页相关\n      editableTabs: \"log\",\n      tabs: [{\n        title: \"日志\",\n        name: \"log\",\n        closeable: false,\n        propList: [],\n        tableList: []\n      }, {\n        title: \"当前结果\",\n        name: \"latest\",\n        closeable: false,\n        propList: [],\n        tableList: []\n      }],\n      log: \"\"\n    };\n  },\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    },\n    activeName: function activeName(val) {\n      if (val == \"second\") {\n        this.dragFlag = true;\n        this.inputDisabled = true;\n        this.right = 10;\n        this.connection = 9;\n        this.type = \"1\";\n      } else {\n        this.dragFlag = false;\n        this.inputDisabled = false;\n        this.right = 19;\n        this.connection = 0;\n        this.type = \"0\";\n      }\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    (0, _sqlAnalysis.getTablesWithPermissions)().then(function (data) {\n      _this2.treeData = data;\n      console.log(_this2.treeData);\n    });\n    this.propList = [];\n    this.tableList = [], this.tableColumnList = {\n      /*        \"test1\": [\r\n        \"column1\",\r\n        \"column2\",\r\n        \"column3\",\r\n        \"column4\",\r\n        \"column5\",\r\n        \"column6\",\r\n        \"column7\",\r\n        \"column8\"\r\n      ],\r\n      \"test2\":[\r\n        \"column1\",\r\n        \"column2\"\r\n      ]*/\n    };\n    this.columnList = [{\n      from: [],\n      to: []\n    }];\n    console.log(\"this.tableColumnList=\" + Object.keys(this.tableColumnList).length);\n  },\n  mounted: function mounted() {},\n  destroyed: function destroyed() {\n    this.stopSetInterval();\n  },\n  computed: {\n    leftWidth: function leftWidth() {\n      return 24 - this.right - this.connection;\n    }\n  },\n  methods: {\n    getSession: function getSession() {\n      var _this3 = this;\n\n      (0, _sqlAnalysis.getSession)().then(function (data) {\n        if (data.code == \"200\") {\n          _this3.buttonType = \"danger\";\n          _this3.buttonText = \"中止\";\n        }\n      });\n    },\n    stop: function stop() {\n      var _this4 = this;\n\n      (0, _sqlAnalysis.stop)().then(function (data) {\n        if (data.code == \"200\") {\n          _this4.buttonType = \"success\";\n          _this4.buttonText = \"执行\";\n\n          _this4.$message({\n            type: \"success\",\n            message: data.msg\n          });\n        } else {\n          _this4.buttonType = \"success\";\n          _this4.buttonText = \"执行\";\n\n          _this4.$message({\n            type: \"error\",\n            message: data.msg\n          });\n        }\n      });\n      this.stopSetInterval();\n    },\n    // 节点过滤\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.projectName.indexOf(value.toString()) !== -1;\n    },\n    // 节点点击\n    handleNodeClick: function handleNodeClick(data) {},\n    executeSql: function executeSql() {\n      this.connectionShow = true;\n\n      if (this.textarea == null || this.textarea == \"\") {\n        this.$message({\n          type: \"warning\",\n          message: \"请填写SQL!\"\n        });\n      } else {\n        if (this.buttonText == \"执行\") {\n          var param = {\n            sql: this.textarea\n          };\n          this.getListBySQL(param);\n        } else {\n          this.stop();\n        }\n      }\n    },\n    dataDownLoad: function dataDownLoad() {\n      this.downLoadDialog = true;\n    },\n    downLoad: function downLoad(flag) {\n      var _this5 = this;\n\n      if (this.textarea == null || this.textarea == \"\") {\n        this.$message({\n          type: \"warning\",\n          message: \"请填写SQL!\"\n        });\n      } else {\n        var user = this.$store.state.user;\n        var param = {\n          flag: flag,\n          sql: this.textarea,\n          userId: user.user.id,\n          userName: user.user.username,\n          deptId: user.user.deptId,\n          deptName: user.user.deptName\n        };\n\n        if (flag == \"1\") {\n          this.descriptionDialog = true;\n        } else {\n          (0, _sqlAnalysis.downLoad)(param).then(function (data) {\n            _this5.$message({\n              type: \"success\",\n              message: \"下载任务已提交至执行队列，请至'导出结果下载'页面查看任务状态并下载文件\"\n            });\n\n            _this5.downLoadDialog = false;\n          });\n        }\n      }\n    },\n    downLoadSourceData: function downLoadSourceData() {\n      var _this6 = this;\n\n      var user = this.$store.state.user;\n      var param = {\n        flag: \"1\",\n        sql: this.textarea,\n        description: this.description,\n        userId: user.user.id,\n        userName: user.user.username,\n        deptId: user.user.deptId,\n        deptName: user.user.dept\n      };\n      (0, _sqlAnalysis.downLoad)(param).then(function (data) {\n        console.log(JSON.stringify(data));\n        _this6.downLoadDialog = false;\n        _this6.descriptionDialog = false;\n\n        _this6.$message({\n          type: \"success\",\n          message: \"原始数据下载任务已提交审核，请至导出结果下载页面查看该任务审核状态并下载数据文件\"\n        });\n      });\n    },\n    closeDescriptionDialog: function closeDescriptionDialog() {\n      this.descriptionDialog = false;\n      this.description = \"\";\n    },\n    getListBySQL: function getListBySQL(param) {\n      var noneList = [];\n\n      if (this.nameList.length > 1 && this.connList.length == 0 && this.type == \"1\") {\n        this.$message({\n          type: \"warning\",\n          message: \"请填写关联条件\"\n        });\n      } else if (this.nameList.length != this.connList.length + 1 && this.type == \"1\") {\n        var index = 0;\n\n        for (var i = 0; i < this.nameList.length; i++) {\n          var nickName = \"t\".concat(i + 1); //  \"t\" + (i + 1)\n\n          for (var k in this.connList) {\n            if (this.connList[k].includes(nickName)) {\n              index += 1;\n              break;\n            }\n          }\n\n          if (index == 0) {\n            noneList.push(this.nameList[i]);\n          }\n\n          index = 0;\n        }\n\n        if (noneList.length > 0) {\n          this.$message({\n            type: \"warning\",\n            message: \"表\" + noneList.toString() + \"没有和其他表关联\"\n          });\n        } else {\n          this.submit(param);\n        }\n      } else {\n        this.submit(param);\n      }\n    },\n    submit: function submit(param) {\n      var _this7 = this;\n\n      this.loading = true;\n      this.log = \"running\";\n      this.editableTabs = \"log\";\n      this.createSetInterval();\n      (0, _sqlAnalysis.getListBySQL)(param).then(function (data) {\n        console.log(data);\n        _this7.buttonText = \"执行\";\n        _this7.buttonType = \"success\";\n\n        if (data.code == \"200\") {\n          _this7.stopSetInterval();\n\n          _this7.handleTabs();\n\n          _this7.currentPage = 1;\n          _this7.propList = data.head;\n          _this7.tableList = data.data;\n          _this7.log = data.log;\n          _this7.total = _this7.tableList.length;\n          _this7.tabs[1].propList = _this7.propList;\n          _this7.tabs[1].tableList = _this7.tableList;\n        } else {\n          _this7.stopSetInterval();\n\n          _this7.log = data.log;\n\n          _this7.$message({\n            type: \"error\",\n            message: data.msg\n          });\n        }\n\n        _this7.loading = false;\n      });\n      this.loading = false;\n    },\n    stopSetInterval: function stopSetInterval() {\n      console.log(\"=================轮询结束==================\");\n\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    createSetInterval: function createSetInterval() {\n      console.log(\"=================轮询开始==================\");\n      this.stopSetInterval();\n\n      var _this = this;\n\n      this.timer = setInterval(function () {\n        _this.getSession();\n      }, 5000);\n    },\n    // 拖拽\n\n    /*      drag(ev, node) {\r\n        console.log(\"拖动\", node);\r\n        let transData = JSON.stringify(node)\r\n        this.dom = ev.currentTarget.cloneNode(true);\r\n        ev.dataTransfer.setData(\"node\", transData)\r\n        this.tableName = this.dom.textContent;\r\n        //console.log(this.dom);\r\n        //console.log(this.dom.tableName);\r\n      },*/\n    handleDragStart: function handleDragStart(node, event) {\n      console.log(\"拖动\", node);\n      this.nodeList = node.data;\n      event.dataTransfer.setData(\"node\", node);\n    },\n\n    /*      handleDragEnd(node,event){\r\n        console.log(\"放下\", item);\r\n        this.textarea = \"select * from \" +this.tableName;\r\n      },*/\n    treeAllowDrop: function treeAllowDrop() {\n      return false;\n    },\n    // 允许放下拖拽\n    allowDrop: function allowDrop(ev) {\n      if (this.type == \"0\") {\n        return false;\n      }\n\n      ev.preventDefault();\n    },\n    // 放下事件\n    drop: function drop(ev, item) {\n      var _this8 = this;\n\n      if (this.flag == true) {\n        this.flag = false;\n        console.log(\"放下\", this.nodeList);\n\n        if (this.nodeList.tableName != null && this.nodeList.tableName != \"\") {\n          this.tableName = this.nodeList.name + \".\" + this.nodeList.tableName;\n          var index = this.indexOf(this.tableName, this.nameList);\n\n          if (index > -1) {\n            this.$message({\n              type: \"warning\",\n              message: \"已选择该表\"\n            });\n            this.flag = true;\n            return;\n          } else {\n            (0, _sqlAnalysis.getTableColumn)(this.nodeList.name, this.nodeList.tableName).then(function (data) {\n              //this.tableColumnList.push(data)\n\n              /*                this.$set(this.tableColumnList, this.tableName, data);\r\n                              this.nameList.push(this.tableName);\r\n                              this.tableAndNickname.push(\"t\" + this.nameList.length);\r\n                              this.data2Sql();*/\n              if (data.code == \"200\") {\n                _this8.nameList.push(_this8.tableName);\n\n                _this8.tableAndNickname.push(\"t\" + _this8.nameList.length);\n\n                _this8.$set(_this8.tableColumnList, _this8.tableName, data.data);\n\n                _this8.data2Sql();\n              } else {\n                _this8.$message({\n                  type: \"warning\",\n                  message: data.msg\n                });\n              }\n\n              _this8.flag = true;\n            });\n          }\n        } else {\n          this.flag = true;\n          this.$message({\n            type: \"warning\",\n            message: \"现在选择是为项目,请选择一个表\"\n          });\n        }\n\n        ev.preventDefault();\n\n        if (this.tableName == null) {\n          this.tableName = \"\";\n        }\n      } else {\n        this.$message({\n          type: \"warning\",\n          message: \"正在加载上一张表的字段信息\"\n        });\n      }\n      /*        let treeNode = ev.target;\r\n        if (treeNode) {\r\n          treeNode.appendChild(this.dom);\r\n        }*/\n\n    },\n    addRow: function addRow() {\n      this.columnList.push({\n        from: [],\n        to: []\n      });\n      this.ruleList.push({\n        where1: \"\",\n        where2: \"\",\n        where3: \"\",\n        where4: \"\"\n      });\n    },\n    deleteRow: function deleteRow(index) {\n      this.ruleList.splice(index, 1);\n      this.connList.splice(index, 1);\n      this.data2Sql();\n    },\n    //获取字段\n    selectTable: function selectTable(rowNum, nickName, whereOrTo) {\n      var index = nickName.replace(\"t\", \"\");\n      index = index - 1;\n      var tableName = this.nameList[index];\n      var backList = [];\n\n      for (var k in this.tableColumnList) {\n        if (k == tableName) {\n          for (var j = 0; j < this.tableColumnList[k].length; j++) {\n            backList.push(this.tableColumnList[k][j]);\n          }\n        }\n      }\n\n      if (whereOrTo == \"from\") {\n        this.ruleList[rowNum].where2 = \"\";\n      } else {\n        this.ruleList[rowNum].where4 = \"\";\n      }\n\n      this.$set(this.columnList[rowNum], whereOrTo, backList);\n      console.log(\"this.columnList\" + JSON.stringify(this.columnList));\n    },\n    connChange: function connChange(rowNum) {\n      var where1 = this.ruleList[rowNum].where1;\n      var where2 = this.ruleList[rowNum].where2;\n      var where3 = this.ruleList[rowNum].where3;\n      var where4 = this.ruleList[rowNum].where4;\n\n      if (where1 != \"\" && where2 != \"\" && where3 != \"\" && where4 != \"\") {\n        this.connList[rowNum] = where1 + \".\" + where2 + \"=\" + where3 + \".\" + where4;\n        this.data2Sql();\n      }\n    },\n    handleConn: function handleConn() {\n      this.connList = [];\n\n      for (var i = 0; i < this.ruleList.length; i++) {\n        this.columnList.push({\n          from: [],\n          to: []\n        });\n        var where1 = this.ruleList[i].where1;\n        var where3 = this.ruleList[i].where3;\n        var from = where1.replace(\"t\", \"\") - 1;\n        var to = where3.replace(\"t\", \"\") - 1;\n\n        for (var k in this.tableColumnList) {\n          if (k == this.nameList[from]) {\n            this.$set(this.columnList[i], \"from\", this.tableColumnList[k]);\n          }\n\n          if (k == this.nameList[to]) {\n            this.$set(this.columnList[i], \"to\", this.tableColumnList[k]);\n          }\n        }\n\n        if (this.ruleList[i].where1 != \"\" && this.ruleList[i].where2 != \"\" && this.ruleList[i].where3 != \"\" && this.ruleList[i].where4 != \"\") {\n          this.connList.push(this.ruleList[i].where1 + \".\" + this.ruleList[i].where2 + \"=\" + this.ruleList[i].where3 + \".\" + this.ruleList[i].where4);\n        }\n      }\n    },\n    //组装sql\n    data2Sql: function data2Sql() {\n      var strColumn = \"\";\n      var strFrom = \"\";\n      var strConn = \"\";\n\n      if (this.selectionList.length == 0) {\n        for (var k in this.tableAndNickname) {\n          strColumn += this.tableAndNickname[k] + \".*\";\n          strColumn += \",\";\n        }\n      }\n\n      for (var j = 0; j < this.selectionList.length; j++) {\n        var a = this.selectionList[j].substring(0, this.selectionList[j].lastIndexOf(\".\"));\n        var b = this.selectionList[j].substring(this.selectionList[j].lastIndexOf(\".\") + 1, this.selectionList[j].length);\n        var index = this.indexOf(a, this.nameList);\n        var column = \"t\" + (index + 1) + \".\" + b;\n        strColumn += column + \",\";\n      }\n\n      for (var i = 0; i < this.nameList.length; i++) {\n        strFrom += this.nameList[i] + \" t\" + (i + 1) + \",\";\n      }\n\n      for (var _k = 0; _k < this.connList.length; _k++) {\n        strConn += this.connList[_k] + \" and \";\n      }\n\n      if (strFrom == \"\") {\n        this.textarea = \"\";\n      } else {\n        this.textarea = \"select \" + strColumn.substring(0, strColumn.lastIndexOf(\",\")) + \" from \" + strFrom.substring(0, strFrom.lastIndexOf(\",\"));\n\n        if (strConn != \"\") {\n          this.textarea = this.textarea + \" where \" + strConn.substring(0, strConn.lastIndexOf(\"and\"));\n        }\n      }\n\n      this.textarea += \";\";\n    },\n    //删除被拖过来的表\n    deleteTable: function deleteTable(tableName) {\n      //右侧操作区的数组\n      this.$delete(this.tableColumnList, tableName); //中间被拖拽表的数组\n\n      var index = this.indexOf(tableName, this.nameList);\n      this.nameList.splice(index, 1);\n      this.tableAndNickname.splice(this.tableAndNickname.length - 1, 1);\n      console.log(\"表还剩：\" + this.nameList);\n      console.log(\"表别名还剩：\" + this.tableAndNickname); //选择字段的数组\n\n      for (var i = 0; i < this.selectionList.length; i++) {\n        if (!this.selectionList[i].includes(tableName)) {\n          this.newSelectionList.push(this.selectionList[i]);\n        }\n      }\n\n      var backRuleList = []; //备份\n\n      var nickName = \"t\" + (index + 1);\n\n      for (var j = 0; j < this.ruleList.length; j++) {\n        if (this.ruleList[j].where1 != nickName && this.ruleList[j].where2 != nickName && this.ruleList[j].where3 != nickName && this.ruleList[j].where4 != nickName) {\n          backRuleList.push(this.ruleList[j]);\n        }\n      }\n\n      this.ruleList = backRuleList;\n\n      if (this.ruleList.length == 0) {\n        this.ruleList.push({\n          where1: \"\",\n          where2: \"\",\n          where3: \"\",\n          where4: \"\"\n        });\n      }\n\n      for (var h = index + 1; h < this.tableAndNickname.length + 1; h++) {\n        var old = \"t\" + (h + 1);\n\n        for (var _j = 0; _j < this.ruleList.length; _j++) {\n          for (var k in this.ruleList[_j]) {\n            if (this.ruleList[_j][k] == old) {\n              this.ruleList[_j][k] = \"t\" + h;\n            }\n          }\n        }\n      }\n\n      this.handleConn();\n      this.selectionList = this.newSelectionList;\n      this.newSelectionList = [];\n      this.data2Sql();\n    },\n    //获取数组中数值的下标\n    indexOf: function indexOf(val, ids) {\n      for (var i = 0; i < ids.length; i++) {\n        //获取当前值的下标\n        if (ids[i] === val) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    //多选赋值ids\n    ids: function ids(val) {\n      //检索下标,判断当前值(或对象是否在数组中); 在则返回在的对象,不在则返回-1\n      var index = this.indexOf(val, this.selectionList);\n\n      if (this.selectionList.length > 0 && index > -1) {\n        //删除数组中的某个元素(在取消勾选时,删除数组中的值)\n        this.selectionList.splice(index, 1);\n      } else {\n        //id添加到数组中\n        this.selectionList.push(val); //⽤逗号隔开\n        // this.selectionList.join(\",\");\n      } // 发射数据给⽗组件：\n\n\n      this.$emit(\"handelSelectionList\", this.selectionList);\n      this.data2Sql();\n      console.log(\"选择的字段有:\" + this.selectionList);\n    },\n    // 分页\n    handleSizeChange: function handleSizeChange(val) {\n      this.pageSize = val;\n      this.currentPage = 1;\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    handleClick: function handleClick(tab, event) {\n      console.log(tab, event);\n    },\n    changeTab: function changeTab(activeName, oldActiveName) {\n      console.log(activeName, oldActiveName);\n\n      if (oldActiveName == \"first\") {\n        this.textarea1 = this.textarea;\n        this.textarea = this.textarea2;\n      } else {\n        this.textarea2 = this.textarea;\n        this.textarea = this.textarea1;\n      }\n\n      this.flag = true;\n      /*this.textarea = \"\";\r\n      //拖到右侧的表\r\n      this.nameList = [];\r\n      this.tableAndNickname = []; //表和他的别名\r\n      //放到右侧的节点\r\n      this.nodeList = {};\r\n      //表字段信息\r\n      this.tableColumnList = {}; //被选择字段\r\n      this.selectionList = [];\r\n      //删除表时，同时删除该表选择的字段\r\n      this.newSelectionList = [];\r\n      //ruleList\r\n      (this.ruleList = [\r\n        {\r\n          where1: \"\",\r\n          where2: \"\",\r\n          where3: \"\",\r\n          where4: \"\",\r\n        },\r\n      ]),\r\n        (this.columnList = [\r\n          {\r\n            from: [],\r\n            to: [],\r\n          },\r\n        ]);\r\n      this.connList = []; //拼接好的关联条件*/\n    },\n    textClear: function textClear() {\n      if (this.activeName == \"first\") {\n        this.textarea1 = \"\";\n        this.textarea = \"\";\n      } else {\n        this.textarea2 = \"\";\n        this.textarea = \"\";\n        this.nameList = [];\n        this.tableAndNickname = []; //表和他的别名\n        //放到右侧的节点\n\n        this.nodeList = {}; //表字段信息\n\n        this.tableColumnList = {}; //被选择字段\n\n        this.selectionList = []; //删除表时，同时删除该表选择的字段\n\n        this.newSelectionList = []; //ruleList\n\n        this.ruleList = [{\n          where1: \"\",\n          where2: \"\",\n          where3: \"\",\n          where4: \"\"\n        }], this.columnList = [{\n          from: [],\n          to: []\n        }];\n        this.connList = []; //拼接好的关联条件\n      }\n    },\n    indexOfTabs: function indexOfTabs(val, tabs) {\n      for (var i = 0; i < tabs.length; i++) {\n        //获取当前值的下标\n        if (tabs[i].name === val) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    ClickEditableTabs: function ClickEditableTabs(tab, event) {\n      var index = this.indexOfTabs(tab.name, this.tabs);\n\n      if (tab.name != \"log\") {\n        this.propList = this.tabs[index].propList;\n        this.tableList = this.tabs[index].tableList;\n        this.total = this.tableList.length;\n      }\n    },\n    removeTab: function removeTab(targetName) {\n      var tabs = this.tabs;\n      var activeName = this.editableTabs;\n\n      if (activeName === targetName) {\n        tabs.forEach(function (tab, index) {\n          if (tab.name === targetName) {\n            var nextTab = tabs[index + 1] || tabs[index - 1];\n\n            if (nextTab) {\n              activeName = nextTab.name;\n            }\n          }\n        });\n      }\n\n      this.editableTabs = activeName;\n      this.tabs = tabs.filter(function (tab) {\n        return tab.name !== targetName;\n      });\n    },\n    handleTabs: function handleTabs() {\n      if (this.tabs[1].propList.length != 0) {\n        for (var i = this.tabs.length; i > 1; i--) {\n          var index = i - 2;\n          var next = index + 1;\n          var title = \"记录\" + next;\n          var name = \"category\" + next;\n          if (next > 5) continue;\n          var newTab = {\n            title: title,\n            name: name,\n            closeable: true,\n            propList: this.tabs[next].propList,\n            tableList: this.tabs[next].tableList\n          };\n          this.tabs.splice(i, 1, newTab);\n        }\n      }\n    },\n    // el-table表头中加el-popover下拉框\n    linefeed: function linefeed(h, _ref) {\n      var column = _ref.column,\n          $index = _ref.$index;\n      var realWidth = 0;\n      var span = document.createElement(\"span\");\n      span.innerText = column.label;\n\n      if (!column.label) {\n        document.body.appendChild(span);\n        realWidth = 100;\n        column.minWidth = realWidth; // 可能还有边距/边框等值，需要根据实际情况加上\n\n        document.body.removeChild(span);\n        return h(\"span\", column.label);\n      } else {\n        document.body.appendChild(span);\n        realWidth = span.getBoundingClientRect().width + 30;\n        column.minWidth = realWidth; // 可能还有边距/边框等值，需要根据实际情况加上\n\n        document.body.removeChild(span);\n        return h(\"span\", column.label);\n      }\n    }\n  }\n};\nexports.default = _default;",null]}