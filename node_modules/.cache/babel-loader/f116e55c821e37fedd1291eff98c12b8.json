{"remainingRequest":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\thread-loader\\dist\\cjs.js!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\category\\category.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\category\\category.vue","mtime":1624954643000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/workspace-suzhouzhibiao/Indicator/Pncui-Indicator/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _indCategory = _interopRequireDefault(require(\"../../../api/indicators/indCategory\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'IndCategory',\n  // components: { pagination, crudOperation, rrOperation, udOperation },\n  props: {\n    type: {\n      type: String,\n      default: '1'\n    },\n    parentId: {\n      type: String,\n      default: '0'\n    }\n  },\n  // mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  data: function data() {\n    return {\n      filterText: '',\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      treeData: [{\n        id: '0',\n        categoryType: this.type,\n        categoryName: '全部类别',\n        children: []\n      }],\n      permission: {\n        add: ['admin', 'indCategory:add'],\n        edit: ['admin', 'indCategory:edit'],\n        del: ['admin', 'indCategory:del']\n      },\n      rules: {\n        id: [{\n          required: true,\n          message: '分类ID不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  mounted: function mounted() {\n    // console.log('=====category---mounted....')\n    this.init();\n  },\n  methods: {\n    // 获取数据前设置好接口地址\n\n    /*  [CRUD.HOOK.beforeRefresh]() {\n        return true\n    },*/\n    filterNode: function filterNode(value, treeData) {\n      if (!value) return true;\n      return treeData.categoryName.indexOf(value) !== -1;\n    },\n    // 点击事件\n    handleNodeClick: function handleNodeClick(data) {\n      this.$emit('node-click', data);\n    },\n    handleAdd: function handleAdd(data) {\n      var _this = this;\n\n      var $this = this;\n      this.$prompt('输入节点名称', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消' // inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n        // inputErrorMessage: '邮箱格式不正确'\n\n      }).then(function (_ref) {\n        var value = _ref.value;\n\n        _indCategory.default.crud.add({\n          categoryName: value,\n          categoryType: data.categoryType,\n          parentId: data.id\n        }).then(function (res) {\n          $this.$message({\n            type: 'success',\n            message: '添加成功 '\n          });\n          $this.init(); // this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n        }).catch(function () {\n          $this.$message({\n            type: 'error',\n            message: '添加失败 '\n          });\n        });\n      }).catch(function () {\n        _this.$message({\n          type: 'info',\n          message: '添加失败'\n        });\n      });\n    },\n    handleEdit: function handleEdit(data) {\n      var _this2 = this;\n\n      var $this = this;\n      this.$prompt('输入节点名称', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputValue: data.categoryName // inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n        // inputErrorMessage: '邮箱格式不正确'\n\n      }).then(function (_ref2) {\n        var value = _ref2.value;\n\n        _indCategory.default.crud.edit({\n          categoryName: value,\n          id: data.id\n        }).then(function (res) {\n          $this.$message({\n            type: 'success',\n            message: '修改成功 '\n          });\n          $this.init();\n        }).catch(function () {\n          $this.$message({\n            type: 'error',\n            message: '修改失败 '\n          });\n        });\n      }).catch(function () {\n        _this2.$message({\n          type: 'info',\n          message: '修改失败'\n        });\n      });\n    },\n    handleRemove: function handleRemove(node, data) {\n      var $this = this;\n      this.$confirm('确定要删除该节点及其所有子节点吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _indCategory.default.crud.del([data.id]).then(function (res) {\n          if (res.code !== 0) {\n            $this.$message({\n              type: 'error',\n              message: '删除失败,' + res.msg\n            });\n          } else {\n            $this.$message({\n              type: 'success',\n              message: '删除成功 '\n            });\n          }\n\n          $this.init(); // this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n        }).catch(function () {\n          $this.$message({\n            type: 'error',\n            message: '删除失败 '\n          });\n        });\n      }).catch(function () {});\n    },\n    init: function init() {\n      var _this3 = this;\n\n      _indCategory.default.tree(this.type, this.parentId).then(function (res) {\n        // console.log('======crudIndCategory.init======', res)\n        _this3.treeData[0].children = res.data; // this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n      }).catch(function () {});\n    }\n  }\n};\nexports.default = _default;",null]}