{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\views\\dashboard\\indicatorboard\\BadnessLoan.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\views\\dashboard\\indicatorboard\\BadnessLoan.vue","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport echarts from 'echarts'\nimport { mapGetters } from 'vuex'\nimport { badnessLoan } from '../../../api/dashboard/dashboard.js'\nimport { getYesterday } from '@eladmin/utils/data_format'\n\nexport default {\n  name: 'BadnessLoan',\n  props: {\n    className: {\n      type: String,\n      default: 'box-card'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '100%'\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    date: {\n      type: String,\n      default: getYesterday()\n    }\n  },\n  data() {\n    return {\n      chart: null,\n      sidebarElm: null,\n      chartData: []\n    }\n  },\n  mounted() {\n    badnessLoan(this.date).then(res => {\n        this.chartData = res.data\n        this.initChart()\n      }\n    )\n    window.addEventListener('resize', this.onResize)\n  },\n  computed: {\n    ...\n      mapGetters([\n        'sidebar'\n      ])\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    setOptions(data) {\n      this.chart.setOption({\n        xAxis: {\n          data: data.map(e => e.dataDate),\n          boundaryGap: true,\n          axisTick: {\n            show: false\n          },\n          color: '#6E6E6E',\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: { // 改变刻度字体样式\n              color: '#6E6E6E'\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#6E6E6E',\n              width: 2// 这里是为了突出显示加上的\n            }\n          }\n        },\n        grid: {\n          left: 20,\n          right: 20,\n          bottom: 20,\n          top: 30,\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross'\n          },\n          padding: [5, 10]\n        },\n        yAxis: [{\n          type: 'value',\n          splitNumber: 5,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              // 使用深浅的间隔色\n              color: ['#eee']\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: { // 改变刻度字体样式\n              color: '#6E6E6E'\n            }\n          },\n          axisLine: {\n            show: false\n          }\n        }, {\n          type: 'value',\n          splitNumber: 5,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              // 使用深浅的间隔色\n              color: ['#eee']\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            formatter: '{value}%',\n            textStyle: { // 改变刻度字体样式\n              color: '#6E6E6E'\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          interval: 0.5\n        }],\n        legend: {\n          data: ['不良贷款率', '不良贷款余额']\n        },\n        series: [{\n          name: '不良贷款余额',\n          itemStyle: {\n            normal: {\n              color: '#F09937',\n              lineStyle: {\n                color: '#F09937'\n                // width: 2\n              }\n            }\n          },\n          type: 'bar',\n          barWidth: '30%',\n          // barGap: '10%',\n          data: data.map(e => e.loan),\n          animationDuration: 2800,\n          animationEasing: 'cubicInOut'\n        },\n          {\n            name: '不良贷款率',\n            smooth: false,\n            type: 'line',\n            yAxisIndex: 1,\n            itemStyle: {\n              normal: {\n                color: '#489FF8',\n                lineStyle: {\n                  color: '#489FF8',\n                  width: 2\n                }\n              }\n            },\n            data: data.map(e => e.rate),\n            animationDuration: 2800,\n            animationEasing: 'quadraticOut'\n          }]\n      })\n    },\n    onResize() {\n      if (this.chart) {\n        this.chart.resize()\n      }\n    },\n    initChart() {\n      console.log('开始绘制图表...')\n      this.chart = echarts.init(document.querySelector('#card-main-badness-loan'))\n      console.log('初始化echart》', this.chart)\n      this.setOptions(this.chartData)\n    }\n  },\n  watch: {\n    sidebar: {\n      deep: true,\n      immediate: true,\n      handler:\n        function(newValue, oldValue) {\n          //console.log('=====watch>>', oldValue, newValue)\n          this.onResize()\n          // result为true，则表示是全部选中\n        }\n    }\n  }\n}\n",null]}