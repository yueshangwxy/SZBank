{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\dimension\\DimValTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\dimension\\DimValTreeSelect.vue","mtime":1642380314282},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"dim-val-el-tree-select\",\r\n  props:{\r\n    /* 配置项 */\r\n    props:{\r\n      type: Object,\r\n      default:()=>{\r\n        return {\r\n          id:'id',             // ID字段名\r\n          categoryName: 'title',         // 显示名称\r\n          children: 'children'    // 子级字段名\r\n        }\r\n      }\r\n    },\r\n    /* 选项列表数据(树形结构的对象数组) */\r\n    options:{\r\n      type: Array,\r\n      default: ()=>{ return [] }\r\n    },\r\n    /* 初始值 */\r\n    value:{\r\n      type: [String,Array],\r\n      default: ()=>{ return null }\r\n    },\r\n    /* 可清空选项 */\r\n    clearable:{\r\n      type:Boolean,\r\n      default:()=>{ return true }\r\n    },\r\n    multiple:{\r\n      type:Boolean,\r\n      default:()=>{ return false }\r\n    },\r\n    /* 自动收起 */\r\n    accordion:{\r\n      type:Boolean,\r\n      default:()=>{ return false }\r\n    },\r\n    placeholder:{\r\n      type:String,\r\n      default:()=>{return \"检索关键字\"}\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      filterText: '',\r\n      valueId:this.id,    // 初始值\r\n      valueTitle:null,\r\n      defaultExpandedKey:[]\r\n    }\r\n  },\r\n  mounted(){\r\n    this.initHandle()\r\n  },\r\n  methods: {\r\n    // 初始化值\r\n    initHandle(){\r\n      if(this.valueId){\r\n        if(this.multiple){\r\n          this.$refs.selectTree.setCheckedKeys(this.valueId.split(\",\"))// 设置默认选中\r\n          this.valueTitle = this.$refs.selectTree.getCheckedNodes().map(e=>e[this.props.categoryName]).join(\",\")//a[this.props.label]\r\n        }else{\r\n          this.$refs.selectTree.setCurrentKey(this.valueId)       // 设置默认选中\r\n          this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.categoryName]// 初始化显示\r\n        }\r\n        this.defaultExpandedKey = [this.valueId]      // 设置默认展开\r\n      }\r\n      this.initScroll()\r\n    },\r\n    // 初始化滚动条\r\n    initScroll(){\r\n      this.$nextTick(()=>{\r\n        let scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0]\r\n        let scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar')\r\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;'\r\n        scrollBar.forEach(ele => ele.style.width = 0)\r\n      })\r\n    },\r\n    // 切换选项\r\n    handleNodeClick(node){\r\n      if(this.multiple){\r\n        return\r\n      }\r\n      console.debug('=====handleNodeClick=======',node)\r\n      this.valueTitle = node[this.props.categoryName]\r\n      this.valueId = node[this.props.id]\r\n      this.$emit('getValue',this.valueId)\r\n      this.defaultExpandedKey = []\r\n    },\r\n    // 切换选项\r\n    handleCheck(data,node){\r\n      console.debug('======handleCheck======',data,node)\r\n      this.valueId=node.checkedKeys.join(\",\")\r\n      this.valueTitle = node.checkedNodes.map(e=>e[this.props.categoryName]).join(\",\")\r\n      this.$emit('getValue',this.valueId)\r\n      this.defaultExpandedKey = []\r\n    },\r\n    // 清除选中\r\n    clearHandle(){\r\n      this.valueTitle = ''\r\n      this.valueId = null\r\n      this.defaultExpandedKey = []\r\n      this.clearSelected()\r\n      this.$emit('getValue',null)\r\n    },\r\n    /* 清空选中样式 */\r\n    clearSelected(){\r\n      let allNode = document.querySelectorAll('#tree-option .el-tree-node')\r\n      allNode.forEach((element)=>element.classList.remove('is-current'))\r\n    },\r\n    filterNode(value, data) {\r\n      if (!value) return true;\r\n      return data.name.indexOf(value) !== -1;\r\n    }\r\n  },\r\n  watch: {\r\n    value(){\r\n      this.valueId = this.id\r\n      this.initHandle()\r\n    },\r\n    filterText(val) {\r\n      this.$refs.selectTree.filter(val);\r\n    }\r\n  },\r\n};\r\n",null]}