{"remainingRequest":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\arithmetic\\arithmeticPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\arithmetic\\arithmeticPage.vue","mtime":1644369310592},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudIndIndicatorInfo, { saveArithmetic, checkexpression, updateStatuesByIeCode } from '../../../../api/indicators/indIndicatorInfo'\nimport { sqlCheck } from '@datasource/api/datasources/indDatasource'\nimport category from '../../category/categoryInfo'\nimport aForm from './taste/tastePage'\nimport { getDimListById } from '../../../../api/indicators/indDimension'\n\nexport default {\n  components: {\n    category,\n    aForm\n  },\n  data() {\n    return {\n      loading: false,\n      arithmeticDialog: false,\n      title: '',\n      ieCode: '',\n      arithtext: ''\n    }\n  },\n  mounted() {\n  },\n  methods: {\n    /* 四则运算的method----start */\n    // 点击指标触发\n    handleCategoryClick(data) {\n      if (data.categoryType === '88') {\n        // 获取指标名称,添加[]后调用insertText方法\n        const categoryName = '[' + data.categoryName + ']'\n        this.insertText(document.getElementById('arith'), categoryName)\n\n        // 调用子组件方法刷新左侧树状列表\n        // this.$refs.category.refresh();\n      }\n    },\n    // 点击运算符号触发\n    handleSymbolClick(param) {\n      this.insertText(document.getElementById('arith'), param)\n    },\n    // textarea中在鼠标位置插入内容。obj为textarea对象,charvalue为插入内容\n    insertText(obj, charvalue) {\n      obj.focus()\n      var leng = obj.value.length\n      if (typeof document.selection !== 'undefined') // ie\n      {\n        var r = document.selection.createRange()\n        r.text = charvalue\n      } else // firefox\n      {\n        var ops = obj.value.substr(0, obj.selectionStart) + charvalue\n        obj.value = ops + obj.value.substring(obj.selectionStart, leng)\n        obj.setSelectionRange(ops.length, ops.length)\n      }\n    },\n    // 试算\n    taste() {\n      // 校验表达式\n      const param = {\n        'calcRule': document.getElementById('arith').value\n      }\n      checkexpression(param).then(retuData => {\n        if (retuData.code === 0) {\n          let modules = []\n          modules = retuData.data // 分割后的指标名称\n\n          // 打开指标试算页面\n          const _this = this.$refs.tastePage\n          _this.formula = document.getElementById('arith').value\n          _this.modules = modules\n          _this.title = '试算'\n          _this.resultData = []\n          _this.dialog = true\n        } else {\n          this.$message.error({\n            message: retuData.msg\n          })\n        }\n      })\n    },\n\n    // 取消按钮\n    cancel() {\n      this.arithmeticDialog = false\n    },\n    // 重置\n    reset() {\n      this.arithtext = ''\n    },\n    // 保存\n    saveAri() {\n      // 校验表达式是否正确\n      const param = {\n        'calcRule': document.getElementById('arith').value\n      }\n      checkexpression(param).then(retuData => {\n        if (retuData.code === 0) {\n          const data = {\n            'ieCode': this.ieCode,\n            'ruleType': '1',\n            'ruleDesc': document.getElementById('arith').value\n          }\n          saveArithmetic(data).then(data => {\n            if (data.code === 0) {\n              this.$message.success({\n                message: '保存成功!'\n              })\n              this.cancel()\n              this.$emit('func', 'hi')\n            } else {\n              this.$message.error({\n                message: data.msg\n              })\n            }\n          })\n        } else {\n          this.$message.error({\n            message: retuData.msg\n          })\n        }\n      })\n    },\n    // 上线\n    upLine() {\n      // 校验表达式是否正确\n      const param = {\n        'calcRule': document.getElementById('arith').value\n      }\n      checkexpression(param).then(retuData => {\n        if (retuData.code === 0) {\n          const data = {\n            'ieCode': this.ieCode,\n            'ruleType': '1',\n            'ruleDesc': document.getElementById('arith').value\n          }\n          saveArithmetic(data).then(data => {\n            if (data.code === 0) {\n              const indIndicatorInfo = {\n                'ieCode': this.ieCode,\n                'status': 4\n              }\n              updateStatuesByIeCode(indIndicatorInfo).then(data => {\n                if (data.code === 0) {\n                  this.$message.success({\n                    message: '操作成功!'\n                  })\n                  this.cancel()\n                  this.$emit('func', 'hi')\n                } else {\n                  this.$message.error({\n                    message: data.msg\n                  })\n                }\n              })\n            } else {\n              this.$message.error({\n                message: data.msg\n              })\n            }\n          })\n        } else {\n          this.$message.error({\n            message: retuData.msg\n          })\n        }\n      })\n    }\n    /* 四则运算的method----end */\n  }\n}\n",null]}