{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\views\\indicators\\indicator\\base\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\views\\indicators\\indicator\\base\\index.vue","mtime":1647917138764},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport crudIndIndicatorInfo, {\r\n  add,\r\n  checkDept,\r\n  getAllSource,\r\n  getAtom,\r\n  getAtomDimenston,\r\n  updateStatus,\r\n  getBaseIndicatorByIeCode,\r\n  getAllAtomInfos,\r\n  process,\r\n  getIndBaseRule\r\n} from '../../../../api/indicators/indIndicatorInfo'\r\nimport CRUD, {presenter, header, form, crud} from '@crud/crud'\r\nimport rrOperation from '@crud/RR.operation'\r\nimport crudOperation from '@crud/ICRUD.operation'\r\nimport udOperation from '@crud/UD.operation'\r\nimport pagination from '@crud/Pagination'\r\nimport category from '../../category/category'\r\nimport dimensionPage from './dimensionPage'\r\nimport limitRulePage from './limitRulePage'\r\nimport lookDetails from '../details/lookBaseDetails'\r\nimport baseDevelop from './baseDevelop'\r\nimport {getDepts} from '@system/api/system/dept'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\n//import checkPermission from '@eladmin/utils/permission'\r\nimport toStartDetails from '../details/toStartBaseDetails'\r\nimport ieCodeHistory from '../details/ieCodeHistory'\r\nimport {mapGetters} from 'vuex'\r\n// crud交由presenter持有\r\nconst defaultCrud = CRUD({\r\n  title: '指标信息',\r\n  url: crudIndIndicatorInfo.url,\r\n  sort: 'id,desc',\r\n  optShow: {del: false},\r\n  crudMethod: {...crudIndIndicatorInfo.method}\r\n})\r\nconst defaultForm = {\r\n  id: null,\r\n  ieCode: null,\r\n  ieName: null,\r\n  categoryId: null,\r\n  ieProp: null,\r\n  ieType: '1',\r\n  ieDesc: null,\r\n  ieRule: null,\r\n  dimNames: null,\r\n  ieDefaultValue: null,\r\n  ieMethod: null,\r\n  calcFreq: null,\r\n  status: '0',\r\n  ieDataUnit: '',\r\n  formulateBasis: '',\r\n  startDate: new Date(),\r\n  endDate: null,\r\n  retention: '1,Y',\r\n  processInstanceId: null,\r\n  manageDept: null,\r\n  crtUserCode: null,\r\n  crtOrgCode: null,\r\n  crtDate: null,\r\n  updUserCode: null,\r\n  updOrgCode: null,\r\n  updDate: null,\r\n  viewDepts: [],\r\n  viewDept: null,\r\n  indBaseRule: {\r\n    calcRule: null, // 加工规则\r\n    dataSource: null, // 数据源\r\n    expression: 'sum', // 取数表达式\r\n    dataTable: null, // 取数表名-即原子指标中的存储表名\r\n    measureColumn: null, // 度量\r\n    bizCode: null // 原子指标\r\n  },\r\n\r\n  indDimRelations: [], // 指标维度关系\r\n  indBaseRuleFilters: [], // 指标附加规则\r\n\r\n  dimVals: null, // 维度选择页面传来的显示维度\r\n  limitRule: null // 限制规则\r\n\r\n}\r\nexport default {\r\n  name: 'BaseIndicatorInfo',\r\n  components: {\r\n    pagination,\r\n    crudOperation,\r\n    rrOperation,\r\n    udOperation,\r\n    category,\r\n    dimensionPage,\r\n    limitRulePage,\r\n    lookDetails,\r\n    baseDevelop,\r\n    Treeselect,\r\n    toStartDetails,\r\n    ieCodeHistory\r\n  },\r\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\r\n  dicts: ['IE_PROP', 'IE_SCOPE', 'IE_TYPE', 'IE_METHOD', 'CALC_FREQ', 'IE_STATUS', 'IE_DATA_UNIT', 'RETENTION', 'EXPRESSION'],\r\n  data() {\r\n    return {\r\n      manageDeptEdited: false,\r\n      table: {\r\n        columns: {\r\n          id: 'hidden',\r\n          crtOrgCode: 'hidden',\r\n          updOrgCode: 'hidden',\r\n          calcFreq: 'hidden',\r\n          retention: 'hidden'\r\n        }\r\n      },\r\n      permission: {\r\n        add: ['admin', 'baseIndIndicatorInfo:add'],\r\n        submit: ['admin', 'baseIndIndicatorInfo:submit'],\r\n        develop: ['admin', 'baseIndIndicatorInfo:develop'],\r\n        upLine: ['admin', 'baseIndIndicatorInfo:upLine'],\r\n        startUsing: ['admin', 'baseIndIndicatorInfo:startUsing'],\r\n        stopUsing: ['admin', 'baseIndIndicatorInfo:stopUsing'],\r\n        processA: ['admin', 'baseIndIndicatorInfo:processA'],\r\n        edit: ['admin', 'baseIndIndicatorInfo:edit'],\r\n        del: ['admin', 'baseIndIndicatorInfo:del'],\r\n        details: ['admin', 'baseIndIndicatorInfo:details'],\r\n        stopUsing1: []\r\n      },\r\n      rules: {\r\n        ieName: [\r\n          {required: true, message: '指标名称不能为空', trigger: 'blur'}\r\n        ],\r\n        ieProp: [\r\n          {required: true, message: '指标类别不能为空', trigger: 'change'}\r\n        ],\r\n        viewDepts: [\r\n          {required: true, message: '查看部门不能为空', trigger: 'change'}\r\n        ],\r\n        manageDept: [\r\n          {required: true, message: '管理部门不能为空', trigger: 'change'}\r\n        ],\r\n        formulateBasis: [\r\n          {required: true, message: '指标类型不能为空', trigger: 'change'}\r\n        ],\r\n        ieDataUnit: [\r\n          {required: true, message: '指标单位不能为空', trigger: 'change'}\r\n        ],\r\n        ieDesc: [\r\n          {required: true, message: '指标描述不能为空', trigger: 'change'}\r\n        ],\r\n        'indBaseRule.bizCode': [{required: true, message: '原子指标不能为空', trigger: 'blur'}],\r\n        'indBaseRule.measureColumn': [{required: true, message: '原子指标不能为空', trigger: 'blur'}]\r\n      },\r\n      sourceData: [], // 数据源信息\r\n      atom: [], // 原子指标\r\n      measureInfo: [], // 度量信息\r\n      dimInfo: [], // 原子指标维度信息\r\n      processDialog: false, // 计算输日期的页面\r\n      processParam: { // 传给后台的参数\r\n        codes: [],\r\n        periodDate: ''\r\n      },\r\n      dateValue: '', // 计算日期\r\n\r\n      depts: [], // 部门数组\r\n      viewDept: [], // 查看部门数组\r\n      tea: '',\r\n      ieCodeHis: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'user'\r\n    ])\r\n  },\r\n  created() {\r\n    this.$nextTick(() => {\r\n    })\r\n  },\r\n  mounted() {\r\n    this.crud.resetQuery()\r\n    getDepts({enabled: true, pid: '0'}).then(res => {\r\n      let dep = [];\r\n      res.content.forEach(function (item) {\r\n        /*if (item.id != '89999053' && item.id != '89999024' && item.id != '00000203'\r\n            && item.id != '89999052' && item.id != '00000201' && item.id != '89999001'\r\n            && item.id != '89999048' && item.id != '89999020' && item.id != '89999015' && item.id != '89999047') {*/\r\n        dep.push(item)\r\n        //}\r\n      });\r\n      this.depts = dep\r\n      // console.log(this.depts)\r\n    })\r\n  },\r\n  methods: {\r\n    //checkPermission,\r\n    // 选择指标级别后关联管理部门\r\n    changeIeScope(data) {\r\n      if (data == 1) {\r\n        this.manageDeptEdited = true\r\n        /* getInfo().then(res => {\r\n           this.form.manageDept = res.deptId\r\n         })*/\r\n        this.form.manageDept = this.user.deptId\r\n        console.log('------------>>>>>---->>>', this.user.deptId)\r\n      } else {\r\n        this.form.manageDept = null\r\n        this.manageDeptEdited = false\r\n      }\r\n    },\r\n    // 获取数据前设置好接口地址\r\n    [CRUD.HOOK.beforeRefresh]() {\r\n      this.query.ieType = '1'\r\n      this.query.queryType = '1'\r\n      return true\r\n    },\r\n    handleCategoryClick(data) {\r\n      this.crud.form.categoryId = data.id\r\n      // console.log(data)\r\n      this.crud.query.categoryIds = data.childrenIds // data.childrenIds\r\n      this.form.categoryId = data.id\r\n      this.crud.refresh()\r\n    },\r\n    // 新增之前\r\n    [CRUD.HOOK.beforeToAdd]() {\r\n      console.log('类别', this.form.categoryId)\r\n      if (!this.form.categoryId) {\r\n        this.crud.notify('请选择类别', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      if (this.form.categoryId === '0') {\r\n        this.crud.notify('根节点不能添加', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      // 获取数据源\r\n      /* getAllSource().then(data => {\r\n        this.sourceData = data.data\r\n      })*/\r\n      // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\r\n      /* const param = {\r\n        sourceDataSource: ''\r\n      }\r\n      getAtom(param).then(data => {\r\n        this.atom = data.data\r\n      })*/\r\n      getAllAtomInfos().then(data => {\r\n        this.atom = data.data\r\n      })\r\n      // 获取部门信息\r\n      this.getDepts()\r\n    },\r\n    /*[CRUD.HOOK.afterSubmit](data1,data2) {\r\n      console.log(data2.data)\r\n      let temp = 0\r\n      const param = []\r\n      const data = []\r\n      data.push(data2.data)\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择0-未审批\r\n        if (data[i].status != 0) {\r\n          temp = -1\r\n          break\r\n        }\r\n        const indIndicatorInfo = {\r\n          'id': data[i].id,\r\n          'status': '1',\r\n          'ieProp': data[i].ieProp\r\n        }\r\n        param.push(indIndicatorInfo)\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择已创建的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n\r\n      this.$confirm(`确定要提交所选数据吗?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        updateStatus(param).then(returnData => {\r\n          if (returnData.code === 0) {\r\n            this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n            this.crud.toQuery()\r\n          } else {\r\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n            this.crud.toQuery()\r\n          }\r\n        })\r\n      })\r\n    },*/\r\n    // 删除之前\r\n    [CRUD.HOOK.beforeDelete]() {\r\n      for (let items of this.crud.selections) {\r\n        if (items.status != 0) {\r\n          this.crud.notify('该状态的指标不允许删除', CRUD.NOTIFICATION_TYPE.ERROR)\r\n          return false\r\n        }\r\n      }\r\n      getAllAtomInfos().then(data => {\r\n        this.atom = data.data\r\n      })\r\n      // 获取部门信息\r\n      this.getDepts()\r\n\r\n    },\r\n    // 数据源发生变化时查询对应的原子指标\r\n    /* dataSourceChangeHandle(val) {\r\n      //获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\r\n      const param = {\r\n        sourceDataSource: val\r\n      }\r\n      getAtom(param).then(data => {\r\n        this.atom = data.data\r\n      })\r\n    },*/\r\n    // 原子指标修改后触发事件\r\n    atomChangeHandle(val) {\r\n      this.atom.some((item) => {\r\n        if (item.bizCode == val) {\r\n          // 1.自动注入取数表名\r\n          this.form.indBaseRule.dataTable = item.bizTabCode\r\n          // 2.根据原子指标编号查询原子指标维度信息表;生成维度信息\r\n          const dimParam = {\r\n            bizCode: item.bizCode,\r\n            dimType: 'D'\r\n          }\r\n          getAtomDimenston(dimParam).then(data => {\r\n            this.dimInfo = data.data\r\n          })\r\n          // 3.根据原子指标编号查询原子指标维度信息表;生成度量信息\r\n          const meaParam = {\r\n            bizCode: item.bizCode,\r\n            dimType: 'M'\r\n          }\r\n          getAtomDimenston(meaParam).then(data => {\r\n            this.measureInfo = data.data\r\n          })\r\n          // 清空\r\n          this.form.indBaseRule.measureColumn = null\r\n          this.form.dimVals = null\r\n          this.form.limitRule = null\r\n        }\r\n      })\r\n    },\r\n    // 统计维度点击选择时触发\r\n    dimClickHandle() {\r\n      // 将维度信息传递过去并将结果返回\r\n      const _this = this.$refs.dimensionPage\r\n      _this.title = '统计维度'\r\n      _this.dimInfo = this.dimInfo\r\n      _this.indDimRelations = this.form.indDimRelations// 默认选中的值\r\n      _this.selectRow()// 做默认选中的处理\r\n      _this.dimensionDialog = true\r\n    },\r\n    // 接收统计维度子组件传来的信息\r\n    getDimensionPage(data1, data2) {\r\n      this.form.dimVals = data1\r\n      this.form.indDimRelations = data2\r\n    },\r\n    // 限制规则点击选择时触发\r\n    limitRuleClickHandle() {\r\n      // 将维度信息传递过去选择后将结果返回\r\n      const _this = this.$refs.limitRulePage\r\n      _this.title = '限制规则'\r\n      _this.dimInfo = this.dimInfo\r\n      _this.tableData = []\r\n      _this.tableName = this.form.indBaseRule.dataTable// 表名,查询值列表的参数\r\n      _this.indBaseRuleFilters = this.form.indBaseRuleFilters// 默认选中的值\r\n      _this.selectRow()// 做默认选中的处理\r\n      _this.limitRuleDialog = true\r\n    },\r\n    // 接收限制规则子组件传来的信息\r\n    getLimitPage(data1, data2) {\r\n      this.form.limitRule = data1\r\n      this.form.indBaseRuleFilters = data2\r\n    },\r\n\r\n    // 修改之前触发的事件\r\n    [CRUD.HOOK.beforeToEdit]() {\r\n      if (this.form.status != 0 && this.form.status != 2) {\r\n        this.crud.notify('只有未提交或退回的数据才能修改能修改', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        this.crud.resetForm()\r\n        return false\r\n      }\r\n      // 获取部门信息\r\n      this.getDepts()\r\n      // 通过指标编号查询基础指标规则+维度+附加规则\r\n      /* const param = {\r\n        'ieCode': this.form.ieCode\r\n      }\r\n      getBaseIndicatorByIeCode(this.form.ieCode).then(returnData => {\r\n        if (returnData.code === 0) {\r\n          this.form.indBaseRule = returnData.data.indBaseRule\r\n          this.form.indDimRelations = returnData.data.indDimRelations\r\n          this.form.indBaseRuleFilters = returnData.data.indBaseRuleFilters\r\n          this.form.dimVals = returnData.data.dimVals\r\n          this.form.limitRule = returnData.data.limitRule\r\n          // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\r\n          /!* const param1 = {\r\n            sourceDataSource: ''\r\n          }\r\n          getAtom(param1).then(data => {\r\n            this.atom = data.data\r\n          })*!/\r\n          // 获取原子指标\r\n          getAllAtomInfos().then(data => {\r\n            this.atom = data.data\r\n          })\r\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\r\n          const dimParam = {\r\n            bizCode: this.form.indBaseRule.bizCode,\r\n            dimType: 'D'\r\n          }\r\n          getAtomDimenston(dimParam).then(data => {\r\n            this.dimInfo = data.data\r\n          })\r\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\r\n          const meaParam = {\r\n            bizCode: this.form.indBaseRule.bizCode,\r\n            dimType: 'M'\r\n          }\r\n          getAtomDimenston(meaParam).then(data => {\r\n            this.measureInfo = data.data\r\n          })\r\n        }\r\n      })*/\r\n    },\r\n\r\n    /* 点击提交审批触发事件 */\r\n    subApprove(data) {\r\n      let temp = 0\r\n      const param = []\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择0-未审批\r\n        if (data[i].status != 0) {\r\n          temp = -1\r\n          break\r\n        }\r\n        const indIndicatorInfo = {\r\n          'id': data[i].id,\r\n          'status': '1',\r\n          'ieProp': data[i].ieProp\r\n        }\r\n        param.push(indIndicatorInfo)\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择已创建的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n\r\n      this.$confirm(`确定要提交所选数据吗?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n        this.crud.toQuery()\r\n        /*updateStatus(param).then(returnData => {\r\n          if (returnData.code === 0) {\r\n            this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n            this.crud.toQuery()\r\n          } else {\r\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n            this.crud.toQuery()\r\n          }\r\n        })*/\r\n      })\r\n    },\r\n    /** 基础指标开发按钮 */\r\n    baseDevelop(data) {\r\n      // 状态校验-只能选择0-未审批或3-已退回的数据\r\n      if (data.status != 2) {\r\n        this.crud.notify('请选择已审批的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      const _this = this.$refs.baseDevelop\r\n      _this.title = '基础指标开发[' + data.ieCode + ']'\r\n      _this.form.ieCode = data.ieCode\r\n\r\n      // 通过指标编号查询基础指标规则+维度+附加规则\r\n      const param = {\r\n        'ieCode': data.ieCode\r\n      }\r\n      getBaseIndicatorByIeCode(data.ieCode).then(returnData => {\r\n        if (returnData.code === 0) {\r\n          _this.form.indBaseRule = returnData.data.indBaseRule\r\n          _this.form.indDimRelations = returnData.data.indDimRelations\r\n          _this.form.indBaseRuleFilters = returnData.data.indBaseRuleFilters\r\n          _this.form.dimVals = returnData.data.dimVals\r\n          _this.form.limitRule = returnData.data.limitRule\r\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\r\n          const dimParam = {\r\n            bizCode: _this.form.indBaseRule.bizCode,\r\n            dimType: 'D'\r\n          }\r\n          getAtomDimenston(dimParam).then(data => {\r\n            _this.dimInfo = data.data\r\n          })\r\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\r\n          const meaParam = {\r\n            bizCode: _this.form.indBaseRule.bizCode,\r\n            dimType: 'M'\r\n          }\r\n          getAtomDimenston(meaParam).then(data => {\r\n            _this.measureInfo = data.data\r\n          })\r\n        } else {\r\n          _this.form.indBaseRule = {\r\n            calcRule: null, // 加工规则\r\n            dataSource: null, // 数据源\r\n            expression: 'sum', // 取数表达式\r\n            dataTable: null, // 取数表名-即原子指标中的存储表名\r\n            measureColumn: null, // 度量\r\n            bizCode: null // 原子指标\r\n          }\r\n          _this.form.indDimRelations = []\r\n          _this.form.indBaseRuleFilters = []\r\n          _this.form.dimVals = null\r\n          _this.form.limitRule = null\r\n          _this.dimInfo = []\r\n          _this.measureInfo = []\r\n        }\r\n      })\r\n      // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\r\n      /* const param1 = {\r\n        sourceDataSource: ''\r\n      }\r\n      getAtom(param1).then(data => {\r\n        this.atom = data.data\r\n      })*/\r\n      // 获取原子指标\r\n      getAllAtomInfos().then(data => {\r\n        _this.atom = data.data\r\n      })\r\n      _this.baseDevelopDialog = true\r\n    },\r\n    // 子组件调用刷新方法\r\n    refQuery(data) {\r\n      this.crud.toQuery()\r\n    },\r\n    /* 点击上线按钮触发事件 */\r\n    upLine(data) {\r\n      let temp = 0\r\n      const param = []\r\n      const ieCodes = []\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择0-已审批\r\n        if (data[i].status != 2) {\r\n          temp = -1\r\n          break\r\n        }\r\n        const indIndicatorInfo = {\r\n          'id': data[i].id,\r\n          'status': '4'\r\n        }\r\n        param.push(indIndicatorInfo)\r\n        ieCodes.push(data[i].ieCode)\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择已审批的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      // 开发校验通过后执行审批\r\n      getIndBaseRule(ieCodes).then(returnData => {\r\n        if (returnData.code !== 0) {\r\n          this.crud.notify(returnData.msg + '指标未进行开发', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        } else {\r\n          this.$confirm(`确定上线所选数据吗?`, '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }).then(() => {\r\n            // 开发校验通过后,修改状态\r\n            updateStatus(param).then(returnData => {\r\n              if (returnData.code === 0) {\r\n                this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n                this.crud.toQuery()\r\n              } else {\r\n                this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n                this.crud.toQuery()\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 启用按钮\r\n    startUsing(data) {\r\n      let temp = 0\r\n      const param = []\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择4-已上线，不能啟用6-停用的数据\r\n        if (data[i].status != 4) {\r\n          temp = -1\r\n          break\r\n        }\r\n        const indIndicatorInfo = {\r\n          'id': data[i].id,\r\n          'status': '5'\r\n        }\r\n        param.push(indIndicatorInfo)\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择已上线的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      this.$confirm(`确定启用所选数据吗?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        updateStatus(param).then(returnData => {\r\n          if (returnData.code === 0) {\r\n            this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n            this.crud.toQuery()\r\n          } else {\r\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n            this.crud.toQuery()\r\n          }\r\n        })\r\n      })\r\n    },\r\n    stopUsing2(data) {\r\n      let temp = 0\r\n      const param = []\r\n      checkDept(data.manageDept).then(res => {\r\n        this.tea = res.code\r\n        if (res.code !== 0) {\r\n          this.crud.notify('请选择自己管理部门的指标', CRUD.NOTIFICATION_TYPE.ERROR)\r\n          return false\r\n        } else {\r\n          if (data.status != 5) {\r\n            temp = -1\r\n          }\r\n          const indIndicatorInfo = {\r\n            'id': data.id,\r\n            'ieCode': data.ieCode,\r\n            'ieName': data.ieName,\r\n            'status': '6'\r\n          }\r\n          param.push(indIndicatorInfo)\r\n          if (temp == -1) {\r\n            this.crud.notify('请选择启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n            return false\r\n          }\r\n          this.$confirm(`确定停用所选数据吗?`, '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }).then(() => {\r\n            updateStatus(param).then(returnData => {\r\n              if (returnData.code === 0) {\r\n                this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n                this.crud.toQuery()\r\n              } else {\r\n                this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n                this.crud.toQuery()\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 停用按钮\r\n    stopUsing(data) {\r\n      let temp = 0\r\n\r\n      const param = []\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择4-启用数据\r\n        if (data[i].status != 5) {\r\n          temp = -1\r\n          break\r\n        }\r\n        const indIndicatorInfo = {\r\n          'id': data[i].id,\r\n          'status': '6'\r\n        }\r\n        param.push(indIndicatorInfo)\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n      this.$confirm(`确定停用所选数据吗?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        updateStatus(param).then(returnData => {\r\n          if (returnData.code === 0) {\r\n            this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n            this.crud.toQuery()\r\n          } else {\r\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n            this.crud.toQuery()\r\n          }\r\n        })\r\n      })\r\n    },\r\n    // 详情按钮\r\n    detailsHis(row, detailFlag) {\r\n      let _this = this.$refs.ieCodeHistory\r\n      _this.openFlag = true\r\n      _this.ieCodePara = row.ieCode\r\n      this.ieCodeHis = row.ieCode\r\n      this.$nextTick(() => {\r\n        this.$refs.ieCodeHistory.refresh()\r\n      })\r\n\r\n    },\r\n    // 详情按钮\r\n    details(row, detailFlag) {\r\n      let _this = null\r\n      if (detailFlag == 'detail') {\r\n        _this = this.$refs.lookDetails\r\n      } else if (detailFlag == 'start') {\r\n        _this = this.$refs.toStartDetails\r\n      }\r\n      // 打开详情页面时查询相关信息\r\n      // 通过指标编号查询基础指标规则+维度+附加规则\r\n      const param = {\r\n        'ieCode': row.ieCode\r\n      }\r\n      getBaseIndicatorByIeCode(row.ieCode).then(returnData => {\r\n        if (returnData.code === 0) {\r\n          row.indBaseRule = returnData.data.indBaseRule\r\n          row.indDimRelations = returnData.data.indDimRelations\r\n          row.indBaseRuleFilters = returnData.data.indBaseRuleFilters\r\n          row.dimVals = returnData.data.dimVals\r\n          row.limitRule = returnData.data.limitRule\r\n          // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\r\n          /* const param1 = {\r\n            sourceDataSource: ''\r\n          }\r\n          getAtom(param1).then(data => {\r\n            _this.atom = data.data\r\n          })*/\r\n          // 获取原子指标\r\n          getAllAtomInfos().then(data => {\r\n            _this.atom = data.data\r\n          })\r\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\r\n          const dimParam = {\r\n            bizCode: row.indBaseRule.bizCode,\r\n            dimType: 'D'\r\n          }\r\n          getAtomDimenston(dimParam).then(data => {\r\n            _this.dimInfo = data.data\r\n          })\r\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\r\n          const meaParam = {\r\n            bizCode: row.indBaseRule.bizCode,\r\n            dimType: 'M'\r\n          }\r\n          getAtomDimenston(meaParam).then(data => {\r\n            _this.measureInfo = data.data\r\n          })\r\n        } else {\r\n          row.indBaseRule = {}\r\n          row.indDimRelations = null\r\n          row.indBaseRuleFilters = null\r\n          row.dimVals = null\r\n          row.limitRule = null\r\n        }\r\n      })\r\n      getDepts({enabled: true}).then(res => {\r\n        _this.depts = res.content\r\n        _this.viewDept = [{\r\n          id: 0,\r\n          label: '总行机关',\r\n          children: res.content,\r\n        }]\r\n      })\r\n      _this.title = '详情'\r\n      _this.form = row\r\n      _this.detailsDialog = true\r\n    },\r\n\r\n    /** 点击计算按钮触发 */\r\n    processA(data) {\r\n      // 只能选择已审批的数据\r\n      let temp = 0\r\n      for (let i = 0; i < data.length; i++) {\r\n        // 状态校验-只能选择5-启用\r\n        if (data[i].status != 5) {\r\n          temp = -1\r\n          break\r\n        }\r\n      }\r\n      if (temp == -1) {\r\n        this.crud.notify('请选择已启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\r\n        return false\r\n      }\r\n\r\n      const codes = []\r\n      for (let i = 0; i < data.length; i++) {\r\n        codes.push(data[i].ieCode)\r\n      }\r\n      this.processParam.codes = codes\r\n      this.processDialog = true\r\n    },\r\n    processB() {\r\n      if (this.dateValue == '') {\r\n        this.crud.notify('日期不能为空', CRUD.NOTIFICATION_TYPE.ERROR)\r\n      } else {\r\n        const dateValue = this.dateFormat(this.dateValue, 'YYYYMMDD')\r\n        this.processParam.periodDate = dateValue\r\n        process(this.processParam, 'base').then(data => {\r\n          if (data.code == 0) {\r\n            this.crud.notify(data.msg, CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n          } else {\r\n            this.crud.notify(data.msg, CRUD.NOTIFICATION_TYPE.ERROR)\r\n          }\r\n          this.processDialog = false\r\n        })\r\n      }\r\n    },\r\n    // 获取弹窗内部门数据\r\n    getDepts() {\r\n      getDepts({enabled: true, pid: '1', deptCategory: '0'}).then(res => {\r\n        let dep = [];\r\n        /* res.content.forEach(function (item) {\r\n           if (item.id != '89999053' && item.id != '89999024' && item.id != '00000203'\r\n               && item.id != '89999052' && item.id != '00000201' && item.id != '89999001'\r\n               && item.id != '89999048' && item.id != '89999020' && item.id != '89999015' && item.id != '89999047') {\r\n             dep.push(item)\r\n           }\r\n         });\r\n         this.depts = dep*/\r\n        // console.log( this.depts)\r\n        this.depts = res.content\r\n        this.viewDept = [{\r\n          id: 0,\r\n          label: '总行机关',\r\n          children: res.content,\r\n        }]\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}