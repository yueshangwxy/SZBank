{"remainingRequest":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\pncui-portal-fashional\\src\\layout\\components\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\pncui-portal-fashional\\src\\layout\\components\\Navbar.vue","mtime":1655429901721},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-SZBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapState } from \"vuex\";\r\nimport Breadcrumb from \"@eladmin/components/Breadcrumb\";\r\nimport Hamburger from \"@eladmin/components/Hamburger\";\r\n// import Github from '@/components/Github'\r\nimport Screenfull from \"@eladmin/components/Screenfull\";\r\nimport SizeSelect from \"@eladmin/components/SizeSelect\";\r\nimport Search from \"@eladmin/components/HeaderSearch\";\r\nimport Avatar from \"@eladmin/assets/images/avatar.png\";\r\nimport RoleSelect from \"@eladmin/components/RoleSelect\";\r\nimport ThemeSelect from \"../../components/ThemeSelect\";\r\nimport Logo from \"../components/Sidebar/Logo\";\r\n\r\nexport default {\r\n  components: {\r\n    Breadcrumb,\r\n    Hamburger,\r\n    Screenfull,\r\n    SizeSelect,\r\n    Search,\r\n    // Github\r\n    RoleSelect,\r\n    ThemeSelect,\r\n    Logo,\r\n  },\r\n  data() {\r\n    return {\r\n      Avatar: Avatar,\r\n      dialogVisible: false,\r\n      searchValue: \"\", // 搜索内容\r\n    };\r\n  },\r\n  watch: {\r\n    $route(val) {\r\n      this.searchValue = this.$route.query.data ? this.$route.query.data : \"\";\r\n    },\r\n    searchValue(val) {\r\n      console.log(val);\r\n      sessionStorage.setItem(\"searchKeyWords\", val);\r\n    },\r\n  },\r\n  created() {\r\n    // 首页搜索保持搜索内容在输入框\r\n    this.searchValue = this.$route.query.data ? this.$route.query.data : \"\";\r\n    sessionStorage.setItem(\"searchKeyWords\", this.searchValue);\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"sidebar\", \"device\", \"user\", \"baseApi\"]),\r\n    ...mapState({\r\n      showBreadcrumb: (state) => state.settings.showBreadcrumb,\r\n    }),\r\n    showLogo() {\r\n      return this.$store.state.settings.sidebarLogo;\r\n    },\r\n    show: {\r\n      get() {\r\n        return this.$store.state.settings.showSettings;\r\n      },\r\n      set(val) {\r\n        this.$store.dispatch(\"settings/changeSetting\", {\r\n          key: \"showSettings\",\r\n          value: val,\r\n        });\r\n      },\r\n    },\r\n  },\r\n  methods: {\r\n    setBlur() {\r\n      this.$refs.autocomplete.activated = true;\r\n    },\r\n    toggleSideBar() {\r\n      this.$store.dispatch(\"app/toggleSideBar\");\r\n    },\r\n    inputChange(value) {\r\n      this.searchValue = value;\r\n      sessionStorage.setItem(\"searchKeyWords\", value);\r\n    },\r\n    // 输入框输入联想\r\n    // 输入框\r\n    querySearch(queryString, cb) {\r\n      let request = {\r\n        page: 1,\r\n        size: 10,\r\n        keywords: queryString,\r\n        suggest: true,\r\n      };\r\n      setTimeout(() => {\r\n        this.$api.getListByKeywords(request).then((res) => {\r\n          let temp = res.obj;\r\n          let suggestion = [];\r\n          temp.forEach((item) => {\r\n            if (item.targetName) {\r\n              suggestion.push({\r\n                value: item.targetName,\r\n                assetType: item.assetType,\r\n              });\r\n            } else if (item.labelName) {\r\n              suggestion.push({\r\n                value: item.labelName,\r\n                assetType: item.assetType,\r\n              });\r\n            } else if (item.indexName) {\r\n              suggestion.push({\r\n                value: item.indexName,\r\n                assetType: item.assetType,\r\n              });\r\n            } else if (item.tableName) {\r\n              suggestion.push({\r\n                value: item.tableComment\r\n                  ? item.tableComment\r\n                  : \"\" + item.tableName,\r\n                assetType: item.assetType,\r\n              });\r\n            }\r\n          });\r\n          cb(suggestion);\r\n        });\r\n      }, 1000);\r\n    },\r\n    handleSelect(item) {\r\n      let type;\r\n      if (item.assetType === \"table\") {\r\n        type = 1;\r\n      } else if (item.assetType === \"api\") {\r\n        type = 2;\r\n      } else if (item.assetType === \"target\") {\r\n        type = 3;\r\n      } else if (item.assetType === \"label\") {\r\n        type = 4;\r\n      }\r\n      this.$router.push({\r\n        path: \"/asset/searchPage/index\",\r\n        // name: 'assetSearch'\r\n        query: {\r\n          data: this.searchValue,\r\n          from: \"other\",\r\n          type: type,\r\n        },\r\n      });\r\n    },\r\n    // 全局搜索\r\n    globalSearch() {\r\n      console.log(\"搜索\");\r\n      this.$router.push({\r\n        path: \"/asset/searchPage/index\",\r\n        // name: 'assetSearch',\r\n        query: {\r\n          data: this.searchValue,\r\n          from: \"other\",\r\n        },\r\n      });\r\n    },\r\n    open() {\r\n      this.$confirm(\"确定注销并退出系统吗？\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      }).then(() => {\r\n        this.logout();\r\n      });\r\n    },\r\n    logout() {\r\n      this.$store.dispatch(\"LogOut\").then(() => {\r\n        location.reload();\r\n      });\r\n    },\r\n  },\r\n};\r\n",null]}