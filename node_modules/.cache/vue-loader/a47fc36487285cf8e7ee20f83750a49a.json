{"remainingRequest":"D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\SZBank\\src\\views\\indicators\\dataLab\\sqlAnalysis\\sqlFlexibleAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\SZBank\\src\\views\\indicators\\dataLab\\sqlAnalysis\\sqlFlexibleAnalysis.vue","mtime":1713698208372},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  getTablesWithPermissions,\r\n  getListBySQL,\r\n  downLoad,\r\n  getTableColumn,\r\n  getSession,\r\n  stop,\r\n  downLoadSourceData\r\n} from \"@/api/dataLab/sqlAnalysis\";\r\nimport draggable from \"vuedraggable\";\r\nimport {getCurrentRole} from \"../../../../utils/auth\";\r\nexport default {\r\n  inject: [\"reload\"],\r\n  name: \"SqlAnalysis\",\r\n  data() {\r\n    return {\r\n      timer: null,\r\n      buttonType: \"success\",\r\n      buttonText: \"执行\",\r\n      loading: false,\r\n      // 树形控件\r\n      filterText: \"\",\r\n      tableName: \"\",\r\n      defaultProps: {\r\n        id: \"id\",\r\n        children: \"tables\",\r\n        label: \"projectName\",\r\n      },\r\n      treeData: [],\r\n      // 文本域\r\n      textarea: \"\",\r\n      textarea1: \"\",\r\n      textarea2: \"\",\r\n      tips: \"请拖动表到此区域\",\r\n      description: \"\",\r\n      // 表格\r\n      tableList: [],\r\n      propList: [],\r\n      // 分页\r\n      pageSize: 10,\r\n      currentPage: 1,\r\n      total: 0,\r\n      downLoadDialog: false,\r\n      descriptionDialog: false,\r\n\r\n      //flag为true的时候可以拖动，false的时候还在查找上一张表的字段信息\r\n      flag: true,\r\n      //拖到右侧的表\r\n      nameList: [],\r\n      tableAndNickname: [], //表和他的别名\r\n      //放到右侧的节点\r\n      nodeList: {},\r\n      //表字段信息\r\n      tableColumnList: [],\r\n      //表注释\r\n      tableComment: [],\r\n      //被选择字段\r\n      selectionList: [],\r\n      selection2sql: [],\r\n      //删除表时，同时删除该表选择的字段\r\n      newSelectionList: [],\r\n      newSelection2sql: [],\r\n      //ruleList\r\n      ruleList: [\r\n        {\r\n          where1: \"\",\r\n          where2: \"\",\r\n          where3: \"\",\r\n          where4: \"\",\r\n        },\r\n      ],\r\n      columnList: [],\r\n      connList: [], //拼接好的关联条件\r\n\r\n      //标签页相关\r\n      activeName: \"second\",\r\n      connectionShow: true,\r\n      inputDisabled: true,\r\n      dragFlag: false,\r\n      right: 10,\r\n      connection: 9,\r\n      type: \"1\",\r\n      //日志和记录的标签页相关\r\n      editableTabs: \"log\",\r\n      tabs: [\r\n        {\r\n          title: \"日志\",\r\n          name: \"log\",\r\n          closeable: false,\r\n          propList: [],\r\n          tableList: [],\r\n        },\r\n        {\r\n          title: \"当前结果\",\r\n          name: \"latest\",\r\n          closeable: false,\r\n          propList: [],\r\n          tableList: [],\r\n        },\r\n      ],\r\n      log: \"\",\r\n    };\r\n  },\r\n  watch: {\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n    activeName(val) {\r\n      if (val == \"second\") {\r\n        this.dragFlag = true;\r\n        this.inputDisabled = true;\r\n        this.right = 10;\r\n        this.connection = 9;\r\n        this.type = \"1\";\r\n        this.tips = \"请拖动表到此区域\"\r\n      } else {\r\n        this.dragFlag = false;\r\n        this.inputDisabled = false;\r\n        this.right = 19;\r\n        this.connection = 0;\r\n        this.type = \"0\";\r\n        this.tips = \"请输入内容\"\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    getTablesWithPermissions().then((data) => {\r\n      this.treeData = data;\r\n      console.log(this.treeData);\r\n    });\r\n\r\n    this.propList = [\r\n    ];\r\n    (this.tableList = []),\r\n      (this.tableColumnList = {\r\n        /*        \"test1\": [\r\n          \"column1\",\r\n          \"column2\",\r\n          \"column3\",\r\n          \"column4\",\r\n          \"column5\",\r\n          \"column6\",\r\n          \"column7\",\r\n          \"column8\"\r\n        ],\r\n        \"test2\":[\r\n          \"column1\",\r\n          \"column2\"\r\n        ]*/\r\n      });\r\n    this.columnList = [\r\n      {\r\n        from: [],\r\n        to: [],\r\n      },\r\n    ];\r\n    console.log(\r\n      \"this.tableColumnList=\" + Object.keys(this.tableColumnList).length\r\n    );\r\n  },\r\n  mounted() {},\r\n  destroyed() {\r\n    this.stopSetInterval();\r\n  },\r\n  computed: {\r\n    leftWidth() {\r\n      return 24 - this.right - this.connection;\r\n    },\r\n  },\r\n  methods: {\r\n    getSession() {\r\n      getSession().then((data) => {\r\n        if (data.code == \"200\") {\r\n          this.buttonType = \"danger\";\r\n          this.buttonText = \"中止\";\r\n        }\r\n      });\r\n    },\r\n    stop() {\r\n      stop().then((data) => {\r\n        if (data.code == \"200\") {\r\n          this.buttonType = \"success\";\r\n          this.buttonText = \"执行\";\r\n          this.$message({\r\n            type: \"success\",\r\n            message: data.msg,\r\n          });\r\n        } else {\r\n          this.buttonType = \"success\";\r\n          this.buttonText = \"执行\";\r\n          this.$message({\r\n            type: \"error\",\r\n            message: data.msg,\r\n          });\r\n        }\r\n      });\r\n      this.stopSetInterval();\r\n    },\r\n    // 节点过滤\r\n    filterNode(value, data) {\r\n      if (!value) return true;\r\n      return data.projectName.indexOf(value.toString()) !== -1;\r\n    },\r\n    // 节点点击\r\n    handleNodeClick(data) {},\r\n    executeSql() {\r\n\r\n      this.connectionShow = true;\r\n      if (this.textarea == null || this.textarea == \"\") {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"请填写SQL!\",\r\n        });\r\n      } else {\r\n        if (this.buttonText == \"执行\") {\r\n          const param = {\r\n            sql: this.textarea,\r\n          };\r\n          this.getListBySQL(param);\r\n        } else {\r\n          this.stop();\r\n        }\r\n      }\r\n    },\r\n    dataDownLoad() {\r\n      this.downLoadDialog = true;\r\n    },\r\n    downLoad(flag) {\r\n\r\n      if (this.textarea == null || this.textarea == \"\") {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"请填写SQL!\",\r\n        });\r\n      } else {\r\n        const  user = this.$store.state.user\r\n        console.log(user)\r\n        const param = {\r\n          flag: flag,\r\n          sql: this.textarea,\r\n          userId: user.user.id,\r\n          userName: user.user.username,\r\n          deptId: user.user.deptId,\r\n          deptName: user.user.dept\r\n        };\r\n        if (flag == \"1\") {\r\n          this.descriptionDialog = true;\r\n        } else {\r\n          downLoad(param).then((data) => {\r\n            this.$message({\r\n              type: \"success\",\r\n              message:\r\n                \"下载任务已提交至执行队列，请至'导出结果下载'页面查看任务状态并下载文件\",\r\n            });\r\n            this.downLoadDialog = false;\r\n          });\r\n        }\r\n      }\r\n    },\r\n    downLoadSourceData() {\r\n\r\n      const  user = this.$store.state.user\r\n      const param = {\r\n        flag: \"1\",\r\n        sql: this.textarea,\r\n        description: this.description,\r\n        userId: user.user.id,\r\n        userName: user.user.username,\r\n        deptId: user.user.deptId,\r\n        deptName: user.user.dept\r\n      };\r\n      downLoadSourceData(param).then((data) => {\r\n        console.log(JSON.stringify(data));\r\n        console.log(data);\r\n        this.downLoadDialog = false;\r\n        this.descriptionDialog = false;\r\n        if(data.code == '200') {\r\n          this.$message({\r\n            type: \"success\",\r\n            message: data.msg\r\n          });\r\n        }else {\r\n          this.$message({\r\n            type: \"error\",\r\n            message: data.msg\r\n          });\r\n        }\r\n      });\r\n    },\r\n    closeDescriptionDialog() {\r\n      this.descriptionDialog = false;\r\n      this.description = \"\";\r\n    },\r\n    getListBySQL(param) {\r\n\r\n      const noneList = [];\r\n      if (\r\n        this.nameList.length > 1 &&\r\n        this.connList.length == 0 &&\r\n        this.type == \"1\"\r\n      ) {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"请填写关联条件\",\r\n        });\r\n      } else if (\r\n        this.nameList.length != this.connList.length + 1 &&\r\n        this.type == \"1\"\r\n      ) {\r\n        let index = 0;\r\n        for (let i = 0; i < this.nameList.length; i++) {\r\n          let nickName = `t${i + 1}`; //  \"t\" + (i + 1)\r\n          for (let k in this.connList) {\r\n            if (this.connList[k].includes(nickName)) {\r\n              index += 1;\r\n              break;\r\n            }\r\n          }\r\n          if (index == 0) {\r\n            noneList.push(this.nameList[i]);\r\n          }\r\n          index = 0;\r\n        }\r\n        if (noneList.length > 0) {\r\n          this.$message({\r\n            type: \"warning\",\r\n            message: \"表\" + noneList.toString() + \"没有和其他表关联\",\r\n          });\r\n        }else {\r\n          this.submit(param)\r\n        }\r\n      } else {\r\n        this.submit(param)\r\n      }\r\n    },\r\n\r\n    submit(param){\r\n      this.loading = true;\r\n      this.log = \"执行中\";\r\n      this.editableTabs = \"log\";\r\n      this.createSetInterval();\r\n      getListBySQL(param).then((data) => {\r\n        console.log(data);\r\n        this.buttonText = \"执行\";\r\n        this.buttonType = \"success\";\r\n        if (data.code == \"200\") {\r\n          this.stopSetInterval();\r\n          this.handleTabs();\r\n          this.currentPage = 1;\r\n          this.propList = data.head;\r\n          this.tableList = data.data;\r\n          this.log = data.log;\r\n          this.total = this.tableList.length;\r\n          this.tabs[1].propList = this.propList;\r\n          this.tabs[1].tableList = this.tableList;\r\n          this.editableTabs = \"latest\"\r\n        } else {\r\n          this.stopSetInterval();\r\n          this.log = data.log;\r\n          this.$message({\r\n            type: \"error\",\r\n            message: data.msg,\r\n          });\r\n        }\r\n        this.loading = false;\r\n      });\r\n      this.loading = false;\r\n    },\r\n    stopSetInterval() {\r\n      console.log(\"=================轮询结束==================\");\r\n      if (this.timer) {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n      }\r\n    },\r\n    createSetInterval() {\r\n      console.log(\"=================轮询开始==================\");\r\n      this.stopSetInterval();\r\n      let _this = this;\r\n      this.timer = setInterval(() => {\r\n        _this.getSession();\r\n      }, 5000);\r\n    },\r\n    // 拖拽\r\n    /*      drag(ev, node) {\r\n        console.log(\"拖动\", node);\r\n        let transData = JSON.stringify(node)\r\n        this.dom = ev.currentTarget.cloneNode(true);\r\n        ev.dataTransfer.setData(\"node\", transData)\r\n        this.tableName = this.dom.textContent;\r\n        //console.log(this.dom);\r\n        //console.log(this.dom.tableName);\r\n      },*/\r\n    handleDragStart(node, event) {\r\n      console.log(\"拖动\", node);\r\n      this.nodeList = node.data;\r\n      event.dataTransfer.setData(\"node\", node);\r\n    },\r\n    /*      handleDragEnd(node,event){\r\n        console.log(\"放下\", item);\r\n        this.textarea = \"select * from \" +this.tableName;\r\n      },*/\r\n    treeAllowDrop() {\r\n      return false;\r\n    },\r\n    // 允许放下拖拽\r\n    allowDrop(ev) {\r\n      if (this.type == \"0\") {\r\n        return false;\r\n      }\r\n      ev.preventDefault();\r\n    },\r\n    // 放下事件\r\n    drop(ev, item) {\r\n      if (this.flag == true) {\r\n        this.flag = false;\r\n        console.log(\"放下\", this.nodeList);\r\n        if (this.nodeList.tableName != null && this.nodeList.tableName != \"\") {\r\n          this.tableName = this.nodeList.name + \".\" + this.nodeList.tableName;\r\n          let index = this.indexOf(this.tableName, this.nameList);\r\n          if (index > -1) {\r\n            this.$message({\r\n              type: \"warning\",\r\n              message: \"已选择该表\",\r\n            });\r\n            this.flag = true;\r\n            return;\r\n          } else {\r\n            getTableColumn(this.nodeList.name, this.nodeList.tableName).then(\r\n              (data) => {\r\n                //this.tableColumnList.push(data)\r\n/*                this.$set(this.tableColumnList, this.tableName, data);\r\n                this.nameList.push(this.tableName);\r\n                this.tableAndNickname.push(\"t\" + this.nameList.length);\r\n                this.data2Sql();*/\r\n                if (data.code == \"200\") {\r\n                  this.nameList.push(this.tableName);\r\n                  this.tableAndNickname.push(\"t\" + this.nameList.length);\r\n                  this.$set(this.tableColumnList, this.tableName, data.data);\r\n                  this.$set(this.tableComment, this.tableName, data.comment)\r\n                  this.data2Sql();\r\n                } else {\r\n                  this.$message({\r\n                    type: \"warning\",\r\n                    message: data.msg,\r\n                  });\r\n                }\r\n                this.flag = true;\r\n              }\r\n            );\r\n          }\r\n        } else {\r\n          this.flag = true;\r\n          this.$message({\r\n            type: \"warning\",\r\n            message: \"现在选择是为项目,请选择一个表\",\r\n          });\r\n        }\r\n        ev.preventDefault();\r\n        if (this.tableName == null) {\r\n          this.tableName = \"\";\r\n        }\r\n      } else {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"正在加载上一张表的字段信息\",\r\n        });\r\n      }\r\n      /*        let treeNode = ev.target;\r\n        if (treeNode) {\r\n          treeNode.appendChild(this.dom);\r\n        }*/\r\n    },\r\n    getComment(val){\r\n\r\n      for(let k in this.tableComment){\r\n          if(k == val){\r\n            console.log(this.tableComment[k])\r\n            return this.tableComment[k];\r\n          }\r\n      }\r\n\r\n    },\r\n    addRow() {\r\n      this.columnList.push({\r\n        from: [],\r\n        to: [],\r\n      });\r\n      this.ruleList.push({\r\n        where1: \"\",\r\n        where2: \"\",\r\n        where3: \"\",\r\n        where4: \"\",\r\n      });\r\n    },\r\n    deleteRow(index) {\r\n      this.ruleList.splice(index, 1);\r\n      this.connList.splice(index, 1);\r\n      this.data2Sql();\r\n    },\r\n    //获取字段\r\n    selectTable(rowNum, nickName, whereOrTo) {\r\n      let index = nickName.replace(\"t\", \"\");\r\n      index = index - 1;\r\n      let tableName = this.nameList[index];\r\n      const backList = [];\r\n      for (let k in this.tableColumnList) {\r\n        if (k == tableName) {\r\n          for (let j = 0; j < this.tableColumnList[k].length; j++) {\r\n            let column = this.tableColumnList[k][j].toString();\r\n            if(column.includes('(')){\r\n              column = column.substring(0,column.indexOf(\"(\"))\r\n            }\r\n            backList.push(column);\r\n          }\r\n        }\r\n      }\r\n      if (whereOrTo == \"from\") {\r\n        this.ruleList[rowNum].where2 = \"\";\r\n      } else {\r\n        this.ruleList[rowNum].where4 = \"\";\r\n      }\r\n      this.$set(this.columnList[rowNum], whereOrTo, backList);\r\n      console.log(\"this.columnList\" + JSON.stringify(this.columnList));\r\n    },\r\n    connChange(rowNum) {\r\n      let where1 = this.ruleList[rowNum].where1;\r\n      let where2 = this.ruleList[rowNum].where2;\r\n      let where3 = this.ruleList[rowNum].where3;\r\n      let where4 = this.ruleList[rowNum].where4;\r\n      if (where1 != \"\" && where2 != \"\" && where3 != \"\" && where4 != \"\") {\r\n        this.connList[rowNum] =\r\n          where1 + \".\" + where2 + \"=\" + where3 + \".\" + where4;\r\n        this.data2Sql();\r\n      }\r\n    },\r\n    handleConn() {\r\n      this.connList = [];\r\n      for (let i = 0; i < this.ruleList.length; i++) {\r\n        this.columnList.push({\r\n          from: [],\r\n          to: [],\r\n        });\r\n        let where1 = this.ruleList[i].where1;\r\n        let where3 = this.ruleList[i].where3;\r\n        let from = where1.replace(\"t\", \"\") - 1;\r\n        let to = where3.replace(\"t\", \"\") - 1;\r\n        for (let k in this.tableColumnList) {\r\n          if (k == this.nameList[from]) {\r\n            this.$set(this.columnList[i], \"from\", this.tableColumnList[k]);\r\n          }\r\n          if (k == this.nameList[to]) {\r\n            this.$set(this.columnList[i], \"to\", this.tableColumnList[k]);\r\n          }\r\n        }\r\n        if (\r\n          this.ruleList[i].where1 != \"\" &&\r\n          this.ruleList[i].where2 != \"\" &&\r\n          this.ruleList[i].where3 != \"\" &&\r\n          this.ruleList[i].where4 != \"\"\r\n        ) {\r\n          this.connList.push(\r\n            this.ruleList[i].where1 +\r\n              \".\" +\r\n              this.ruleList[i].where2 +\r\n              \"=\" +\r\n              this.ruleList[i].where3 +\r\n              \".\" +\r\n              this.ruleList[i].where4\r\n          );\r\n        }\r\n      }\r\n    },\r\n    //组装sql\r\n    data2Sql() {\r\n      let strColumn = \"\";\r\n      let strFrom = \"\";\r\n      let strConn = \"\";\r\n      if (this.selectionList.length == 0) {\r\n        for (let k in this.tableAndNickname) {\r\n          strColumn += this.tableAndNickname[k] + \".*\";\r\n          strColumn += \",\";\r\n        }\r\n      }\r\n\r\n      for (let j = 0; j < this.selection2sql.length; j++) {\r\n        let a = this.selection2sql[j].substring(\r\n          0,\r\n          this.selection2sql[j].lastIndexOf(\".\")\r\n        );\r\n        let b = this.selection2sql[j].substring(\r\n          this.selection2sql[j].lastIndexOf(\".\") + 1,\r\n          this.selection2sql[j].length\r\n        );\r\n        let index = this.indexOf(a, this.nameList);\r\n        let column = \"t\" + (index + 1) + \".\" + b;\r\n        strColumn += column + \",\";\r\n      }\r\n      for (let i = 0; i < this.nameList.length; i++) {\r\n        strFrom += this.nameList[i] + \" t\" + (i + 1) + \",\";\r\n      }\r\n      for (let k = 0; k < this.connList.length; k++) {\r\n        strConn += this.connList[k] + \" and \";\r\n      }\r\n      if (strFrom == \"\") {\r\n        this.textarea = \"\";\r\n      } else {\r\n        this.textarea =\r\n          \"select \" +\r\n          strColumn.substring(0, strColumn.lastIndexOf(\",\")) +\r\n          \" from \" +\r\n          strFrom.substring(0, strFrom.lastIndexOf(\",\"));\r\n        if (strConn != \"\") {\r\n          this.textarea =\r\n            this.textarea +\r\n            \" where \" +\r\n            strConn.substring(0, strConn.lastIndexOf(\"and\"));\r\n        }\r\n      }\r\n      if(this.textarea != ''){\r\n        this.textarea += \";\";\r\n      }\r\n    },\r\n    //删除被拖过来的表\r\n    deleteTable(tableName) {\r\n      //右侧操作区的数组\r\n      this.$delete(this.tableColumnList, tableName);\r\n      //中间被拖拽表的数组\r\n      let index = this.indexOf(tableName, this.nameList);\r\n      this.nameList.splice(index, 1);\r\n      this.tableAndNickname.splice(this.tableAndNickname.length - 1, 1);\r\n      console.log(\"表还剩：\" + this.nameList);\r\n      console.log(\"表别名还剩：\" + this.tableAndNickname);\r\n      //选择字段的数组\r\n      for (let i = 0; i < this.selectionList.length; i++) {\r\n        if (!this.selectionList[i].includes(tableName)) {\r\n          this.newSelectionList.push(this.selectionList[i]);\r\n        }\r\n      }\r\n      for (let i = 0; i < this.selection2sql.length; i++) {\r\n        if (!this.selection2sql[i].includes(tableName)) {\r\n          this.newSelection2sql.push(this.selection2sql[i]);\r\n        }\r\n      }\r\n      const backRuleList = []; //备份\r\n      let nickName = \"t\" + (index + 1);\r\n      for (let j = 0; j < this.ruleList.length; j++) {\r\n        if (\r\n          this.ruleList[j].where1 != nickName &&\r\n          this.ruleList[j].where2 != nickName &&\r\n          this.ruleList[j].where3 != nickName &&\r\n          this.ruleList[j].where4 != nickName\r\n        ) {\r\n          backRuleList.push(this.ruleList[j]);\r\n        }\r\n      }\r\n\r\n      this.ruleList = backRuleList;\r\n      if (this.ruleList.length == 0) {\r\n        this.ruleList.push({\r\n          where1: \"\",\r\n          where2: \"\",\r\n          where3: \"\",\r\n          where4: \"\",\r\n        });\r\n      }\r\n      for (let h = index + 1; h < this.tableAndNickname.length + 1; h++) {\r\n        let old = \"t\" + (h + 1);\r\n        for (let j = 0; j < this.ruleList.length; j++) {\r\n          for (let k in this.ruleList[j]) {\r\n            if (this.ruleList[j][k] == old) {\r\n              this.ruleList[j][k] = \"t\" + h;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.handleConn();\r\n      this.selectionList = this.newSelectionList;\r\n      this.newSelectionList = [];\r\n      this.selection2sql = this.newSelection2sql;\r\n      this.newSelection2sql = [];\r\n      this.data2Sql();\r\n    },\r\n    //获取数组中数值的下标\r\n    indexOf(val, ids) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        //获取当前值的下标\r\n        if (ids[i] === val) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    },\r\n    //多选赋值ids\r\n    ids(val) {\r\n      //检索下标,判断当前值(或对象是否在数组中); 在则返回在的对象,不在则返回-1\r\n      let column = val\r\n      if(column.includes(\"(\")){\r\n        column = column.substring(0,val.indexOf(\"(\"));\r\n      }\r\n      let index = this.indexOf(val, this.selectionList);\r\n      if (this.selectionList.length > 0 && index > -1) {\r\n        //删除数组中的某个元素(在取消勾选时,删除数组中的值)\r\n        this.selectionList.splice(index, 1);\r\n        this.selection2sql.splice(index, 1);\r\n      } else {\r\n        //id添加到数组中\r\n        this.selectionList.push(val);\r\n        this.selection2sql.push(column)\r\n        //⽤逗号隔开\r\n        // this.selectionList.join(\",\");\r\n      }\r\n      // 发射数据给⽗组件：\r\n      this.$emit(\"handelSelectionList\", this.selectionList);\r\n      this.data2Sql();\r\n      console.log(\"选择的字段有:\" + this.selectionList);\r\n    },\r\n    // 分页\r\n    handleSizeChange(val) {\r\n      this.pageSize = val;\r\n      this.currentPage = 1;\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val;\r\n    },\r\n    handleClick(tab, event) {\r\n      console.log(tab, event);\r\n    },\r\n    changeTab(activeName, oldActiveName) {\r\n      console.log(activeName, oldActiveName);\r\n\r\n      if (oldActiveName == \"first\") {\r\n        this.textarea1 = this.textarea;\r\n        this.textarea = this.textarea2;\r\n      } else {\r\n        this.textarea2 = this.textarea;\r\n        this.textarea = this.textarea1;\r\n      }\r\n      this.flag = true;\r\n      /*this.textarea = \"\";\r\n      //拖到右侧的表\r\n      this.nameList = [];\r\n      this.tableAndNickname = []; //表和他的别名\r\n      //放到右侧的节点\r\n      this.nodeList = {};\r\n      //表字段信息\r\n      this.tableColumnList = {}; //被选择字段\r\n      this.selectionList = [];\r\n      //删除表时，同时删除该表选择的字段\r\n      this.newSelectionList = [];\r\n      //ruleList\r\n      (this.ruleList = [\r\n        {\r\n          where1: \"\",\r\n          where2: \"\",\r\n          where3: \"\",\r\n          where4: \"\",\r\n        },\r\n      ]),\r\n        (this.columnList = [\r\n          {\r\n            from: [],\r\n            to: [],\r\n          },\r\n        ]);\r\n      this.connList = []; //拼接好的关联条件*/\r\n    },\r\n    textClear() {\r\n      if (this.activeName == \"first\") {\r\n        this.textarea1 = \"\";\r\n        this.textarea = \"\";\r\n      } else {\r\n        this.textarea2 = \"\";\r\n        this.textarea = \"\";\r\n        this.nameList = [];\r\n        this.tableAndNickname = []; //表和他的别名\r\n        //放到右侧的节点\r\n        this.nodeList = {};\r\n        //表字段信息\r\n        this.tableColumnList = {}; //被选择字段\r\n        this.selectionList = [];\r\n        this.selection2sql = [];\r\n        //删除表时，同时删除该表选择的字段\r\n        this.newSelectionList = [];\r\n        //ruleList\r\n        (this.ruleList = [\r\n          {\r\n            where1: \"\",\r\n            where2: \"\",\r\n            where3: \"\",\r\n            where4: \"\",\r\n          },\r\n        ]),\r\n          (this.columnList = [\r\n            {\r\n              from: [],\r\n              to: [],\r\n            },\r\n          ]);\r\n        this.connList = []; //拼接好的关联条件\r\n      }\r\n    },\r\n    indexOfTabs(val, tabs) {\r\n      for (let i = 0; i < tabs.length; i++) {\r\n        //获取当前值的下标\r\n        if (tabs[i].name === val) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    },\r\n    ClickEditableTabs(tab, event) {\r\n      let index = this.indexOfTabs(tab.name, this.tabs);\r\n      if (tab.name != \"log\") {\r\n        this.propList = this.tabs[index].propList;\r\n        this.tableList = this.tabs[index].tableList;\r\n        this.total = this.tableList.length;\r\n      }\r\n    },\r\n    removeTab(targetName) {\r\n      let tabs = this.tabs;\r\n      let activeName = this.editableTabs;\r\n      if (activeName === targetName) {\r\n        tabs.forEach((tab, index) => {\r\n          if (tab.name === targetName) {\r\n            let nextTab = tabs[index + 1] || tabs[index - 1];\r\n            if (nextTab) {\r\n              activeName = nextTab.name;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      this.editableTabs = activeName;\r\n      this.tabs = tabs.filter((tab) => tab.name !== targetName);\r\n    },\r\n    handleTabs() {\r\n      if (this.tabs[1].propList.length != 0) {\r\n        for (let i = this.tabs.length; i > 1; i--) {\r\n          let index = i - 2;\r\n          let next = index + 1;\r\n          let title = \"记录\" + next;\r\n          let name = \"category\" + next;\r\n          if (next > 5) continue;\r\n          const newTab = {\r\n            title: title,\r\n            name: name,\r\n            closeable: true,\r\n            propList: this.tabs[next].propList,\r\n            tableList: this.tabs[next].tableList,\r\n          };\r\n          this.tabs.splice(i, 1, newTab);\r\n        }\r\n      }\r\n    },\r\n    // el-table表头中加el-popover下拉框\r\n    linefeed(h, { column, $index }) {\r\n      let realWidth = 0;\r\n      let span = document.createElement(\"span\");\r\n      span.innerText = column.label;\r\n      if (!column.label) {\r\n        document.body.appendChild(span);\r\n        realWidth = 100;\r\n        column.minWidth = realWidth; // 可能还有边距/边框等值，需要根据实际情况加上\r\n        document.body.removeChild(span);\r\n        return h(\"span\", column.label);\r\n      } else {\r\n        document.body.appendChild(span);\r\n        realWidth = span.getBoundingClientRect().width + 30;\r\n        column.minWidth = realWidth; // 可能还有边距/边框等值，需要根据实际情况加上\r\n        document.body.removeChild(span);\r\n        return h(\"span\", column.label);\r\n      }\r\n    },\r\n  },\r\n};\r\n",null]}