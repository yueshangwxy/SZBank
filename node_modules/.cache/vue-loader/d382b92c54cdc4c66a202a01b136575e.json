{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-system\\src\\views\\system\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-system\\src\\views\\system\\user\\index.vue","mtime":1649224866695},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649224862071},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1649224861568},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649224862071},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1649224877943}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport crudUser from '../../../api/system/user'\r\nimport {isvalidPhone} from '@eladmin/utils/validate'\r\nimport {getDepts} from '../../../api/system/dept'\r\nimport {getAll, getLevel} from '../../../api/system/role'\r\nimport {getAllJob} from '../../../api/system/job'\r\nimport CRUD, {presenter, header, form, crud} from '@crud/crud'\r\nimport rrOperation from '@crud/RR.operation'\r\nimport crudOperation from '@crud/CRUD.operation'\r\nimport udOperation from '@crud/UD.operation'\r\nimport pagination from '@crud/Pagination'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport {mapGetters} from 'vuex'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nimport request from '@eladmin/utils/request'\r\nimport qs from 'qs'\r\n\r\nlet userRoles = []\r\n// crud交由presenter持有\r\nconst defaultCrud = CRUD({title: '用户', url: 'api/users', crudMethod: {...crudUser}})\r\nconst defaultForm = {\r\n  id: null,\r\n  userType: '0',\r\n  username: null,\r\n  nickName: null,\r\n  sex: '男',\r\n  email: null,\r\n  enabled: 'false',\r\n  roles: [],\r\n  job: {id: null},\r\n  dept: {id: null},\r\n  phone: null\r\n}\r\nexport default {\r\n  name: 'User',\r\n  components: {Treeselect, crudOperation, rrOperation, udOperation, pagination},\r\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\r\n  // 数据字典\r\n  dicts: ['user_status', 'USER_TYPE'],\r\n  data() {\r\n    // 自定义验证\r\n    const validPhone = (rule, value, callback) => {\r\n      if (!value) {\r\n        callback(new Error('请输入电话号码'))\r\n      } else if (!isvalidPhone(value)) {\r\n        callback(new Error('请输入正确的11位手机号码'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      height: document.documentElement.clientHeight - 180 + 'px;',\r\n      deptName: '', depts: [], deptDatas: [], jobs: [], level: 3, roles: [],\r\n      defaultProps: {children: 'children', label: 'name'},\r\n      permission: {\r\n        add: ['admin', 'user:add'],\r\n        edit: ['admin', 'user:edit'],\r\n        del: ['admin', 'user:del'],\r\n        resetpwd: ['admin', 'user:resetpwd']\r\n      },\r\n      enabledTypeOptions: [\r\n        {key: 'true', display_name: '启用'},\r\n        {key: 'false', display_name: '停用'}\r\n      ],\r\n      userTypeOptions: [\r\n        {key: '0', user_type_select: '临时'},\r\n        {key: '1', user_type_select: '正式'}\r\n      ],\r\n      rules: {\r\n        username: [\r\n          {required: true, message: '请输入用户名', trigger: 'blur'},\r\n          {min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur'}\r\n        ],\r\n        userType: [\r\n          {required: true, message: '请选择用户类型', trigger: 'blur'}\r\n        ],\r\n        nickName: [\r\n          {required: true, message: '请输入用户昵称', trigger: 'blur'},\r\n          {min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur'}\r\n        ],\r\n        dept: {\r\n          id: [\r\n            {required: true, message: '机构不能为空', trigger: 'change'}\r\n          ]\r\n        }\r\n      },\r\n      resetLoading: false,\r\n      zoomDirection: 'left'\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'user'\r\n    ])\r\n  },\r\n  created() {\r\n    // console.log(\"初始化查询表单传输数据！\" + this.form.enabled)\r\n    this.query.enabled = 'true'\r\n    //this.crud.refresh()\r\n    this.$nextTick(() => {\r\n      this.getDeptDatas()\r\n      this.crud.toQuery()\r\n      this.crud.msg.add = '新增成功，默认密码：123456'\r\n    })\r\n    this.resetQuery()\r\n  },\r\n  mounted: function () {\r\n    const that = this\r\n    window.onresize = function temp() {\r\n      that.height = document.documentElement.clientHeight - 180 + 'px;'\r\n    }\r\n  },\r\n  methods: {\r\n    resetQuery() {\r\n      this.crud.resetQuery(false);\r\n      this.query.enabled = 'true'\r\n      this.crud.refresh()\r\n    },\r\n    changeRole(value) {\r\n      userRoles = []\r\n      value.forEach(function (data, index) {\r\n        const role = {id: data}\r\n        userRoles.push(role)\r\n      })\r\n    },\r\n    [CRUD.HOOK.afterAddError](crud) {\r\n      this.afterErrorMethod(crud)\r\n    },\r\n    [CRUD.HOOK.afterEditError](crud) {\r\n      this.afterErrorMethod(crud)\r\n    },\r\n    afterErrorMethod(crud) {\r\n      // 恢复select\r\n      const initRoles = []\r\n      userRoles.forEach(function (role, index) {\r\n        initRoles.push(role.id)\r\n      })\r\n      crud.form.roles = initRoles\r\n    },\r\n    deleteTag(value) {\r\n      userRoles.forEach(function (data, index) {\r\n        if (data.id === value) {\r\n          userRoles.splice(index, value)\r\n        }\r\n      })\r\n    },\r\n    // 新增与编辑前做的操作\r\n    [CRUD.HOOK.afterToCU](crud, form) {\r\n      this.getDepts()\r\n      this.getRoles()\r\n      this.getRoleLevel()\r\n      form.enabled = form.enabled.toString()\r\n      if (!form.dept.id && this.query.deptId) {\r\n        form.dept.id = this.query.deptId\r\n      }\r\n    },\r\n    // 打开编辑弹窗前做的操作\r\n    [CRUD.HOOK.beforeToEdit](crud, form) {\r\n      // this.getJobs(this.form.dept.id)\r\n      userRoles = []\r\n      const roles = []\r\n      form.roles.forEach(function (role, index) {\r\n        roles.push(role.id)\r\n        // 初始化编辑时候的角色\r\n        const rol = {id: role.id}\r\n        userRoles.push(rol)\r\n      })\r\n      form.roles = roles\r\n    },\r\n    // 打开编辑弹窗前做的操作\r\n    [CRUD.HOOK.beforeToDetail](crud, form) {\r\n      userRoles = []\r\n      const roles = []\r\n      this.getDepts()\r\n      this.getRoles()\r\n      this.getRoleLevel()\r\n      form.enabled = form.enabled.toString()\r\n      /*if (!form.dept.id && this.query.deptId) {\r\n        form.dept.id = this.query.deptId\r\n      }*/\r\n      form.roles.forEach(function (role, index) {\r\n        roles.push(role.id)\r\n        // 初始化编辑时候的角色\r\n        const rol = {id: role.id}\r\n        userRoles.push(rol)\r\n      })\r\n      form.roles = roles\r\n    },\r\n    // 提交前做的操作\r\n    [CRUD.HOOK.afterValidateCU](crud) {\r\n      console.log('用户类型：' + crud.form.userType)\r\n      console.log('用户名：' + crud.form.username)\r\n      if (crud.form.userType === '0') {\r\n        const nameResult = crud.form.username.substring(0, 3)\r\n        if (nameResult != 'DAP') {\r\n          crud.form.username = 'DAP' + crud.form.username\r\n        }\r\n      }\r\n      if (!crud.form.dept.id) {\r\n        this.$message({\r\n          message: '部门不能为空',\r\n          type: 'warning'\r\n        })\r\n        return false\r\n      }\r\n      crud.form.roles = userRoles\r\n      return true\r\n    },\r\n    // 获取左侧部门数据\r\n    getDeptDatas() {\r\n      const sort = 'id,desc'\r\n      const params = {sort: sort}\r\n      if (this.deptName) {\r\n        params['name'] = this.deptName\r\n      }\r\n      getDepts(params).then(res => {\r\n        this.deptDatas = res.content\r\n      })\r\n    },\r\n    // 获取弹窗内部门数据\r\n    getDepts() {\r\n      getDepts({enabled: true}).then(res => {\r\n        this.depts = res.content\r\n      })\r\n    },\r\n    // 切换部门\r\n    handleNodeClick(data) {\r\n      if (data.pid === 0) {\r\n        this.query.deptId = null\r\n      } else {\r\n        this.query.deptId = data.id\r\n      }\r\n      this.crud.toQuery()\r\n    },\r\n    // 改变状态\r\n    changeEnabled(data, val) {\r\n      this.$confirm('此操作将 \"' + this.dict.label.user_status[val] + '\" ' + data.username + ', 是否继续？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        crudUser.edit(data).then(res => {\r\n          this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n        }).catch(() => {\r\n          data.enabled = !data.enabled\r\n        })\r\n      }).catch(() => {\r\n        data.enabled = !data.enabled\r\n      })\r\n    },\r\n    // 获取弹窗内角色数据\r\n    getRoles() {\r\n      getAll().then(res => {\r\n        this.roles = res\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    // 获取弹窗内岗位数据\r\n    getJobs(id) {\r\n      getAllJob(id).then(res => {\r\n        this.jobs = res.content\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    // 点击部门搜索对应的岗位\r\n    selectFun(node, instanceId) {\r\n      // console.log('=======selectFun========', node, instanceId)\r\n      // this.level = node.deptLevel\r\n      // this.getJobs(node.id)\r\n      // this.form.job.id = null\r\n    },\r\n    // 获取权限级别\r\n    getRoleLevel() {\r\n      getLevel().then(res => {\r\n        this.level = res.level\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    checkboxT(row, rowIndex) {\r\n      return row.id !== this.user.id\r\n    },\r\n\r\n    doResetPwd(datas) {\r\n      this.$confirm(`确认重置选中的${datas.length}个用户?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.resetPwd(datas)\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    // 重置密码\r\n    resetPwd(key, index) {\r\n      const ids = []\r\n      if (key instanceof Array) {\r\n        key.forEach(val => {\r\n          ids.push(val.id)\r\n        })\r\n      } else {\r\n        ids.push(key.id)\r\n      }\r\n      this.resetLoading = true\r\n      request({\r\n        url: '/api/users/resetPwd',\r\n        method: 'post',\r\n        data: ids\r\n      }).then(res => {\r\n        this.resetLoading = false\r\n        this.$notify({\r\n          title: '重置成功',\r\n          type: 'success',\r\n          duration: 2500\r\n        })\r\n      })\r\n    },\r\n    handleZoom() {\r\n      if (this.zoomDirection == 'left')\r\n        this.zoomDirection = 'right';\r\n      else\r\n        this.zoomDirection = 'left';\r\n    }\r\n  }\r\n}\r\n",null]}