{"remainingRequest":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\index.vue","mtime":1626598175000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudIndIndicatorInfo, {\n  add,\n  checkDept,\n  getAllSource,\n  getAtom,\n  getAtomDimenston,\n  updateStatus,\n  getBaseIndicatorByIeCode,\n  getAllAtomInfos,\n  process,\n  getIndBaseRule\n} from '../../../../api/indicators/indIndicatorInfo'\nimport CRUD, {presenter, header, form, crud} from '@crud/crud'\nimport rrOperation from '@crud/RR.operation'\nimport crudOperation from '@crud/ICRUD.operation'\nimport udOperation from '@crud/UD.operation'\nimport pagination from '@crud/Pagination'\nimport category from '../../category/category'\nimport dimensionPage from './dimensionPage'\nimport limitRulePage from './limitRulePage'\nimport lookDetails from '../details/lookBaseDetails'\nimport baseDevelop from './baseDevelop'\nimport {getDepts} from '@system/api/system/dept'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\n//import checkPermission from '@eladmin/utils/permission'\nimport toStartDetails from '../details/toStartBaseDetails'\nimport ieCodeHistory from '../details/ieCodeHistory'\nimport {mapGetters} from 'vuex'\n// crud交由presenter持有\nconst defaultCrud = CRUD({\n  title: '指标信息',\n  url: crudIndIndicatorInfo.url,\n  sort: 'id,desc',\n  optShow: {del: false},\n  crudMethod: {...crudIndIndicatorInfo.method}\n})\nconst defaultForm = {\n  id: null,\n  ieCode: null,\n  ieName: null,\n  categoryId: null,\n  ieProp: null,\n  ieType: '1',\n  ieDesc: null,\n  ieRule: null,\n  dimNames: null,\n  ieDefaultValue: null,\n  ieMethod: null,\n  calcFreq: null,\n  status: '0',\n  ieDataUnit: '',\n  formulateBasis: '',\n  startDate: new Date(),\n  endDate: null,\n  retention: '1,Y',\n  processInstanceId: null,\n  manageDept: null,\n  crtUserCode: null,\n  crtOrgCode: null,\n  crtDate: null,\n  updUserCode: null,\n  updOrgCode: null,\n  updDate: null,\n  viewDepts: [],\n  viewDept: null,\n  indBaseRule: {\n    calcRule: null, // 加工规则\n    dataSource: null, // 数据源\n    expression: 'sum', // 取数表达式\n    dataTable: null, // 取数表名-即原子指标中的存储表名\n    measureColumn: null, // 度量\n    bizCode: null // 原子指标\n  },\n\n  indDimRelations: [], // 指标维度关系\n  indBaseRuleFilters: [], // 指标附加规则\n\n  dimVals: null, // 维度选择页面传来的显示维度\n  limitRule: null // 限制规则\n\n}\nexport default {\n  name: 'BaseIndicatorInfo',\n  components: {\n    pagination,\n    crudOperation,\n    rrOperation,\n    udOperation,\n    category,\n    dimensionPage,\n    limitRulePage,\n    lookDetails,\n    baseDevelop,\n    Treeselect,\n    toStartDetails,\n    ieCodeHistory\n  },\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  dicts: ['IE_PROP', 'IE_SCOPE', 'IE_TYPE', 'IE_METHOD', 'CALC_FREQ', 'IE_STATUS', 'IE_DATA_UNIT', 'RETENTION', 'EXPRESSION'],\n  data() {\n    return {\n      manageDeptEdited: false,\n      table: {\n        columns: {\n          id: 'hidden',\n          crtOrgCode: 'hidden',\n          updOrgCode: 'hidden',\n          calcFreq: 'hidden',\n          retention: 'hidden'\n        }\n      },\n      permission: {\n        add: ['admin', 'baseIndIndicatorInfo:add'],\n        submit: ['admin', 'baseIndIndicatorInfo:submit'],\n        develop: ['admin', 'baseIndIndicatorInfo:develop'],\n        upLine: ['admin', 'baseIndIndicatorInfo:upLine'],\n        startUsing: ['admin', 'baseIndIndicatorInfo:startUsing'],\n        stopUsing: ['admin', 'baseIndIndicatorInfo:stopUsing'],\n        processA: ['admin', 'baseIndIndicatorInfo:processA'],\n        edit: ['admin', 'baseIndIndicatorInfo:edit'],\n        del: ['admin', 'baseIndIndicatorInfo:del'],\n        details: ['admin', 'baseIndIndicatorInfo:details'],\n        stopUsing1: []\n      },\n      rules: {\n        ieName: [\n          {required: true, message: '指标名称不能为空', trigger: 'blur'}\n        ],\n        ieProp: [\n          {required: true, message: '指标类别不能为空', trigger: 'change'}\n        ],\n        viewDepts: [\n          {required: true, message: '查看部门不能为空', trigger: 'change'}\n        ],\n        manageDept: [\n          {required: true, message: '管理部门不能为空', trigger: 'change'}\n        ],\n        formulateBasis: [\n          {required: true, message: '指标类型不能为空', trigger: 'change'}\n        ],\n        ieDataUnit: [\n          {required: true, message: '指标单位不能为空', trigger: 'change'}\n        ],\n        ieDesc: [\n          {required: true, message: '指标描述不能为空', trigger: 'change'}\n        ],\n        'indBaseRule.bizCode': [{required: true, message: '原子指标不能为空', trigger: 'blur'}],\n        'indBaseRule.measureColumn': [{required: true, message: '原子指标不能为空', trigger: 'blur'}]\n      },\n      sourceData: [], // 数据源信息\n      atom: [], // 原子指标\n      measureInfo: [], // 度量信息\n      dimInfo: [], // 原子指标维度信息\n      processDialog: false, // 计算输日期的页面\n      processParam: { // 传给后台的参数\n        codes: [],\n        periodDate: ''\n      },\n      dateValue: '', // 计算日期\n\n      depts: [], // 部门数组\n      viewDept: [], // 查看部门数组\n      tea: '',\n      ieCodeHis: null\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'user'\n    ])\n  },\n  created() {\n    this.$nextTick(() => {\n    })\n  },\n  mounted() {\n    this.crud.resetQuery()\n    getDepts({enabled: true, pid: '0'}).then(res => {\n      let dep = [];\n      res.content.forEach(function (item) {\n        /*if (item.id != '89999053' && item.id != '89999024' && item.id != '00000203'\n            && item.id != '89999052' && item.id != '00000201' && item.id != '89999001'\n            && item.id != '89999048' && item.id != '89999020' && item.id != '89999015' && item.id != '89999047') {*/\n        dep.push(item)\n        //}\n      });\n      this.depts = dep\n      // console.log(this.depts)\n    })\n  },\n  methods: {\n    //checkPermission,\n    // 选择指标级别后关联管理部门\n    changeIeScope(data) {\n      if (data == 1) {\n        this.manageDeptEdited = true\n        /* getInfo().then(res => {\n           this.form.manageDept = res.deptId\n         })*/\n        this.form.manageDept = this.user.deptId\n        console.log('------------>>>>>---->>>', this.user.deptId)\n      } else {\n        this.form.manageDept = null\n        this.manageDeptEdited = false\n      }\n    },\n    // 获取数据前设置好接口地址\n    [CRUD.HOOK.beforeRefresh]() {\n      this.query.ieType = '1'\n      this.query.queryType = '1'\n      return true\n    },\n    handleCategoryClick(data) {\n      this.crud.form.categoryId = data.id\n      // console.log(data)\n      this.crud.query.categoryIds = data.childrenIds // data.childrenIds\n      this.form.categoryId = data.id\n      this.crud.refresh()\n    },\n    // 新增之前\n    [CRUD.HOOK.beforeToAdd]() {\n      console.log('类别', this.form.categoryId)\n      if (!this.form.categoryId) {\n        this.crud.notify('请选择类别', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      if (this.form.categoryId === '0') {\n        this.crud.notify('根节点不能添加', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      // 获取数据源\n      /* getAllSource().then(data => {\n        this.sourceData = data.data\n      })*/\n      // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\n      /* const param = {\n        sourceDataSource: ''\n      }\n      getAtom(param).then(data => {\n        this.atom = data.data\n      })*/\n      getAllAtomInfos().then(data => {\n        this.atom = data.data\n      })\n      // 获取部门信息\n      this.getDepts()\n    },\n    /*[CRUD.HOOK.afterSubmit](data1,data2) {\n      console.log(data2.data)\n      let temp = 0\n      const param = []\n      const data = []\n      data.push(data2.data)\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择0-未审批\n        if (data[i].status != 0) {\n          temp = -1\n          break\n        }\n        const indIndicatorInfo = {\n          'id': data[i].id,\n          'status': '1',\n          'ieProp': data[i].ieProp\n        }\n        param.push(indIndicatorInfo)\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择已创建的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n\n      this.$confirm(`确定要提交所选数据吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        updateStatus(param).then(returnData => {\n          if (returnData.code === 0) {\n            this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\n            this.crud.toQuery()\n          } else {\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n            this.crud.toQuery()\n          }\n        })\n      })\n    },*/\n    // 删除之前\n    [CRUD.HOOK.beforeDelete]() {\n      for (let items of this.crud.selections) {\n        if (items.status != 0) {\n          this.crud.notify('该状态的指标不允许删除', CRUD.NOTIFICATION_TYPE.ERROR)\n          return false\n        }\n      }\n      getAllAtomInfos().then(data => {\n        this.atom = data.data\n      })\n      // 获取部门信息\n      this.getDepts()\n\n    },\n    // 数据源发生变化时查询对应的原子指标\n    /* dataSourceChangeHandle(val) {\n      //获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\n      const param = {\n        sourceDataSource: val\n      }\n      getAtom(param).then(data => {\n        this.atom = data.data\n      })\n    },*/\n    // 原子指标修改后触发事件\n    atomChangeHandle(val) {\n      this.atom.some((item) => {\n        if (item.bizCode == val) {\n          // 1.自动注入取数表名\n          this.form.indBaseRule.dataTable = item.bizTabCode\n          // 2.根据原子指标编号查询原子指标维度信息表;生成维度信息\n          const dimParam = {\n            bizCode: item.bizCode,\n            dimType: 'D'\n          }\n          getAtomDimenston(dimParam).then(data => {\n            this.dimInfo = data.data\n          })\n          // 3.根据原子指标编号查询原子指标维度信息表;生成度量信息\n          const meaParam = {\n            bizCode: item.bizCode,\n            dimType: 'M'\n          }\n          getAtomDimenston(meaParam).then(data => {\n            this.measureInfo = data.data\n          })\n          // 清空\n          this.form.indBaseRule.measureColumn = null\n          this.form.dimVals = null\n          this.form.limitRule = null\n        }\n      })\n    },\n    // 统计维度点击选择时触发\n    dimClickHandle() {\n      // 将维度信息传递过去并将结果返回\n      const _this = this.$refs.dimensionPage\n      _this.title = '统计维度'\n      _this.dimInfo = this.dimInfo\n      _this.indDimRelations = this.form.indDimRelations// 默认选中的值\n      _this.selectRow()// 做默认选中的处理\n      _this.dimensionDialog = true\n    },\n    // 接收统计维度子组件传来的信息\n    getDimensionPage(data1, data2) {\n      this.form.dimVals = data1\n      this.form.indDimRelations = data2\n    },\n    // 限制规则点击选择时触发\n    limitRuleClickHandle() {\n      // 将维度信息传递过去选择后将结果返回\n      const _this = this.$refs.limitRulePage\n      _this.title = '限制规则'\n      _this.dimInfo = this.dimInfo\n      _this.tableData = []\n      _this.tableName = this.form.indBaseRule.dataTable// 表名,查询值列表的参数\n      _this.indBaseRuleFilters = this.form.indBaseRuleFilters// 默认选中的值\n      _this.selectRow()// 做默认选中的处理\n      _this.limitRuleDialog = true\n    },\n    // 接收限制规则子组件传来的信息\n    getLimitPage(data1, data2) {\n      this.form.limitRule = data1\n      this.form.indBaseRuleFilters = data2\n    },\n\n    // 修改之前触发的事件\n    [CRUD.HOOK.beforeToEdit]() {\n      if (this.form.status != 0 && this.form.status != 2) {\n        this.crud.notify('只有未提交或退回的数据才能修改能修改', CRUD.NOTIFICATION_TYPE.ERROR)\n        this.crud.resetForm()\n        return false\n      }\n      // 获取部门信息\n      this.getDepts()\n      // 通过指标编号查询基础指标规则+维度+附加规则\n      /* const param = {\n        'ieCode': this.form.ieCode\n      }\n      getBaseIndicatorByIeCode(this.form.ieCode).then(returnData => {\n        if (returnData.code === 0) {\n          this.form.indBaseRule = returnData.data.indBaseRule\n          this.form.indDimRelations = returnData.data.indDimRelations\n          this.form.indBaseRuleFilters = returnData.data.indBaseRuleFilters\n          this.form.dimVals = returnData.data.dimVals\n          this.form.limitRule = returnData.data.limitRule\n          // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\n          /!* const param1 = {\n            sourceDataSource: ''\n          }\n          getAtom(param1).then(data => {\n            this.atom = data.data\n          })*!/\n          // 获取原子指标\n          getAllAtomInfos().then(data => {\n            this.atom = data.data\n          })\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\n          const dimParam = {\n            bizCode: this.form.indBaseRule.bizCode,\n            dimType: 'D'\n          }\n          getAtomDimenston(dimParam).then(data => {\n            this.dimInfo = data.data\n          })\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\n          const meaParam = {\n            bizCode: this.form.indBaseRule.bizCode,\n            dimType: 'M'\n          }\n          getAtomDimenston(meaParam).then(data => {\n            this.measureInfo = data.data\n          })\n        }\n      })*/\n    },\n\n    /* 点击提交审批触发事件 */\n    subApprove(data) {\n      let temp = 0\n      const param = []\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择0-未审批\n        if (data[i].status != 0) {\n          temp = -1\n          break\n        }\n        const indIndicatorInfo = {\n          'id': data[i].id,\n          'status': '1',\n          'ieProp': data[i].ieProp\n        }\n        param.push(indIndicatorInfo)\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择已创建的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n\n      this.$confirm(`确定要提交所选数据吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\n        this.crud.toQuery()\n        /*updateStatus(param).then(returnData => {\n          if (returnData.code === 0) {\n            this.crud.notify('操作成功!', CRUD.NOTIFICATION_TYPE.SUCCESS)\n            this.crud.toQuery()\n          } else {\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n            this.crud.toQuery()\n          }\n        })*/\n      })\n    },\n    /** 基础指标开发按钮 */\n    baseDevelop(data) {\n      // 状态校验-只能选择0-未审批或3-已退回的数据\n      if (data.status != 2) {\n        this.crud.notify('请选择已审批的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      const _this = this.$refs.baseDevelop\n      _this.title = '基础指标开发[' + data.ieCode + ']'\n      _this.form.ieCode = data.ieCode\n\n      // 通过指标编号查询基础指标规则+维度+附加规则\n      const param = {\n        'ieCode': data.ieCode\n      }\n      getBaseIndicatorByIeCode(data.ieCode).then(returnData => {\n        if (returnData.code === 0) {\n          _this.form.indBaseRule = returnData.data.indBaseRule\n          _this.form.indDimRelations = returnData.data.indDimRelations\n          _this.form.indBaseRuleFilters = returnData.data.indBaseRuleFilters\n          _this.form.dimVals = returnData.data.dimVals\n          _this.form.limitRule = returnData.data.limitRule\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\n          const dimParam = {\n            bizCode: _this.form.indBaseRule.bizCode,\n            dimType: 'D'\n          }\n          getAtomDimenston(dimParam).then(data => {\n            _this.dimInfo = data.data\n          })\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\n          const meaParam = {\n            bizCode: _this.form.indBaseRule.bizCode,\n            dimType: 'M'\n          }\n          getAtomDimenston(meaParam).then(data => {\n            _this.measureInfo = data.data\n          })\n        } else {\n          _this.form.indBaseRule = {\n            calcRule: null, // 加工规则\n            dataSource: null, // 数据源\n            expression: 'sum', // 取数表达式\n            dataTable: null, // 取数表名-即原子指标中的存储表名\n            measureColumn: null, // 度量\n            bizCode: null // 原子指标\n          }\n          _this.form.indDimRelations = []\n          _this.form.indBaseRuleFilters = []\n          _this.form.dimVals = null\n          _this.form.limitRule = null\n          _this.dimInfo = []\n          _this.measureInfo = []\n        }\n      })\n      // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\n      /* const param1 = {\n        sourceDataSource: ''\n      }\n      getAtom(param1).then(data => {\n        this.atom = data.data\n      })*/\n      // 获取原子指标\n      getAllAtomInfos().then(data => {\n        _this.atom = data.data\n      })\n      _this.baseDevelopDialog = true\n    },\n    // 子组件调用刷新方法\n    refQuery(data) {\n      this.crud.toQuery()\n    },\n    /* 点击上线按钮触发事件 */\n    upLine(data) {\n      let temp = 0\n      const param = []\n      const ieCodes = []\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择0-已审批\n        if (data[i].status != 2) {\n          temp = -1\n          break\n        }\n        const indIndicatorInfo = {\n          'id': data[i].id,\n          'status': '4'\n        }\n        param.push(indIndicatorInfo)\n        ieCodes.push(data[i].ieCode)\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择已审批的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      // 开发校验通过后执行审批\n      getIndBaseRule(ieCodes).then(returnData => {\n        if (returnData.code !== 0) {\n          this.crud.notify(returnData.msg + '指标未进行开发', CRUD.NOTIFICATION_TYPE.ERROR)\n        } else {\n          this.$confirm(`确定上线所选数据吗?`, '提示', {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }).then(() => {\n            // 开发校验通过后,修改状态\n            updateStatus(param).then(returnData => {\n              if (returnData.code === 0) {\n                this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n                this.crud.toQuery()\n              } else {\n                this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n                this.crud.toQuery()\n              }\n            })\n          })\n        }\n      })\n    },\n    // 启用按钮\n    startUsing(data) {\n      let temp = 0\n      const param = []\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择4-已上线，不能啟用6-停用的数据\n        if (data[i].status != 4) {\n          temp = -1\n          break\n        }\n        const indIndicatorInfo = {\n          'id': data[i].id,\n          'status': '5'\n        }\n        param.push(indIndicatorInfo)\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择已上线的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      this.$confirm(`确定启用所选数据吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        updateStatus(param).then(returnData => {\n          if (returnData.code === 0) {\n            this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n            this.crud.toQuery()\n          } else {\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n            this.crud.toQuery()\n          }\n        })\n      })\n    },\n    stopUsing2(data) {\n      let temp = 0\n      const param = []\n      checkDept(data.manageDept).then(res => {\n        this.tea = res.code\n        if (res.code !== 0) {\n          this.crud.notify('请选择自己管理部门的指标', CRUD.NOTIFICATION_TYPE.ERROR)\n          return false\n        } else {\n          if (data.status != 5) {\n            temp = -1\n          }\n          const indIndicatorInfo = {\n            'id': data.id,\n            'ieCode': data.ieCode,\n            'ieName': data.ieName,\n            'status': '6'\n          }\n          param.push(indIndicatorInfo)\n          if (temp == -1) {\n            this.crud.notify('请选择启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n            return false\n          }\n          this.$confirm(`确定停用所选数据吗?`, '提示', {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }).then(() => {\n            updateStatus(param).then(returnData => {\n              if (returnData.code === 0) {\n                this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n                this.crud.toQuery()\n              } else {\n                this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n                this.crud.toQuery()\n              }\n            })\n          })\n        }\n      })\n    },\n    // 停用按钮\n    stopUsing(data) {\n      let temp = 0\n\n      const param = []\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择4-启用数据\n        if (data[i].status != 5) {\n          temp = -1\n          break\n        }\n        const indIndicatorInfo = {\n          'id': data[i].id,\n          'status': '6'\n        }\n        param.push(indIndicatorInfo)\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n      this.$confirm(`确定停用所选数据吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        updateStatus(param).then(returnData => {\n          if (returnData.code === 0) {\n            this.crud.notify('操作成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n            this.crud.toQuery()\n          } else {\n            this.crud.notify('操作失败!错误原因:' + returnData.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n            this.crud.toQuery()\n          }\n        })\n      })\n    },\n    // 详情按钮\n    detailsHis(row, detailFlag) {\n      let _this = this.$refs.ieCodeHistory\n      _this.openFlag = true\n      _this.ieCodePara = row.ieCode\n      this.ieCodeHis = row.ieCode\n      this.$nextTick(() => {\n        this.$refs.ieCodeHistory.refresh()\n      })\n\n    },\n    // 详情按钮\n    details(row, detailFlag) {\n      let _this = null\n      if (detailFlag == 'detail') {\n        _this = this.$refs.lookDetails\n      } else if (detailFlag == 'start') {\n        _this = this.$refs.toStartDetails\n      }\n      // 打开详情页面时查询相关信息\n      // 通过指标编号查询基础指标规则+维度+附加规则\n      const param = {\n        'ieCode': row.ieCode\n      }\n      getBaseIndicatorByIeCode(row.ieCode).then(returnData => {\n        if (returnData.code === 0) {\n          row.indBaseRule = returnData.data.indBaseRule\n          row.indDimRelations = returnData.data.indDimRelations\n          row.indBaseRuleFilters = returnData.data.indBaseRuleFilters\n          row.dimVals = returnData.data.dimVals\n          row.limitRule = returnData.data.limitRule\n          // 获取原子指标-初始化新增菜单时默认查询当前连接(暂定数据源='')的原子指标信息\n          /* const param1 = {\n            sourceDataSource: ''\n          }\n          getAtom(param1).then(data => {\n            _this.atom = data.data\n          })*/\n          // 获取原子指标\n          getAllAtomInfos().then(data => {\n            _this.atom = data.data\n          })\n          // 根据原子指标编号查询原子指标维度信息表;生成维度信息\n          const dimParam = {\n            bizCode: row.indBaseRule.bizCode,\n            dimType: 'D'\n          }\n          getAtomDimenston(dimParam).then(data => {\n            _this.dimInfo = data.data\n          })\n          // 根据原子指标编号查询原子指标维度信息表;生成度量信息\n          const meaParam = {\n            bizCode: row.indBaseRule.bizCode,\n            dimType: 'M'\n          }\n          getAtomDimenston(meaParam).then(data => {\n            _this.measureInfo = data.data\n          })\n        } else {\n          row.indBaseRule = {}\n          row.indDimRelations = null\n          row.indBaseRuleFilters = null\n          row.dimVals = null\n          row.limitRule = null\n        }\n      })\n      getDepts({enabled: true}).then(res => {\n        _this.depts = res.content\n        _this.viewDept = [{\n          id: 0,\n          label: '总行机关',\n          children: res.content,\n        }]\n      })\n      _this.title = '详情'\n      _this.form = row\n      _this.detailsDialog = true\n    },\n\n    /** 点击计算按钮触发 */\n    processA(data) {\n      // 只能选择已审批的数据\n      let temp = 0\n      for (let i = 0; i < data.length; i++) {\n        // 状态校验-只能选择5-启用\n        if (data[i].status != 5) {\n          temp = -1\n          break\n        }\n      }\n      if (temp == -1) {\n        this.crud.notify('请选择已启用的数据', CRUD.NOTIFICATION_TYPE.ERROR)\n        return false\n      }\n\n      const codes = []\n      for (let i = 0; i < data.length; i++) {\n        codes.push(data[i].ieCode)\n      }\n      this.processParam.codes = codes\n      this.processDialog = true\n    },\n    processB() {\n      if (this.dateValue == '') {\n        this.crud.notify('日期不能为空', CRUD.NOTIFICATION_TYPE.ERROR)\n      } else {\n        const dateValue = this.dateFormat(this.dateValue, 'YYYYMMDD')\n        this.processParam.periodDate = dateValue\n        process(this.processParam, 'base').then(data => {\n          if (data.code == 0) {\n            this.crud.notify(data.msg, CRUD.NOTIFICATION_TYPE.SUCCESS)\n          } else {\n            this.crud.notify(data.msg, CRUD.NOTIFICATION_TYPE.ERROR)\n          }\n          this.processDialog = false\n        })\n      }\n    },\n    // 获取弹窗内部门数据\n    getDepts() {\n      getDepts({enabled: true, pid: '1', deptCategory: '0'}).then(res => {\n        let dep = [];\n        /* res.content.forEach(function (item) {\n           if (item.id != '89999053' && item.id != '89999024' && item.id != '00000203'\n               && item.id != '89999052' && item.id != '00000201' && item.id != '89999001'\n               && item.id != '89999048' && item.id != '89999020' && item.id != '89999015' && item.id != '89999047') {\n             dep.push(item)\n           }\n         });\n         this.depts = dep*/\n        // console.log( this.depts)\n        this.depts = res.content\n        this.viewDept = [{\n          id: 0,\n          label: '总行机关',\n          children: res.content,\n        }]\n      })\n    }\n  }\n}\n",null]}