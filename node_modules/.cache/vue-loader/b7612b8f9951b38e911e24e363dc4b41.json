{"remainingRequest":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\layout\\login.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\pncui-portal-fashional\\src\\layout\\login.vue","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport {encrypt} from '@eladmin/utils/rsaEncrypt'\nimport Config from '@public/config/settings'\nimport {getCodeImg} from '@eladmin/api/login'\nimport Cookies from 'js-cookie'\nimport {mapGetters, mapActions} from 'vuex'\n\nimport ThemeSelect from '../components/ThemeSelect'\n\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      title: Config.title,\n      codeEnabled: false,\n      codeUrl: '',\n      cookiePass: '',\n      theme: 'default',\n      loginForm: {\n        username: '',\n        password: '',\n        rememberMe: false,\n        code: '',\n        uuid: ''\n      },\n      loginRules: {\n        username: [{required: true, trigger: 'blur', message: '用户名不能为空'}],\n        password: [{required: true, trigger: 'blur', message: '密码不能为空'}],\n        code: [{required: true, trigger: 'change', message: '验证码不能为空'}]\n      },\n      loading: false,\n      redirect: undefined,\n      currentRole: '',\n      selectRole: false\n    }\n  },\n  components: {\n    ThemeSelect\n  },\n  computed: {\n    logo() {\n      //console.log('lllllogo>>>>>', Config.logo, typeof (Config.logo))\n      return Config.logo ? Config.logo : require('../../public/themes/' + this.getStyle()['style'] + '/images/logo.png')\n    },\n    getBackground() {\n      //return '/themes/' + this.getTheme().layout + '/' + this.getTheme().style + '/images/login_bg_' + (new Date().getDay() + 1) + '.jpg'\n      return Config.loginBackground ? Config.loginBackground : require('../../public/themes/' + this.getStyle().style + '/images/login_bg_' + (new Date().getDay() + 1) + '.jpg')\n    }\n  },\n  watch: {\n    $route: {\n      handler: function (route) {\n        this.redirect = route.query && route.query.redirect\n      },\n      immediate: true\n    }\n  },\n  created() {\n    this.getCode()\n    this.getCookie()\n  },\n  mounted() {\n  },\n  methods: {\n\n    getCode() {\n      getCodeImg().then(res => {\n        this.codeEnabled = res.enabled\n        if (res.enabled) {\n          this.codeUrl = res.img\n          this.loginForm.uuid = res.uuid\n        }\n      })\n    },\n    getCookie() {\n      const username = Cookies.get('username')\n      let password = Cookies.get('password')\n      const rememberMe = Cookies.get('rememberMe')\n      // 保存cookie里面的加密后的密码\n      this.cookiePass = password === undefined ? '' : password\n      password = password === undefined ? this.loginForm.password : password\n      this.loginForm = {\n        username: username === undefined ? this.loginForm.username : username,\n        password: password,\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe),\n        code: ''\n      }\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        const user = {\n          username: this.loginForm.username,\n          password: this.loginForm.password,\n          rememberMe: this.loginForm.rememberMe,\n          code: this.loginForm.code,\n          uuid: this.loginForm.uuid\n        }\n        if (user.password !== this.cookiePass) {\n          user.password = encrypt(user.password)\n        }\n        if (valid) {\n          this.loading = true\n          if (user.rememberMe) {\n            Cookies.set('username', user.username, {expires: Config.passCookieExpires})\n            Cookies.set('password', user.password, {expires: Config.passCookieExpires})\n            Cookies.set('rememberMe', user.rememberMe, {expires: Config.passCookieExpires})\n          } else {\n            Cookies.remove('username')\n            Cookies.remove('password')\n            Cookies.remove('rememberMe')\n          }\n          this.$store.dispatch('Login', user).then(() => {\n            //console.log('======dddddd======', this.user())\n            if (this.user().roles != null && this.user().roles.length > 0) {\n              if (this.user().roles.length > 1) {\n                // console.log('=======login=====>', this.user())\n                this.selectRole = true\n              } else if (this.user().roles.length == 1) {\n                this.currentRole = this.user().roles[0].id\n                this.goin()\n              }\n            } else {\n              this.$message('当前用户没有访问该系统的权限，请联系管理员！', 'error')\n            }\n          }).catch((error) => {\n            console.log(error)\n            this.loading = false\n            this.getCode()\n          })\n        } else {\n          console.log('error submit!!')\n          return false\n        }\n      })\n    },\n    goin() {\n      if (!this.currentRole) {\n        this.$message('请选择角色', 'error')\n        return\n      }\n      //console.log('======goin============', this.currentRole, this.user().roles.find(e => e.id == this.currentRole))\n      this.$store.dispatch('setCurrentRole', this.user().roles.find(e => e.id == this.currentRole))\n      this.$router.push({path: this.redirect || '/'})\n    },\n    cancel() {\n      this.selectRole = false\n      this.loading = false\n    },\n    ...mapGetters(['user', 'getStyle']),\n  }\n}\n",null]}