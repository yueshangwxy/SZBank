{"remainingRequest":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\pncui-workflow\\src\\views\\activiti\\task.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\pncui-workflow\\src\\views\\activiti\\task.vue","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport { tasks, processTask, assigneeTask, getUsers } from '../../api/workflow/activiti'\nimport FlowImage from '../../components/Activiti/FlowImage'\n\nexport default {\n  name: 'Task',\n  data() {\n    return {\n      query: { type: '1', finished: '' },\n      form: { taskId: '', assignee: '', comment: '', parameter: '' },\n      current: {},\n      rows: [],\n      loading: false,\n      startFlow: false,\n      isAssign: false,\n      showImage: false,\n      users: [],\n      page: {\n        // 页码\n        start: 0,\n        // 每页数据条数\n        size: 10,\n        // 总数据条数\n        total: 0\n      }\n    }\n  },\n  components: { FlowImage },\n  mounted() {\n    this.refresh()\n    getUsers({\n      page: 0,\n      size: 999,\n      sort: 'username,desc',\n      deptId: this.user().deptId,\n      enabled: true\n    }).then(res => {\n      this.users = res.content\n    })\n  },\n  methods: {\n    refresh() {\n      //console.log('==refresh======', this.currentRole())\n      tasks({\n          order: 'desc',\n          latest: true,\n          sort: 'startTime',\n          size: this.page.size,\n          start: this.page.start,\n          finished: this.query.type == '0' ? this.query.finished : this.query.type == '3',\n          taskCandidateGroup: this.query.type == '2' ? this.currentRole().id : null,\n          taskAssignee: (this.query.type == '1' || this.query.type == '3') ? this.user().username : null\n        }\n      ).then(res => {\n        //console.log(res)\n        this.rows = res.data.data\n        this.page.total = res.data.total\n      })\n    },\n    viewImage(row) {\n      this.current.processInstanceId = row.processInstanceId\n      this.current.processDefinitionId = row.processDefinitionId\n      this.showImage = true\n    },\n    toProcess(row) {\n      this.form.taskId = row.id\n      this.startFlow = true\n      this.isAssign = false\n    },\n    toAssignee(row) {\n      this.form.taskId = row.id\n      this.startFlow = true\n      this.isAssign = true\n    },\n    doProcess() {\n      let parameter = {}\n      if (this.form.parameter) {\n        parameter = JSON.parse(this.form.parameter)\n      }\n      processTask(\n        this.form.taskId, this.form.comment, parameter\n      ).then(res => {\n        if (res.code === 0) {\n          this.$message.success('任务已处理')\n          this.startFlow = false\n          this.refresh()\n        } else {\n          this.$message.error(res.msg)\n        }\n      }).catch(error => {\n        this.$message.error(error)\n      })\n    },\n    doAssignee() {\n      let parameter = {}\n      if (this.form.parameter) {\n        parameter = JSON.parse(this.form.parameter)\n      }\n      assigneeTask(\n        this.form.taskId, this.form.assignee, this.form.comment, parameter\n      ).then(res => {\n        if (res.code === 0) {\n          this.$message.success('任务已转出')\n          this.startFlow = false\n          this.refresh()\n        } else {\n          this.$message.error(res.msg)\n        }\n      }).catch(error => {\n        this.$message.error(error)\n      })\n    },\n    // 当前页改变\n    pageChangeHandler(e) {\n      this.page.start = e\n      this.refresh()\n    },\n    // 每页条数改变\n    sizeChangeHandler(e) {\n      this.page.size = e\n      this.page.start = 1\n      this.refresh()\n    },\n    ...mapGetters(['currentRole', 'user'])\n  }\n}\n",null]}