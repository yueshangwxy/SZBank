{"remainingRequest":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\views\\mnt\\deploy\\deploy.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\views\\mnt\\deploy\\deploy.vue","mtime":499162500000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { add, edit, getApps, getServers } from '../../../api/mnt/deploy'\nimport { mapGetters } from 'vuex'\nimport { getToken } from '../../../utils/auth'\n\nexport default {\n  props: {},\n  data() {\n    return {\n      loading: false,\n      dialog: false,\n      apps: [],\n      servers: [],\n      headers: {\n        Authorization: getToken()\n      },\n      deployInfo: {},\n      form: {\n        id: '',\n        appId: '',\n        ip: '',\n        selectIp: []\n      },\n      rules: {}\n    }\n  },\n  computed: {\n    ...mapGetters(['deployUploadApi'])\n  },\n  created() {\n    this.initWebSocket()\n  },\n  mounted() {\n    this.initSelect()\n  },\n  methods: {\n    cancel() {\n      this.resetForm()\n    },\n    doSubmit() {\n      this.loading = true\n      if (this.isAdd) {\n        this.doAdd()\n      } else {\n        this.doEdit()\n      }\n    },\n    joinIp() {\n      this.form.ip = ''\n      this.form.selectIp.forEach(ip => {\n        if (this.form.ip !== '') {\n          this.form.ip += ','\n        }\n        this.form.ip += ip\n      })\n    },\n    doAdd() {\n      this.joinIp()\n      add(this.form)\n        .then(res => {\n          this.resetForm()\n          this.$notify({\n            title: '添加成功',\n            type: 'success',\n            duration: 2500\n          })\n          this.loading = false\n          this.$parent.init()\n        })\n        .catch(err => {\n          this.loading = false\n          console.log(err.response.data.message)\n        })\n    },\n    doEdit() {\n      this.joinIp()\n      edit(this.form)\n        .then(res => {\n          this.resetForm()\n          this.$notify({\n            title: '修改成功',\n            type: 'success',\n            duration: 2500\n          })\n          this.loading = false\n          this.$parent.init()\n        })\n        .catch(err => {\n          this.loading = false\n          console.log(err.response.data.message)\n        })\n    },\n    resetForm() {\n      this.dialog = false\n      this.$refs['form'].resetFields()\n      this.form = {\n        id: '',\n        appId: '',\n        ip: '',\n        selectIp: []\n      }\n    },\n    initSelect() {\n      getApps().then(res => {\n        this.apps = res.content\n      })\n      getServers().then(res => {\n        this.servers = res.content\n      })\n    },\n    handleSuccess(response, file, fileList) {\n      this.cancel()\n    },\n    // 监听上传失败\n    handleError(e, file, fileList) {\n      const msg = JSON.parse(e.message)\n      this.$notify({\n        title: msg.message,\n        type: 'error',\n        duration: 2500\n      })\n    },\n    initWebSocket() {\n      const wsUri = process.env.VUE_APP_WS_API + '/webSocket/deploy'\n      this.websock = new WebSocket(wsUri)\n      this.websock.onerror = this.webSocketOnError\n      this.websock.onmessage = this.webSocketOnMessage\n    },\n    webSocketOnError(e) {\n      this.$notify({\n        title: 'WebSocket连接发生错误',\n        type: 'error',\n        duration: 0\n      })\n    },\n    webSocketOnMessage(e) {\n      const data = JSON.parse(e.data)\n      if (data.msgType === 'INFO') {\n        this.$notify({\n          title: '',\n          message: data.msg,\n          type: 'success',\n          dangerouslyUseHTMLString: true,\n          duration: 5500\n        })\n      } else if (data.msgType === 'ERROR') {\n        this.$notify({\n          title: '',\n          message: data.msg,\n          dangerouslyUseHTMLString: true,\n          type: 'error',\n          duration: 0\n        })\n      }\n    },\n    webSocketSend(agentData) {\n      this.websock.send(agentData)\n    }\n  }\n}\n",null]}