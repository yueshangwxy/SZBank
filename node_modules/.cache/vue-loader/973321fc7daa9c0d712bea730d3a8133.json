{"remainingRequest":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\components\\TreeSelect\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\components\\TreeSelect\\index.vue","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Evicce\\Desktop\\work\\code2\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"el-tree-select\",\n  props:{\n    /* 配置项 */\n    props:{\n      type: Object,\n      default:()=>{\n        return {\n          value:'id',             // ID字段名\n          label: 'title',         // 显示名称\n          children: 'children'    // 子级字段名\n        }\n      }\n    },\n    /* 选项列表数据(树形结构的对象数组) */\n    options:{\n      type: Array,\n      default: ()=>{ return [] }\n    },\n    /* 初始值 */\n    value:{\n      type: [String,Array],\n      default: ()=>{ return null }\n    },\n    /* 可清空选项 */\n    clearable:{\n      type:Boolean,\n      default:()=>{ return true }\n    },\n    multiple:{\n      type:Boolean,\n      default:()=>{ return false }\n    },\n    /* 自动收起 */\n    accordion:{\n      type:Boolean,\n      default:()=>{ return false }\n    },\n    placeholder:{\n      type:String,\n      default:()=>{return \"检索关键字\"}\n    }\n  },\n  data() {\n    return {\n      filterText: '',\n      valueId:this.value,    // 初始值\n      valueTitle:null,\n      defaultExpandedKey:[]\n    }\n  },\n  mounted(){\n    this.initHandle()\n  },\n  methods: {\n    // 初始化值\n    initHandle(){\n      if(this.valueId){\n        if(this.multiple){\n          this.$refs.selectTree.setCheckedKeys(this.valueId.split(\",\"))// 设置默认选中\n          this.valueTitle = this.$refs.selectTree.getCheckedNodes().map(e=>e[this.props.label]).join(\",\")//a[this.props.label]\n        }else{\n          this.$refs.selectTree.setCurrentKey(this.valueId)       // 设置默认选中\n          this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.label]// 初始化显示\n        }\n        this.defaultExpandedKey = [this.valueId]      // 设置默认展开\n      }\n      this.initScroll()\n    },\n    // 初始化滚动条\n    initScroll(){\n      this.$nextTick(()=>{\n        let scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0]\n        let scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar')\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;'\n        scrollBar.forEach(ele => ele.style.width = 0)\n      })\n    },\n    // 切换选项\n    handleNodeClick(node){\n      if(this.multiple){\n        return\n      }\n      console.debug('=====handleNodeClick=======',node)\n      this.valueTitle = node[this.props.label]\n      this.valueId = node[this.props.value]\n      this.$emit('getValue',this.valueId)\n      this.defaultExpandedKey = []\n    },\n    // 切换选项\n    handleCheck(data,node){\n      console.debug('======handleCheck======',data,node)\n      this.valueId=node.checkedKeys.join(\",\")\n      this.valueTitle = node.checkedNodes.map(e=>e[this.props.label]).join(\",\")\n      this.$emit('getValue',this.valueId)\n      this.defaultExpandedKey = []\n    },\n    // 清除选中\n    clearHandle(){\n      this.valueTitle = ''\n      this.valueId = null\n      this.defaultExpandedKey = []\n      this.clearSelected()\n      this.$emit('getValue',null)\n    },\n    /* 清空选中样式 */\n    clearSelected(){\n      let allNode = document.querySelectorAll('#tree-option .el-tree-node')\n      allNode.forEach((element)=>element.classList.remove('is-current'))\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    }\n  },\n  watch: {\n    value(){\n      this.valueId = this.value\n      this.initHandle()\n    },\n    filterText(val) {\n      this.$refs.selectTree.filter(val);\n    }\n  },\n};\n",null]}