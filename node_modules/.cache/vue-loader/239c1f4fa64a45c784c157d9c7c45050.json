{"remainingRequest":"D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\SZBank\\node_modules\\eladmin-common\\src\\views\\tools\\storage\\local\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\SZBank\\node_modules\\eladmin-common\\src\\views\\tools\\storage\\local\\index.vue","mtime":1650418876950},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\SZBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\SZBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport { getToken } from '../../../../utils/auth'\r\nimport crudFile from '../../../../api/tools/localStorage'\r\nimport CRUD, { presenter, header, form, crud } from '../../../../components/Crud/crud'\r\nimport rrOperation from '../../../../components/Crud/RR.operation'\r\nimport crudOperation from '../../../../components/Crud/CRUD.operation'\r\nimport pagination from '../../../../components/Crud/Pagination'\r\n\r\n// crud交由presenter持有\r\nconst defaultCrud = CRUD({ title: '文件', url: 'api/localStorage', crudMethod: { ...crudFile }})\r\nconst defaultForm = { id: null, name: '', portal_visible: '0' }\r\nexport default {\r\n  name: 'LocalStorage',\r\n  components: { pagination, crudOperation, rrOperation },\r\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\r\n  // 设置数据字典\r\n  dicts: ['yes_or_no'],\r\n  data() {\r\n    return {\r\n      delAllLoading: false,\r\n      loading: false,\r\n      headers: { 'Authorization': getToken() },\r\n      permission: {\r\n        edit: ['admin', 'storage:edit'],\r\n        del: ['admin', 'storage:del']\r\n      },\r\n      fileList: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'baseApi',\r\n      'fileUploadApi'\r\n    ])\r\n  },\r\n  created() {\r\n    this.crud.optShow.add = false\r\n    this.crud.optShow.edit = false\r\n  },\r\n  methods: {\r\n    upload() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          if (this.fileList.length === 0) {\r\n            this.$message.error('请选择上传文件!')\r\n          } else {\r\n            this.loading = true\r\n            this.$refs.upload.submit()\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    handleChange(file, fileList) {\r\n      if (fileList.length > 0) {\r\n        this.fileList = [fileList[fileList.length - 1]]\r\n      }\r\n      this.form.name = file.name\r\n    },\r\n    beforeUpload(file) {\r\n      let isLt2M = true\r\n      isLt2M = file.size / 1024 / 1024 < 100\r\n      if (!isLt2M) {\r\n        this.loading = false\r\n        this.$message.error('上传文件大小不能超过 100MB!')\r\n      }\r\n      this.form.name = file.name\r\n      return isLt2M\r\n    },\r\n    handleSuccess(response, file, fileList) {\r\n      this.crud.notify('上传成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n      this.$refs.upload.clearFiles()\r\n      this.crud.status.add = CRUD.STATUS.NORMAL\r\n      this.crud.resetForm()\r\n      file.name = ''\r\n      this.loading = false\r\n      this.crud.toQuery()\r\n    },\r\n    handleError(e, file, fileList) {\r\n      const msg = JSON.parse(e.message)\r\n      file.name = ''\r\n      this.$refs.upload.clearFiles()\r\n      this.$notify({\r\n        title: msg.message,\r\n        type: 'error',\r\n        duration: 2500\r\n      })\r\n      this.loading = false\r\n    },\r\n    beforeRemove(file, fileList) {\r\n      this.form.name = ''\r\n    },\r\n\r\n    // 添加取消 - 之前 */\r\n    [CRUD.HOOK.beforeAddCancel](crud, form) {\r\n      this.loading = false\r\n      this.$refs.upload.clearFiles()\r\n    },\r\n\r\n    // 改变状态\r\n    changeEnabled(data, val) {\r\n      var s = '取消设置'\r\n      if (val == 1) {\r\n        s = '设置'\r\n      }\r\n      this.$confirm('此操作将 [' + s + '] \"' + data.name + '\" 为制度文件,是否继续？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n          crudFile.edit(data).then(res => {\r\n          this.$notify({\r\n            title: '设置成功',\r\n            type: 'success',\r\n            duration: 2500\r\n          })\r\n        }).catch(() => {\r\n          data.visible = data.visible === '1' ? '0' : '1'\r\n        })\r\n      }).catch(() => {\r\n        data.visible = data.visible === '1' ? '0' : '1'\r\n      })\r\n    },\r\n    // 下载文件\r\n    handleClick(url, name) {\r\n      var xhh = new XMLHttpRequest()\r\n      xhh.open('get', url)\r\n      xhh.setRequestHeader('Authorization', getToken())\r\n      xhh.setRequestHeader('Content-Type', 'application/json')\r\n      xhh.responseType = 'blob'\r\n      xhh.onload = function() {\r\n        const blob = this.response\r\n        var filename = name\r\n        var a = document.createElement('a')\r\n        var new_url = window.URL.createObjectURL(blob)\r\n        a.href = new_url\r\n        a.download = filename\r\n        var body = document.getElementsByTagName('body')[0]\r\n        body.appendChild(a)\r\n        a.click()\r\n        body.removeChild(a)\r\n        window.URL.revokeObjectURL(new_url)\r\n      }\r\n      xhh.send()\r\n    }\r\n  }\r\n}\r\n",null]}