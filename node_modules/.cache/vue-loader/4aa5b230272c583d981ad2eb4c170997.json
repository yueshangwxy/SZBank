{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\pncui-workflow\\src\\views\\activiti\\todolist.vue?vue&type=template&id=30281b33&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\pncui-workflow\\src\\views\\activiti\\todolist.vue","mtime":1649224873919},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649224862071},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1649224877946},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649224862071},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1649224877943}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"app-container\" },\n    [\n      _c(\"div\", { staticClass: \"head-container\" }, [\n        _c(\n          \"div\",\n          [\n            _c(\n              \"el-tabs\",\n              {\n                on: { \"tab-click\": _vm.refresh },\n                model: {\n                  value: _vm.query.type,\n                  callback: function($$v) {\n                    _vm.$set(_vm.query, \"type\", $$v)\n                  },\n                  expression: \"query.type\"\n                }\n              },\n              [\n                _c(\"el-tab-pane\", {\n                  directives: [\n                    {\n                      name: \"permission\",\n                      rawName: \"v-permission\",\n                      value: [\"myTask:all\"],\n                      expression: \"['myTask:all']\"\n                    }\n                  ],\n                  attrs: { label: \"所有任务\", name: \"0\" }\n                }),\n                _vm._v(\" \"),\n                _c(\"el-tab-pane\", { attrs: { label: \"待办任务\", name: \"1\" } }),\n                _vm._v(\" \"),\n                _c(\"el-tab-pane\", { attrs: { label: \"已完成\", name: \"4\" } }),\n                _vm._v(\" \"),\n                _c(\"el-tab-pane\", { attrs: { label: \"进行中\", name: \"5\" } })\n              ],\n              1\n            )\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          [\n            _c(\n              \"el-form\",\n              { attrs: { inline: \"\" } },\n              [\n                _c(\n                  \"el-form-item\",\n                  { attrs: { label: \"类型\", prop: \"processId\" } },\n                  [\n                    _c(\n                      \"el-select\",\n                      {\n                        staticClass: \"filter-item\",\n                        staticStyle: { width: \"150px\" },\n                        on: { change: _vm.refresh },\n                        model: {\n                          value: _vm.query.processId,\n                          callback: function($$v) {\n                            _vm.$set(_vm.query, \"processId\", $$v)\n                          },\n                          expression: \"query.processId\"\n                        }\n                      },\n                      [\n                        _c(\"el-option\", {\n                          attrs: { value: \"\", label: \"全部\" }\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.dict[\"PROCESS_ID\"], function(item) {\n                          return _c(\"el-option\", {\n                            key: item.id,\n                            attrs: { label: item.label, value: item.value }\n                          })\n                        })\n                      ],\n                      2\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  { attrs: { label: \"名称\", prop: \"processName\" } },\n                  [\n                    _c(\"el-input\", {\n                      staticClass: \"filter-item\",\n                      staticStyle: { width: \"180px\" },\n                      attrs: { placeholder: \"请输入任务名称\", clearable: \"\" },\n                      nativeOn: {\n                        keyup: function($event) {\n                          if (\n                            !$event.type.indexOf(\"key\") &&\n                            _vm._k(\n                              $event.keyCode,\n                              \"enter\",\n                              13,\n                              $event.key,\n                              \"Enter\"\n                            )\n                          ) {\n                            return null\n                          }\n                          return _vm.refresh($event)\n                        }\n                      },\n                      model: {\n                        value: _vm.query.processName,\n                        callback: function($$v) {\n                          _vm.$set(_vm.query, \"processName\", $$v)\n                        },\n                        expression: \"query.processName\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  { attrs: { label: \"创建人\", prop: \"starter\" } },\n                  [\n                    _c(\"el-input\", {\n                      staticClass: \"filter-item\",\n                      staticStyle: { width: \"180px\" },\n                      attrs: { placeholder: \"请输入创建人\", clearable: \"\" },\n                      nativeOn: {\n                        keyup: function($event) {\n                          if (\n                            !$event.type.indexOf(\"key\") &&\n                            _vm._k(\n                              $event.keyCode,\n                              \"enter\",\n                              13,\n                              $event.key,\n                              \"Enter\"\n                            )\n                          ) {\n                            return null\n                          }\n                          return _vm.refresh($event)\n                        }\n                      },\n                      model: {\n                        value: _vm.query.starter,\n                        callback: function($$v) {\n                          _vm.$set(_vm.query, \"starter\", $$v)\n                        },\n                        expression: \"query.starter\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-button\",\n                  {\n                    staticClass: \"filter-item\",\n                    attrs: { type: \"success\", icon: \"el-icon-search\" },\n                    on: { click: _vm.refresh }\n                  },\n                  [_vm._v(\"搜索\")]\n                )\n              ],\n              1\n            )\n          ],\n          1\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"el-table\",\n        {\n          directives: [\n            {\n              name: \"loading\",\n              rawName: \"v-loading\",\n              value: _vm.loading,\n              expression: \"loading\"\n            }\n          ],\n          ref: \"table\",\n          staticStyle: { width: \"100%\" },\n          attrs: { data: _vm.rows }\n        },\n        [\n          _c(\"el-table-column\", {\n            attrs: { prop: \"businessKey\", label: \"编号\", width: \"120px\" }\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: { label: \"名称\", \"show-overflow-tooltip\": \"\" },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(scope) {\n                  return [\n                    _c(\n                      \"el-tooltip\",\n                      { attrs: { content: scope.row.taskName } },\n                      [\n                        _vm.query.type == \"1\"\n                          ? _c(\n                              \"el-link\",\n                              {\n                                on: {\n                                  click: function($event) {\n                                    return _vm.doProcess(scope.row)\n                                  }\n                                }\n                              },\n                              [_vm._v(_vm._s(scope.row[\"businessName\"]))]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.query.type != \"1\"\n                          ? _c(\"span\", [\n                              _vm._v(_vm._s(scope.row[\"businessName\"]))\n                            ])\n                          : _vm._e()\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: { label: \"类型\" },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(scope) {\n                  return [\n                    _vm._v(\n                      \"\\n        \" +\n                        _vm._s(\n                          _vm.dict.label[\"PROCESS_ID\"][scope.row.processId]\n                        ) +\n                        \"\\n      \"\n                    )\n                  ]\n                }\n              }\n            ])\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: { label: \"创建人\" },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(scope) {\n                  return [\n                    _c(\n                      \"el-tooltip\",\n                      { attrs: { content: scope.row.starter } },\n                      [_c(\"span\", [_vm._v(_vm._s(scope.row.starterName))])]\n                    )\n                  ]\n                }\n              }\n            ])\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: { label: \"处理人\", \"show-overflow-tooltip\": \"\" },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(scope) {\n                  return [\n                    _c(\n                      \"el-tooltip\",\n                      { attrs: { content: scope.row.taskAssignee } },\n                      [_c(\"span\", [_vm._v(_vm._s(scope.row.assigneeName))])]\n                    )\n                  ]\n                }\n              }\n            ])\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: {\n              prop: \"startDate\",\n              label: \"开始时间\",\n              formatter: _vm.timeColumnFormat\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            attrs: {\n              prop: \"endDate\",\n              label: \"结束时间\",\n              formatter: _vm.timeColumnFormat\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\"el-table-column\", {\n            directives: [\n              {\n                name: \"permission\",\n                rawName: \"v-permission\",\n                value: [\"task:process\"],\n                expression: \"['task:process']\"\n              }\n            ],\n            attrs: {\n              label: \"操作\",\n              width: \"60\",\n              align: \"center\",\n              fixed: \"right\"\n            },\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(scope) {\n                  return [\n                    _c(\n                      \"el-tooltip\",\n                      { attrs: { content: \"流程图\" } },\n                      [\n                        _c(\"el-button\", {\n                          attrs: {\n                            type: \"text\",\n                            icon: \"el-icon-picture\",\n                            permission: \"['instance:image']\"\n                          },\n                          on: {\n                            click: function($event) {\n                              return _vm.viewImage(scope.row)\n                            }\n                          }\n                        })\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"el-pagination\", {\n        staticStyle: { \"margin-top\": \"8px\" },\n        attrs: {\n          \"page-size\": _vm.page.size,\n          total: _vm.page.total,\n          \"current-page\": _vm.page.page,\n          layout: \"total, prev, pager, next, sizes\"\n        },\n        on: {\n          \"update:pageSize\": function($event) {\n            return _vm.$set(_vm.page, \"size\", $event)\n          },\n          \"update:page-size\": function($event) {\n            return _vm.$set(_vm.page, \"size\", $event)\n          },\n          \"update:currentPage\": function($event) {\n            return _vm.$set(_vm.page, \"page\", $event)\n          },\n          \"update:current-page\": function($event) {\n            return _vm.$set(_vm.page, \"page\", $event)\n          },\n          \"size-change\": function($event) {\n            return _vm.sizeChangeHandler($event)\n          },\n          \"current-change\": _vm.pageChangeHandler\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: {\n            \"append-to-body\": \"\",\n            \"close-on-click-modal\": false,\n            visible: _vm.showImage,\n            title: \"流程图\",\n            width: \"90%\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.showImage = $event\n            }\n          }\n        },\n        [\n          _c(\"flow-image\", {\n            attrs: {\n              height: \"400px\",\n              width: \"80vw\",\n              \"process-instance-id\": _vm.current.processInstanceId,\n              \"process-definition-id\": _vm.current.processDefinitionId\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\"Processes\", {\n            attrs: { \"process-instance-id\": _vm.current.processInstanceId }\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: {\n            \"append-to-body\": \"\",\n            \"close-on-click-modal\": false,\n            visible: _vm.startFlow,\n            title: \"处理任务\",\n            width: \"500px\",\n            height: \"250px\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.startFlow = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              ref: \"form\",\n              attrs: { inline: true, model: _vm.form, \"label-width\": \"90px\" }\n            },\n            [\n              _vm.isAssign\n                ? _c(\n                    \"el-form-item\",\n                    { attrs: { label: \"接收人\", prop: \"assignee\" } },\n                    [\n                      _c(\n                        \"el-select\",\n                        {\n                          staticStyle: { width: \"350px\" },\n                          model: {\n                            value: _vm.form.assignee,\n                            callback: function($$v) {\n                              _vm.$set(_vm.form, \"assignee\", $$v)\n                            },\n                            expression: \"form.assignee\"\n                          }\n                        },\n                        _vm._l(_vm.users, function(item) {\n                          return _c(\"el-option\", {\n                            attrs: {\n                              value: item.username,\n                              disabled: \"item.username==user().username\",\n                              label: item.nickName\n                            }\n                          })\n                        }),\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _vm._v(\" \"),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"意见\", prop: \"businessKey\" } },\n                [\n                  _c(\"el-input\", {\n                    staticStyle: { width: \"350px\" },\n                    attrs: { type: \"textarea\", placeholder: \"请输入意见\" },\n                    model: {\n                      value: _vm.form.comment,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form, \"comment\", $$v)\n                      },\n                      expression: \"form.comment\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _vm._v(\" \"),\n              !_vm.isAssign\n                ? _c(\n                    \"el-form-item\",\n                    { attrs: { label: \"参数\", prop: \"parameter\" } },\n                    [\n                      _c(\"el-input\", {\n                        staticStyle: { width: \"350px\" },\n                        attrs: {\n                          type: \"textarea\",\n                          placeholder: \"请输入参数(JSON)\"\n                        },\n                        model: {\n                          value: _vm.form.parameter,\n                          callback: function($$v) {\n                            _vm.$set(_vm.form, \"parameter\", $$v)\n                          },\n                          expression: \"form.parameter\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  attrs: { type: \"text\" },\n                  on: {\n                    click: function($event) {\n                      _vm.startFlow = false\n                    }\n                  }\n                },\n                [_vm._v(\"取消\")]\n              ),\n              _vm._v(\" \"),\n              !_vm.isAssign\n                ? _c(\n                    \"el-button\",\n                    {\n                      attrs: { type: \"primary\" },\n                      on: { click: _vm.doProcess }\n                    },\n                    [_vm._v(\"完成\")]\n                  )\n                : _vm._e(),\n              _vm._v(\" \"),\n              _vm.isAssign\n                ? _c(\n                    \"el-button\",\n                    {\n                      attrs: { type: \"primary\" },\n                      on: { click: _vm.doAssignee }\n                    },\n                    [_vm._v(\"确定\")]\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}