{"remainingRequest":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\atom\\dimension\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\atom\\dimension\\index.vue","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\Indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CRUD,{crud} from '@crud/crud'\nexport default {\n  name: 'IndAtomDimension',\n  components: {},\n  mixins: [],\n  dicts: ['DIM_TYPE', 'DIM_FLAG'],\n  props: {\n    atomDimensionDis: { type: Boolean, default: false },\n    bizTabCodeDis: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      atomDimensions: [],\n      dimensions: [],\n      keepHistory: '0',\n      selectListRow: [],\n      dimensionDialog: false,\n      dimDisplay: '',\n      bizTabCode: null,\n      colCodes: [],\n      title: '',\n      permission: {\n        add: ['admin', 'indAtomDimension:add'],\n        edit: ['admin', 'indAtomDimension:edit'],\n        del: ['admin', 'indAtomDimension:del']\n      },\n      rules: {}\n    }\n  },\n  watch: {\n    atomDimensions: {\n      handler(newName, oldName) {\n        this.colCodes.some((colCode)=>{\n          colCode.dis = false\n          this.atomDimensions.some((atomDim)=>{\n            if(colCode.columnName===atomDim.colCode){\n              colCode.dis = true\n            }\n          })\n        })\n      },\n      deep: true\n    }\n  },\n  methods: {\n    // 获取数据前设置好接口地址\n     [CRUD.HOOK.beforeRefresh]() {\n       console.log(this.props.bizTabCodeDis,'bizTabCodeDis')\n       return true\n     },\n    /* indexMethod(a){\n      console.log(a,'val')\n    },*/\n    // 获取表格选中时的数据\n    selectRow(val) {\n      this.selectListRow = val\n    },\n    changeRemarkByColCode(item) {\n      this.colCodes.some((colCode) => {\n        if (colCode.columnName === item.colCode) {\n          item.remark = colCode.columnDesc\n         /* if(colCode.dis===true){\n            colCode.dis = false\n          }else{\n            colCode.dis = true\n          }*/\n      }\n      })\n    },\n    // 点击确定按钮向父页面传维度数据\n    dimClickHandle() {\n      const atomDimension = []\n      let dimType = 0\n      let dimTypeM = 0\n      let dimTypeB = 0\n      let dimTypeP = 0\n      let dimColeN = 0\n      for (let i = 0; i < this.atomDimensions.length; i++) {\n        if (this.atomDimensions[i].dimType === 'D' && this.atomDimensions[i].dimCode === null) {\n          this.$message('类型为维度时 必须选择维度编号')\n          return false\n        }\n        this.dimensions.some((item) => {\n          if (item.dimCode === this.atomDimensions[i].dimCode) {\n            this.atomDimensions[i].dimDesc = item.dimName\n          }\n        })\n        var newValue = {\n          id: this.atomDimensions[i].id,\n          dimType: this.atomDimensions[i].dimType,\n          dimCode: this.atomDimensions[i].dimCode,\n          dimDesc: this.atomDimensions[i].dimDesc,\n          dimFlag: this.atomDimensions[i].dimFlag,\n          colCode: this.atomDimensions[i].colCode,\n          defaultCode: this.atomDimensions[i].defaultCode,\n          sourceCol: this.atomDimensions[i].sourceCol,\n          remark: this.atomDimensions[i].remark,\n          dimSeq: this.atomDimensions[i].dimSeq\n        }\n        if (this.atomDimensions[i].dimType === 'M') {\n          dimTypeM++\n        }\n        if (this.atomDimensions[i].dimType === 'B') {\n          dimTypeB++\n        }\n        if (this.atomDimensions[i].dimType === 'P') {\n          dimTypeP++\n        }\n        if (this.atomDimensions[i].dimType !== null && this.atomDimensions[i].colCode === null) {\n          dimColeN++\n        }\n        if (this.atomDimensions[i].dimType !== null) {\n          atomDimension.push(newValue)\n        }else{\n          dimType++\n        }\n      }\n      if(dimType==0){\n      if (dimColeN === 0) {\n      if (dimTypeM > 0) {\n        if (dimTypeB > 0) {\n          if (this.keepHistory === '1' && dimTypeP === 0) {\n            this.$message('保留历史时 必须选择一个日期')\n          } else {\n            this.$emit('func', atomDimension)\n            this.dimensionDialog = false\n          }\n        } else {\n          this.$message('类型必须有一个是指标编号')\n        }\n      } else {\n        this.$message('类型至少有一个是度量')\n      }\n    } else {\n        this.$message('表列名不能为空')\n      }\n      }else {\n        this.$message('类型不能为空')\n      }\n    },\n    // 增加行\n    addRow() {\n      var list = {\n        dimCode: this.dimCode,\n        dimDesc: this.dimDesc,\n        dimType: this.dimType,\n        dimFlag: this.dimFlag,\n        defaultCode: this.defaultCode,\n        sourceCol: this.sourceCol,\n        colCode: this.colCode,\n        remark: this.remark\n      }\n      this.atomDimensions.unshift(list)\n      console.log(this.bizTabCode)\n    },\n    // 删除方法 删除选中行\n    delData() {\n      /* for (let i = 0; i < this.selectlistRow.length; i++) {*/\n      const atomRows = this.selectListRow\n      const atomDs = this.atomDimensions\n      for (let i = 0; i < atomRows.length; i++) {\n        for (let j = 0; j < atomDs.length; j++) {\n          if (atomRows[i] === atomDs[j]) {\n            this.atomDimensions.splice(j, 1)\n          }\n        }\n      }\n      this.atomDimensions.clearSelection()\n    }\n  }\n}\n",null]}