{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\workflow\\graphConfigDEL.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\workflow\\graphConfigDEL.vue","mtime":1638179658872},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Graph } from '@antv/x6';\nimport { Addon } from '@antv/x6';\nimport { Shape } from '@antv/x6';\nimport $ from 'jquery';\nimport { handleCustomNode,loadDept,loadPosi,loadGraph,pubGraph } from '@/api/workflow/graphConfig'\n\n\nexport default {\n    name: \"graphConfig\",\n    //components: {pagination,  crudOperation,  rrOperation, Treeselect},\n    //mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n    data () {\n        return {\n            type: false,\n            graph: null,\n            ports: null,\n            stencil: null,\n            elementArr: new Array(),\n            tmpView: null,\n            optType: null, //1:add,2:modify\n            baseUrl: '',\n            graphParam: new Object(),\n            dept: '',\n            posi: '',\n            deptOptions: [],\n            posiOptions: [],\n            dialogFormVisible: false\n        }\n    },\n    mounted() {\n        if(!this.queryMenuType()){\n            return;\n        }\n        \n        this.initAll();\n        \n    },\n    methods : {\n        //获取菜单参数\n        queryMenuType(){\n            this.type = this.$route.query.type;\n            if(!this.type || (this.type!='ZB_ADD' && this.type!='ZB_DEL' && this.type!='ZB_UPD')){\n                this.$message.error('菜单配置有误'); \n                return false;\n            }\n            return true;\n        },\n        initAll(){\n            //初始化流程图参数\n            this.initGraph();\n            //初始化连接点\n            this.initPorts();\n            //初始化自定义图形\n            this.defineElement();\n\n            //初始化拖拽栏\n            this.initStencil();\n            //加载基本元素到拖拽组件1中\n            this.loadStencilGroup1();\n            //加载基本元素到拖拽组件2中\n            this.loadStencilGroup2();\n\n            //绑定鼠标事件\n            this.bindMouseEvent();\n            //加载已有流程图\n            this.loadGraph();\n\n            //初始化部门岗位\n            this.initDeptPosition();\n        },\n        showAdd(){\n            this.dept='';\n            this.posi='';\n            this.optType = 1;\n            this.dialogFormVisible = true;\n        },\n        checkExistsNodeCount(deptId, posiId){\n            var count = 0;\n            $.each(this.elementArr,function(idx, item){\n                if(item.store.data.dept_id == deptId && item.store.data.posi_id == posiId){\n                    count++;\n                }\n            });\n            return count;\n        },\n        createStencilNode(id, label, deptId, posiId){\n            var node = this.graph.createNode({\n            shape: 'custom-rect',\n            label: label,\n            id: id,\n            dept_id: deptId,\n            posi_id: posiId,\n            tools: [\n                {\n                name: 'button',\n                args: {\n                    markup:  [\n                    {\n                        tagName: 'rect',\n                        selector: 'button',\n                        attrs: {\n                        x: -12,\n                        y: -8,\n                        width: 25,\n                        height: 15,\n                        stroke: '#DC3545',\n                        'stroke-width': 1,\n                        fill: 'white',\n                        cursor: 'pointer'\n                        }\n                    },\n                    {\n                        tagName: 'text',\n                        textContent: '删除',\n                        selector: 'icon',\n                        attrs: {\n                        fill: '#DC3545',\n                        'font-size': 10,\n                        'text-anchor': 'middle',\n                        'pointer-events': 'none',\n                        y: '0.3em'\n                        }\n                    }\n                    ],\n                    x: '100%',\n                    y: '100%',\n                    offset: { x: -50, y: -50 },\n                    onClick({ view }) { \n                        showDelete(view);\n                    },\n                }\n            },\n                {\n                name: 'button',\n                args: {\n                    markup:  [\n                    {\n                        tagName: 'rect',\n                        selector: 'button',\n                        attrs: {\n                        x: -12,\n                        y: -8,\n                        width: 25,\n                        height: 15,\n                        stroke: '#DC3545',\n                        'stroke-width': 1,\n                        fill: 'white',\n                        cursor: 'pointer',\n                        },\n                    },\n                    {\n                        tagName: 'text',\n                        textContent: '修改',\n                        selector: 'icon',\n                        attrs: {\n                        fill: '#DC3545',\n                        'font-size': 10,\n                        'text-anchor': 'middle',\n                        'pointer-events': 'none',\n                        y: '0.3em',\n                        },\n                    },\n                    ],\n                    x: '100%',\n                    y: '100%',\n                    offset: { x: -21, y: -50 },\n                    onClick({ view }) {\n                        showModify(view);\n                    }\n                },\n                }\n            ]\n            });\n            return node;\n        },\n        delNode(cell){\n            const nodes = this.graph.getNodes();\n            for (let i = nodes.length -1; i >= 0; i--) {\n                if(nodes[i].store.data.dept_id == cell.store.data.dept_id && nodes[i].store.data.posi_id == cell.store.data.posi_id){\n                    this.graph.removeNode(nodes[i]);\n                }\n            }\n            for(let i=0; i<this.elementArr.length; i++){\n                if(this.elementArr[i].id == cell.id){\n                    this.elementArr.splice(i,1);\n                    break;\n                }\n            }\n        },\n        showPorts(ports, show){\n            for (let i = 0, len = ports.length; i < len; i = i + 1) {\n                ports[i].style.visibility = show ? 'visible' : 'hidden';\n            }\n        },\n        initDeptPosition(){\n            loadDept().then(data => {\n                this.deptOptions = [];\n                this.parseDept(data.content);\n            });\n            loadPosi().then(data => {\n                this.posiOptions = [];\n                this.parsePosi(data.content);\n            });\n        },\n        initStencil(){\n            this.stencil = new Addon.Stencil({\n                target: this.graph,\n                groups: [\n                {\n                    title: '基础节点',\n                    name: 'group1',\n                    graphHeight: 180,\n                    layoutOptions: {\n                    rowHeight: 80,\n                    },\n                },\n                {\n                    title: '自定义节点',\n                    name: 'group2',\n                    graphHeight: 520,\n                    layoutOptions: {\n                    rowHeight: 80\n                    },\t\n                }\n                ],\n                stencilGraphWidth: 370,\n                //stencilGraphHeight: 600,\n                layoutOptions: {\n                    columns: 2,\n                    columnWidth: 175,\n                    rowHeight: 80,\n                },\n            });\n\n            $(\"#stencilContainer\").empty();\n            document.getElementById('stencilContainer').appendChild(this.stencil.container);\n\n            //添加按钮\n            var btnAdd = '<div style=\"position:absolute;top:4px;left:125px;z-index:10;\">'+\n                            '<button type=\"button\" id=\"btnAdd\" onclick=\"showAdd()\">添加</button>'+\n                        '</div>';\n            $(\"#stencilContainer div.x6-widget-stencil-group:last\").css(\"position\",\"relative\").append(btnAdd);\n        },\n        defineElement(){\n            Graph.registerNode(\n            'custom-polygon',\n            {\n                inherit: 'polygon',\n                width: 90,\n                height: 50,\n                attrs: {\n                body: {\n                    strokeWidth: 1,\n                    stroke: '#5F95FF',\n                    fill: '#EFF4FF',\n                    refPoints: '0,10 10,0 20,10 10,20'\n                },\n                text: {\n                    fontSize: 12,\n                    fill: '#262626',\n                },\n                },\n                ports: {\n                ...this.ports,\n                items: [\n                    {\n                    group: 'top',\n                    },\n                    {\n                    group: 'bottom',\n                    },\n                    {\n                    group: 'left',\n                    },\n                    {\n                    group: 'right',\n                    },\n                ],\n                },\n            },\n            true,\n            );\n\n            Graph.registerNode(\n            'custom-rect',\n            {\n                inherit: 'rect',\n                width: 150,\n                height: 50,\n                attrs: {\n                body: {\n                    strokeWidth: 1,\n                    stroke: '#5F95FF',\n                    fill: '#EFF4FF'\n                },\n                text: {\n                    fontSize: 12,\n                    fill: '#262626',\n                },\n                },\n                ports: { ...this.ports },\n            },\n            true,\n            );\n\n            Graph.registerNode(\n            'custom-circle',\n            {\n                inherit: 'circle',\n                width: 50,\n                height: 50,\n                attrs: {\n                body: {\n                    strokeWidth: 1,\n                    stroke: '#5F95FF',\n                    fill: '#EFF4FF',\n                },\n                text: {\n                    fontSize: 12,\n                    fill: '#262626',\n                },\n                },\n                ports: { ...this.ports },\n            },\n            true,\n            );\n        },\n        initGraph(){\n            this.graph = new Graph({\n                container: document.getElementById('canvasContainer'),\n                width: 720,\n                height: 600,\n                grid: true,\n                scroller: true,\n                connecting: {\n                    router: 'manhattan',\n                    connector: {\n                    name: 'rounded',\n                    args: {\n                        radius: 8,\n                    },\n                    },\n                    anchor: 'center',\n                    connectionPoint: 'anchor',\n                    allowBlank: false,\n                    snap: {\n                    radius: 20,\n                    },\n                    createEdge() {\n                    return new Shape.Edge({\n                        attrs: {\n                        line: {\n                            stroke: '#A2B1C3',\n                            strokeWidth: 2,\n                            targetMarker: {\n                            name: 'block',\n                            width: 12,\n                            height: 8,\n                            },\n                        },\n                        },\n                        zIndex: 0,\n                    })\n                    },\n                    validateConnection({ targetMagnet }) {\n                        return !!targetMagnet\n                    },\n                },\n                highlighting: {\n                    magnetAdsorbed: {\n                    name: 'stroke',\n                    args: {\n                        attrs: {\n                        fill: '#5F95FF',\n                        stroke: '#5F95FF',\n                        },\n                    },\n                    },\n                },\n                resizing: false,\n                rotating: false,\n                selecting: {\n                    enabled: false,\n                    rubberband: true,\n                    showNodeSelectionBox: true,\n                },\n                snapline: true,\n                keyboard: true,\n                clipboard: true\n            });\n        },\n        initPorts(){\n            this.ports = {\n                groups: {\n                    top: {\n                    position: 'top',\n                    attrs: {\n                        circle: {\n                        r: 4,\n                        magnet: true,\n                        stroke: '#5F95FF',\n                        strokeWidth: 1,\n                        fill: '#fff',\n                        style: {\n                            visibility: 'hidden'\n                        }\n                        }\n                    }\n                },\n                right: {\n                position: 'right',\n                attrs: {\n                    circle: {\n                    r: 4,\n                    magnet: true,\n                    stroke: '#5F95FF',\n                    strokeWidth: 1,\n                    fill: '#fff',\n                    style: {\n                        visibility: 'hidden'\n                    }\n                    }\n                }\n                },\n                bottom: {\n                position: 'bottom',\n                attrs: {\n                    circle: {\n                    r: 4,\n                    magnet: true,\n                    stroke: '#5F95FF',\n                    strokeWidth: 1,\n                    fill: '#fff',\n                    style: {\n                        visibility: 'hidden'\n                    }\n                    }\n                }\n                },\n                left: {\n                position: 'left',\n                attrs: {\n                    circle: {\n                    r: 4,\n                    magnet: true,\n                    stroke: '#5F95FF',\n                    strokeWidth: 1,\n                    fill: '#fff',\n                    style: {\n                        visibility: 'hidden'\n                    }\n                    }\n                }\n                }\n            },\n            items: [\n                {\n                group: 'top',\n                },\n                {\n                group: 'right',\n                },\n                {\n                group: 'bottom',\n                },\n                {\n                group: 'left'\n                }\n            ]\n            };\n        },\n        loadGraph(){\n            var param = 'procKey='+this.type;\n            loadGraph(param).then(data=>{\n                this.graphParam = new Object();\n                if(!$.isArray(data) || data.length == 0){\n                    return;\n                }\n                this.graphParam.id = data[0].id;\n                this.graphParam.rev = data[0].rev;\n                this.graphParam.procKey = data[0].procKey;\n                this.graph.fromJSON(JSON.parse(data[0].defByte));\n            });\n        },\n        loadStencilGroup1(){\n            const start = this.graph.createNode({\n                shape: 'custom-circle',\n                label: 'Start',\n                attrs: {\n                    body: {\n                        strokeWidth: 1,\n                        stroke: '#5F95FF',\n                        fill: '#EFF4FF'\n                    }\n                }\n                });\n\n            const end = this.graph.createNode({\n                shape: 'custom-circle',\n                label: 'End',\n                attrs: {\n                    body: {\n                        strokeWidth: 1,\n                        stroke: '#5F95FF',\n                        fill: 'lightgrey'\n                    }\n                }\n                });\n\n            const countersignStart = this.graph.createNode({\n                shape: 'custom-polygon',\n                label: '会签开始'\n                });\n\n            const countersignEnd = this.graph.createNode({\n                shape: 'custom-polygon',\n                label: '会签结束',\n                attrs: {\n                    body: {\n                        strokeWidth: 1,\n                        stroke: '#5F95FF',\n                        fill: 'lightgrey'\n                    }\n                }\n                });\n            this.stencil.load([start, countersignStart, end, countersignEnd], 'group1');\n        },\n        loadStencilGroup2(){\n            var param = 'type=QUERY&procKey='+this.type;\n            handleCustomNode(param).then(data => {\n                if(!data || data.code!=\"0000\"){\n                    this.$message.warning('加载自定义节点失败');\n                    return;\n                }\n                this.elementArr = new Array();\n                if(data.data && data.data.length>0){\n                    for(let i=0;i<data.data.length;i++){\n                        this.elementArr.push(this.createStencilNode(data.data[i].id, data.data[i].deptName+\"-\"+data.data[i].postName, data.data[i].deptCode, data.data[i].postCode));\n                    }\n                }\n                this.stencil.load(this.elementArr, 'group2');\n            });\n        },\n        refreshStencilGroup2(){\n            this.initStencil();\n            this.loadStencilGroup1();\n            this.stencil.load(this.elementArr, 'group2');\n        },\n        bindMouseEvent(){\n            this.graph.on('node:mouseenter', () => {\n                const container = document.getElementById('canvasContainer');\n                const ports = container.querySelectorAll('.x6-port-body');\n                this.showPorts(ports, true);\n            });\n\n            this.graph.on('node:mouseleave', () => {\n                const container = document.getElementById('canvasContainer');\n                const ports = container.querySelectorAll('.x6-port-body');\n                this.showPorts(ports, false);\n            });\n\n            //tools\n            this.graph.on('cell:mouseenter', ({ cell }) => {\n                var offsetWidth = 0;\n                var offsetHeight = 0;\n                if (cell.isNode()) {\n                    if(cell.store.data.shape == 'custom-polygon'){\n                        offsetWidth = cell.store.data.size.width - 20;\n                        offsetHeight = cell.store.data.size.height/2 - 10;\n                    }else{\n                        offsetWidth = cell.store.data.size.width;\n                        offsetHeight = 8;\n                    }\n                }\n\n                cell.addTools([{\n                    name: 'button-remove',\n                    args: {\n                    x: 0,\n                    y: 0,\n                    offset: { x: offsetWidth, y: offsetHeight }\n                    }\n                }\n                ]);\n            });\n\n            this.graph.on('cell:mouseleave', ({ cell }) => {\n                cell.removeTools();\n            });\n        },\n        parseDept(deptArr){\n            if(!$.isArray(deptArr)){\n                return;\n            }\n            let obj=null;\n            for(let i=0;i<deptArr.length;i++){\n                if(deptArr[i].enabled){\n                    obj = new Object();\n                    obj.value = deptArr[i].id;\n                    obj.label = deptArr[i].name;\n                    this.deptOptions.push(obj);\n                }\n                this.parseDept(deptArr[i].children);\n            }\n        },\n        parsePosi(posiArr){\n            if(!$.isArray(posiArr)){\n                return;\n            }\n            var obj = null;\n            for(let i=0; i<posiArr.length; i++){\n                if(posiArr[i].enabled){\n                    obj = new Object();\n                    obj.value = posiArr[i].id;\n                    obj.label = posiArr[i].name;\n                    this.posiOptions.push(obj);\n                }\n            };\n        },\n        //确认添加/修改\n        confirmAdd(){\n            const newDeptId = this.dept;\n            const newPosiId = this.posi;\n            if(newDeptId == '' || newDeptId == null || newPosiId == '' || newPosiId == null){\n                this.$message.warning('请选择部门和职位');\n                return;\n            }\n\n            const count = this.checkExistsNodeCount(newDeptId, newPosiId);\n            const newLabel = this.findLabel(this.deptOptions, newDeptId) + \"-\" + this.findLabel(this.posiOptions, newPosiId);\n\n            //添加\n            if(this.optType == 1){\n                if(count > 0){\n                    this.$message.warning('您选择的部门和职位已存在');\n                    return;\n                }\n\n                let param = 'type=ADD&procKey='+ this.type + '&deptCode='+newDeptId + '&deptName=' + this.findLabel(this.deptOptions, newDeptId) +\n                    '&postCode=' + newPosiId + '&postName=' + this.findLabel(this.posiOptions, newPosiId);\n                handleCustomNode(param).then(data=>{\n                    this.dialogFormVisible = false;\n                    if(!data || data.code!=\"0000\"){\n                        this.$message.error(data.msg);\n                        return;\n                    }\n                    this.elementArr.push(this.createStencilNode(data.id, newLabel, newDeptId, newPosiId));\n                    this.refreshStencilGroup2();\n                    this.$message.success('节点添加成功');\n                });\n                return;\n            }\n            \n            //修改\n            if(this.optType == 2){\n                var cell = this.tmpView.cell;\n                const oldDeptId = cell.store.data.dept_id;\n                const oldPosiId = cell.store.data.posi_id;\n                if(newDeptId == oldDeptId && newPosiId == oldPosiId){\n                    this.$message.warning('您选择的部门和职位已存在');\n                    return;\n                }\n                if(count > 0){\n                    this.$message.warning('您选择的部门和职位已存在');\n                    return;\n                }\n                \n                let param = 'type=UPD&procKey='+ this.type + '&deptCode='+newDeptId + '&deptName=' + this.findLabel(this.deptOptions, newDeptId) +\n                    '&postCode=' + newPosiId + '&postName=' + this.findLabel(this.posiOptions, newPosiId) + '&id=' + cell.id;\n                handleCustomNode(param).then(data=>{\n                    this.dialogFormVisible = false;\n                    if(!data || data.code!=\"0000\"){\n                        this.$message.error(data.msg);\n                        return;\n                    }\n                     //处理流程图中的节点\n                    const nodes = this.graph.getNodes();\n                    for (let i = nodes.length -1; i >= 0; i--) {\n                        if(nodes[i].store.data.shape != \"custom-rect\"){\n                            continue;\n                        }\n                        if(nodes[i].store.data.dept_id == oldDeptId && nodes[i].store.data.posi_id == oldPosiId){\n                            nodes[i].store.data.dept_id = newDeptId;\n                            nodes[i].store.data.posi_id = newPosiId;\n                            nodes[i].label = newLabel;\n                        }\n                    }\n                    //处理数组中的节点\n                    for(let i=0;i<this.elementArr.length;i++){\n                        if(this.elementArr[i].id == cell.id){\n                            this.elementArr[i].store.data.dept_id = newDeptId;\n                            this.elementArr[i].store.data.posi_id = newPosiId;\n                            this.elementArr[i].label = newLabel;\n                        }\n                    }\n                        \n                    //刷新group2\n                    this.refreshStencilGroup2();\n                    this.$message.success('节点修改成功');\n                });\n            }\n        },\n        //确认删除\n        confirmDel(){\n            var cell = this.tmpView.cell;\n            const param = 'type=DEL&procKey=' + this.type + '&id=' + cell.id;\n            handleCustomNode(param).then(data => {\n                this.dialogFormVisible = false;\n                if(!data || data.code!=\"0000\"){\n                    this.$message.error(data.msg);\n                    return;\n                }\n                this.delNode(cell);\n                cell.removeTools();\n                cell.remove();\n                this.refreshStencilGroup2();\n                this.$message.success('节点删除成功');\n            });\n        },\n        showModify(view){\n            this.tmpView = view;\n            this.dept = view.cell.store.data.dept_id;\n            this.posi = view.cell.store.data.posi_id;\n            this.optType = 2;\n            this.dialogFormVisible = true;\n        },\n        showDelete(view){\n            this.tmpView = view;\n            this.$confirm('确认删除该自定义节点吗？', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                this.confirmDel();\n            });\n        },\n        findLabel(arr, id){\n            return arr.find((item) => item.value == id).label;\n        },\n        pubGraph(){\n            var json = this.graph.toJSON();\n            this.graphParam.status = \"1\";\n            this.graphParam.procKey = this.type;\n            this.graphParam.name = this.type == 'ZB_ADD'? '指标新增流程':(this.type == 'ZB_UPD'?'指标修改流程':'指标删除流程');\n            this.graphParam.defByte = JSON.stringify(json);\n\n            pubGraph(this.graphParam).then(data=>{\n                 if(!data || data.code!=\"0000\"){\n                    this.$message.error(data.msg);\n                    return;\n                }\n                this.$message.success('发布成功');\n                this.loadGraph();\n            });\n        }\n    },\n    created() {\n        window.showAdd = this.showAdd;\n        window.showModify = this.showModify;\n        window.showDelete = this.showDelete;\n    }\n}\n",null]}