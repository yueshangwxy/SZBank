{"remainingRequest":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\limitRulePage.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\src\\views\\indicators\\indicator\\base\\limitRulePage.vue","mtime":1646633727698},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getKeyValueByDimCode} from '../../../../api/indicators/indDimension'\n//import Treeselect from '@riophae/vue-treeselect'\nimport TreeSelect from '@eladmin/components/TreeSelect/index'\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\"\n\nexport default {\n  components: {TreeSelect},\n  dicts: ['EXP_SYMBOL'],\n  data() {\n    return {\n      limitRuleDialog: false,\n      title: '',\n      dimInfo: '',\n      tableData: [],\n      tableName: '',\n      indBaseRuleFilters: [],\n      props:{value: \"typeCode\", label: \"typeName\",\n        children: \"children\"\n        // disabled:true\n      },\n      // 后台返回的数据和VueTreeselect要求的数据结构不同，需要进行转换\n      normalizer(node) {\n        //去掉children=[]的children属性\n        if (node.children && !node.children.length) {\n          delete node.children;\n        }\n        return {\n          id: node.typeCode,\n          label: node.typeName,\n          children: node.children\n        }\n      }\n    }\n  },\n  methods: {\n    getValue(value,row) {\n      row.checkValue = value\n      console.log(row.checkValue,'checkValue');\n    },\n    //做默认选中的处理\n    selectRow() {\n      this.$nextTick(() => {\n        for (let i = 0; i < this.indBaseRuleFilters.length; i++) {\n          console.log(this.indBaseRuleFilters[i],'this.indBaseRuleFilters')\n          // 根据维度编号查询对应的值列表方法\n          getKeyValueByDimCode(this.indBaseRuleFilters[i].dimCode).then(retDate => {\n            if (retDate.code === 0) {\n              //新增一行\n              var newValue = {\n                checkName: this.indBaseRuleFilters[i].dimCode,\n                colCode: this.indBaseRuleFilters[i].expName,\n                expsymbol: this.indBaseRuleFilters[i].expSymbol,\n                checkValue: this.indBaseRuleFilters[i].expValue,//.split(','),\n                isCheck: false,\n                tempArray: retDate.data\n              }\n              this.tableData.push(newValue)\n            } else {\n              this.$message.error({\n                message: '未查询到对应的值'\n              })\n            }\n          })\n        }\n      })\n    },\n    // 新增一行\n    addClickHandle() {\n      var newValue = {\n        checkName: '',\n        colCode: '',\n        expsymbol: 'in',\n        checkValue: null,\n        isCheck: true,\n        tempArray: []\n      }\n      this.tableData.push(newValue)\n    },\n    // 删除行数\n    handleDelete(index) {\n      this.tableData.splice(index, 1)\n    },\n    // 选择维度后解锁值列表方法\n    getValueList(row) {\n      const para = {\n        dimCode: row.checkName // change选中的维度编号\n      }\n      // 根据维度编号查询列名\n      this.dimInfo.some((item) => {\n        if (item.dimCode == row.checkName) {\n          row.colCode = item.colCode\n        }\n      })\n      // 根据维度编号查询对应的值列表方法\n      getKeyValueByDimCode(row.checkName).then(retDate => {\n        if (retDate.code === 0) {\n          //row.tempArray = this.normalizer(retDate.data)\n          console.log(\"==============retDate\", retDate,row)\n          row.tempArray=retDate.data\n\n          row.isCheck = false // 值列表状态改为可选\n          row.checkValue = null // 值列表清空\n        } else {\n          this.$message.error({\n            message: '未查询到对应的值'\n          })\n        }\n      })\n    },\n    // 确定按钮\n    dimClickHandle() {\n      let val = '' // 页面显示\n      const indBaseRuleFilters = [] // 数据库限制规则信息\n      console.log('tableData',this.tableData)\n      for (var i = 0; i < this.tableData.length; i++) {\n        //校验维度和值列表是否为空\n        if (this.tableData[i].checkName == null || this.tableData[i].checkName == \"\") {\n          this.$message.error({\n            message: '维度不能为空'\n          })\n          return false;\n        }\n        if (this.tableData[i].checkValue.length == 0) {\n          this.$message.error({\n            message: '值不能为空'\n          })\n          return false;\n        }\n\n        // 根据限制规则拼接限制sql - 用于页面显示\n        let checkVal = ''\n        //let checkVal2 = ''\n        let checkValues =[]\n        checkValues = this.tableData[i].checkValue.split(',')\n        console.log(checkValues,'checkValues')\n        for (var j = 0; j < checkValues.length; j++) {\n          checkVal += \"'\" + checkValues[j] + \"',\"\n          //checkVal2 += this.tableData[i].checkValue[j] + \",\"\n        }\n        checkVal = checkVal.substr(0, checkVal.length - 1)\n        //checkVal2 = checkVal2.substr(0, checkVal2.length - 1)\n        val = val + this.tableData[i].colCode + ' ' + this.tableData[i].expsymbol + ' (' + checkVal + ')' + ' and '\n        // 封装限制规则数组保存到数据库\n        var newValue = {\n          dimCode: this.tableData[i].checkName,\n          expSeq: i + 1,\n          expName: this.tableData[i].colCode,\n          expSymbol: this.tableData[i].expsymbol,\n          expValue: this.tableData[i].checkValue\n        }\n        indBaseRuleFilters.push(newValue)\n      }\n      console.log(val,'val')\n      // 给父组件传递参数\n      this.$emit('func', val.substr(0, val.length - 5), indBaseRuleFilters)\n      this.limitRuleDialog = false\n    }\n  }\n}\n\n",null]}