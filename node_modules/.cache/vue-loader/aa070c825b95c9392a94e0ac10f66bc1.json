{"remainingRequest":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\portalHome\\manager\\authManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\views\\indicators\\portalHome\\manager\\authManager.vue","mtime":1653292077836},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"authManager\",\n    components: {},\n    data() {\n        return {\n            name: '',\n            date: '',\n            // 表格\n            tableData: [],\n            propList: [],\n            // 分页\n            pageSize: 9,\n            total: 10,\n            currentPage: 1,\n            // 当前选中\n            currentRow: null,\n            // 树状图\n            treeData: [],\n            defaultProps: {\n                id: 'id',\n                children: 'children',\n                label: 'name'\n            },\n\n        };\n    },\n    watch: {},\n    created() {},\n    mounted() {},\n    computed: {},\n    created() {\n        this.propList = [\n            {\n                prop: 'name',\n                label: '角色名称',\n                align: 'center',\n            },\n            {\n                prop: 'roleLevel',\n                label: '级别',\n                align: 'center',\n            },\n            {\n                prop: 'remark',\n                label: '描述',\n                align: 'center',\n            },\n        ]\n        this.initList()\n    },\n    methods: {\n        // 重置\n        reset() {\n            this.name = ''\n            this.date = ''\n        },\n        // 从第一页开始查询\n        initList() {\n            this.currentPage = 1\n            this.queryList()\n        },\n        // 列表查询\n        queryList() {\n            // name(输入名称或者描述搜索) crtDate(时间控制) size(分页条数)  page(页码)\n            let request = {\n                name: this.name,\n                size: this.pageSize,\n                page: this.currentPage,\n            }\n            console.log(request);\n            this.$api.qryRoleListPage({request}).then(res => {\n                if(res.data && res.data.records) {\n                    this.tableData = res.data.records\n                }\n            })\n        },\n        // 设置当前选中行为哪行\n        setCurrent(row) {\n            this.$refs.singleTable.setCurrentRow(row);\n        },\n        // 当前选中改变 --- 显示菜单树\n        handleRowChange(val) {\n            console.log(val);\n            this.currentRow = val;\n            this.$api.showRolesMenu({\n                id: val.id\n            }).then(res => {\n                console.log(res);\n                if(res.data) {\n                    this.handleDisplay(res.data)\n                }\n            })\n        },\n        // 处理tree回显\n        handleDisplay(val) {\n            // 先显示出树，才能获取到所有节点\n            val.length > 0 ? (this.treeData = val) : (this.treeData = [])\n            // 已勾选id - 调用递归方法进行处理\n            let checkedKeyArray = []\n            val ? this.getCheckedId(val, checkedKeyArray) : ''\n            this.$nextTick(() => {\n                checkedKeyArray.forEach((item) => {\n                    if (this.$refs.tree) {\n                        // 选中树，获取到树的节点，如果存在isSelect，则设置回显\n                        let node = this.$refs.tree.getNode(item)\n                        if (node.data.isSelect==1) {\n                            this.$refs.tree.setChecked(node, true)\n                        }\n                    }\n                })\n            })\n        },\n        // 递归处理 - 所有层级中选中的菜单id \n        getCheckedId(val, checkedKeyArray) {\n            val.forEach((item) => {\n                if (item.isSelect == 1) {\n                    checkedKeyArray.push(item.id)\n                    \n                }\n                if (item.children && item.children.length > 0) {\n                    this.getCheckedId(item.children, checkedKeyArray)\n                }\n            })\n        },\n        //  分页\n        handleCurrentChange(val) {\n            console.log(val);\n            this.currentPage = val\n            this.queryList()\n        },\n        // 节点点击\n        handleNodeClick(node,data) {\n            console.log(node);\n        },\n        // 复选框选中\n        handleCheckChange(data, checked, indeterminate) {\n            console.log(data, checked, indeterminate);\n        },\n        // 获取选中的节点\n        getCheckedNodes() {\n            console.log(this.$refs.tree.getCheckedNodes(),2333333);\n            let selectedNode = this.$refs.tree.getCheckedNodes()\n            let menuIds = []\n            selectedNode.forEach(item => {\n                menuIds.push(item.id)\n            })\n            return menuIds\n        },\n        // 保存菜单\n        saveMenu() {\n            let request = {\n                roleId: this.currentRow.id,\n                menuIds: this.getCheckedNodes()\n            }\n            console.log(request);\n            this.$api.saveRoleMenu(request).then(res => {\n                if(res.code==0 || res.code==200) {\n                    this.$message.success(res.msg)\n                    this.queryList()\n                }else {\n                    this.$message.error(res.msg)\n                }\n            })\n        },\n        \n\n    },\n};\n",null]}