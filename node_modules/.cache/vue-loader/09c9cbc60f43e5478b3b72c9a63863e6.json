{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue","mtime":1647917133447},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport crudIndDatasource from '../../../api/datasources/indDatasource'\r\nimport CRUD, {presenter, header, form, crud} from '@crud/crud'\r\nimport rrOperation from '@crud/RR.operation'\r\nimport crudOperation from '@crud/CRUD.operation'\r\nimport udOperation from '@crud/UD.operation'\r\nimport pagination from '@crud/Pagination'\r\nimport {test, saveTableAndColumnForList} from '../../../api/datasources/indDatasource'\r\nimport {getTableList, getTableListById} from '../../../api/datasources/indDataTable'\r\nimport {getColumnListByDatabase, saveColumnList} from '../../../api/datasources/indDataColumn'\r\n\r\n// crud交由presenter持有\r\nconst defaultCrud = CRUD({\r\n  title: '数据源',\r\n  url: crudIndDatasource.url,\r\n  sort: 'id,desc',\r\n  crudMethod: {...crudIndDatasource.method}\r\n})\r\nconst defaultForm = {\r\n  datasourceName: null,\r\n  datasourceType: null,\r\n  datasourceSchema: null,\r\n  datasourceDriver: null,\r\n  datasourceUrl: null,\r\n  datasourceUser: null,\r\n  datasourcePassword: null,\r\n  datasourceDesc: null,\r\n  crtUserCode: null,\r\n  crtOrgCode: null,\r\n  crtDate: null,\r\n  updUserCode: null,\r\n  updOrgCode: null,\r\n  updDate: null,\r\n  id: null,\r\n  tenant: null,\r\n  datasourceDriverType: null,\r\n  maxConnNum: null,\r\n  vallidationMethod: null,\r\n  vallidationSql: 'SELECT 1 FROM DUAL',\r\n  dbCharset: null,\r\n  dbToCharset: null,\r\n  quoteString: null,\r\n  transitionIsolation: null\r\n}\r\nexport default {\r\n  name: 'IndDatasource',\r\n  components: {pagination, crudOperation, rrOperation, udOperation},\r\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\r\n  dicts: ['DATASOURCE_TYPE'],\r\n  data() {\r\n    return {\r\n      table: {\r\n        columns: {\r\n          id: 'hidden',\r\n          tenant: 'hidden',\r\n          datasourceDriverType: 'hidden',\r\n          datasourceDriver: 'hidden',\r\n          /*datasourceUrl: 'hidden',*/\r\n          maxConnNum: 'hidden',\r\n          vallidationMethod: 'hidden',\r\n          vallidationSql: 'hidden',\r\n          dbCharset: 'hidden',\r\n          dbToCharset: 'hidden',\r\n          quoteString: 'hidden',\r\n          transitionIsolation: 'hidden',\r\n          datasourceDesc: 'hidden'\r\n        }\r\n      },\r\n      show: false,\r\n      showDataInfo: false,\r\n      showTable: false,\r\n      showColumnInfo: false,\r\n      loading: true,\r\n      editForm: {\r\n        tableName: '',\r\n        tableDesc: ''\r\n      },\r\n      dataSourceId: '',\r\n      tabName: '',\r\n      showType: 'primary',\r\n      buttonName: '高级选项',\r\n      tableData: [],\r\n      columnData: [],\r\n      tempData: [],\r\n      resultData: [],\r\n      passw: 'password',\r\n      icon: 'el-input__icon el-icon-view',\r\n      permission: {\r\n        add: ['admin', 'indDatasource:add'],\r\n        edit: ['admin', 'indDatasource:edit'],\r\n        del: ['admin', 'indDatasource:del'],\r\n        dataBaseManage: ['admin', 'dataBaseManage:del'],\r\n        details: ['admin', 'indDatasource:details']\r\n      },\r\n      rules: {\r\n        datasourceName: [\r\n          {required: true, message: '数据源名称不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourceType: [\r\n          {required: true, message: '数据库类型不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourceSchema: [\r\n          {required: true, message: '数据库SCHEMA不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourceDriver: [\r\n          {required: true, message: '数据库驱动不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourceUrl: [\r\n          {required: true, message: '连接URL不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourceUser: [\r\n          {required: true, message: '用户名不能为空', trigger: 'blur'}\r\n        ],\r\n        datasourcePassword: [\r\n          {required: true, message: '密码不能为空', trigger: 'blur'}\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.$nextTick(() => {\r\n      // const para = {\r\n      // 'dataSource_id': 'd123',\r\n      // 'table_id': 't1'\r\n      // }\r\n      // getColumnListById(para).then(data => {\r\n      // console.log('=====getColumnListById====>>>>', data)\r\n      // })\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取数据前设置好接口地址\r\n    [CRUD.HOOK.beforeRefresh]() {\r\n      return true\r\n    },\r\n    toDelete(data) {\r\n      //批量删除\r\n      this.$confirm('确认删除数据源?', '删除数据源', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.crud.doDelete(data);\r\n      })\r\n    },\r\n    // 密码的隐藏和显示\r\n    showPass() {\r\n      // 点击图标是密码隐藏或显示\r\n      if (this.passw === 'text') {\r\n        this.passw = 'password'\r\n        // 更换图标\r\n        // this.icon=\"el-input__icon el-icon-view\"\r\n      } else {\r\n        this.passw = 'text'\r\n        // this.icon=\"el-input__icon el-icon-view\"\r\n      }\r\n    },\r\n    setDriverType() {\r\n      this.form.datasourceDriverType = this.form.datasourceType\r\n      if (this.form.datasourceType === 'mysql') {\r\n        this.form.datasourceDriver = 'com.mysql.jdbc.Driver'\r\n        this.form.datasourceUrl = 'jdbc:mysql://<servername>:<port>/<database>?useOldAliasMetadataBehavior=true&useUnicode=true&characterEntableFlag=GBK&zeroDateTimeBehavior=convertToNull'\r\n      } else if (this.form.datasourceType === 'oracle') {\r\n        this.form.datasourceDriver = 'oracle.jdbc.driver.OracleDriver'\r\n        this.form.datasourceUrl = 'jdbc:oracle:thin:@<ip>:1521/<serviceName>'\r\n      } else if (this.form.datasourceType === 'db2') {\r\n        this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver'\r\n        this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>'\r\n      } else if (this.form.datasourceType === 'db2') {\r\n        this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver'\r\n        this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>'\r\n      } else if (this.form.datasourceDriverType === 'postgresql') {\r\n        this.form.datasourceDriver = 'org.postgresql.Driver'\r\n        this.form.datasourceUrl = 'jdbc:postgresql://<servername>:<port>/<database>'\r\n      } else {\r\n        this.form.datasourceDriver = null\r\n        this.form.datasourceUrl = null\r\n      }\r\n    },\r\n    showInfo(show) {\r\n      if (show) { // true 关闭高级选项\r\n        this.show = false\r\n        this.showType = 'primary'\r\n        this.buttonName = '高级选项'\r\n      } else {\r\n        this.show = true // false 打开高级选项\r\n        this.showType = 'primary'\r\n        this.buttonName = '隐藏高级选项'\r\n      }\r\n    },\r\n    doTest() {\r\n      this.$refs['form'].validate((valid) => {\r\n        if (!valid) { // rules规则校验不通过\r\n          return\r\n        } else {\r\n          test(this.form).then(data => {\r\n            // console.log(\"测试数据源返回数据\", data)\r\n            if (data.code === 0) {\r\n              this.$message.success({\r\n                message: '连接成功'\r\n              })\r\n            } else {\r\n              this.$message.error({\r\n                message: '数据源连接错误'\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    dataBaseManage(data, index) {\r\n      let tempId\r\n      if (index === 1) { // 只选中一行 取该行数据源id\r\n        tempId = data.id\r\n      } else { // 未选行 默认查询local本地数据源\r\n        tempId = 'local'\r\n      }\r\n      this.tableData = []\r\n      this.resultData = []\r\n      this.columnData = []\r\n      this.tempData = []\r\n      this.tabName = null\r\n      this.dataSourceId = tempId\r\n      this.loading = true\r\n      // 查询已有表\r\n      getTableListById(tempId).then(data => {\r\n        if (data.code === 0) {\r\n          this.resultData = data.data\r\n          console.log('=====resultData====>>>>', this.resultData)\r\n        } else {\r\n          this.resultData = []\r\n          this.$message.error({\r\n            message: '数据源连接错误'\r\n          })\r\n        }\r\n      })\r\n      // 查询全部表\r\n      setTimeout(() => {\r\n        getTableList(tempId).then(data => {\r\n          if (data.code === 0) {\r\n            this.loading = false\r\n            this.tableData = data.data\r\n            this.tempData = data.data\r\n            console.log('=====tableData====>>>>', this.tableData)\r\n            // 做默认选中遍历\r\n            this.$nextTick(function () {\r\n              this.resultData.forEach(item => {\r\n                for (let i = 0; i < this.tableData.length; i++) {\r\n                  if (item.tableName === this.tableData[i].tableName) {\r\n                    this.tableData.splice(i, 1)\r\n                    return false\r\n                  }\r\n                }\r\n              })\r\n            })\r\n          } else {\r\n            this.tableData = []\r\n            this.loading = false\r\n            this.$message.error({\r\n              message: '数据源连接错误'\r\n            })\r\n          }\r\n        })\r\n      }, 1000)\r\n      this.showTable = true\r\n    },\r\n    select(selection, row) {\r\n      this.$nextTick(function () {\r\n        if (row.tableFlag === '1') {\r\n          this.$set(row, 'tableFlag', '') // 取消选中\r\n        } else {\r\n          this.$set(row, 'tableFlag', '1') // 选中\r\n        }\r\n      })\r\n    },\r\n    selectColumn(selection, row) {\r\n      this.$nextTick(function () {\r\n        if (row.columnFlag === '1') {\r\n          this.$set(row, 'columnFlag', '') // 取消选中\r\n        } else {\r\n          this.$set(row, 'columnFlag', '1') // 选中\r\n        }\r\n      })\r\n    },\r\n    selectAll(selection) {\r\n      this.$nextTick(function () {\r\n        if (selection.length === this.tableData.length) { // 取消全选\r\n          for (let i = 0; i < this.tableData.length; i++) {\r\n            this.$set(this.tableData[i], 'tableFlag', '1')\r\n          }\r\n        } else {\r\n          for (let i = 0; i < this.tableData.length; i++) {\r\n            this.$set(this.tableData[i], 'tableFlag', '') // 全部选中\r\n          }\r\n        }\r\n      })\r\n    },\r\n    selectAllColumn(selection) {\r\n      this.$nextTick(function () {\r\n        if (selection.length === this.columnData.length) { // 取消全选\r\n          for (let i = 0; i < this.columnData.length; i++) {\r\n            this.$set(this.columnData[i], 'columnFlag', '1')\r\n          }\r\n        } else {\r\n          for (let i = 0; i < this.columnData.length; i++) {\r\n            this.$set(this.columnData[i], 'columnFlag', '') // 全部选中\r\n          }\r\n        }\r\n      })\r\n    },\r\n    selectRightAll(selection) {\r\n      this.$nextTick(function () {\r\n        if (selection.length === this.resultData.length) { // 取消全选\r\n          for (let i = 0; i < this.resultData.length; i++) {\r\n            this.$set(this.resultData[i], 'tableFlag', '1')\r\n          }\r\n        } else {\r\n          for (let i = 0; i < this.resultData.length; i++) {\r\n            this.$set(this.resultData[i], 'tableFlag', '') // 全部选中\r\n          }\r\n        }\r\n      })\r\n    },\r\n    save() {\r\n      console.log('=====resultData====>>>>', this.resultData)\r\n      saveTableAndColumnForList(this.resultData, this.dataSourceId).then(data => {\r\n        if (data.code === 0) {\r\n          console.log('保存成功', data.code)\r\n        } else {\r\n          console.log('保存失败', data.code)\r\n        }\r\n      })\r\n      this.$message.success({\r\n        message: '保存成功'\r\n      })\r\n      this.showTable = false\r\n      this.tableData = []\r\n    },\r\n    searchName() {\r\n      this.$nextTick(function () {\r\n        var tabName = (this.tabName === null) ? '' : this.tabName\r\n        let temp = this.tempData\r\n        let result = this.resultData\r\n        for (let i = 0; i < temp.length; i++) {\r\n          for (let j = 0; j < result.length; j++) {\r\n            if (temp[i].tableName === result[j].tableName) {\r\n              temp.splice(i, 1)\r\n            }\r\n          }\r\n        }\r\n        let data = []\r\n        data = temp.filter(function (row) {\r\n          return row.tableName.indexOf(tabName) > -1\r\n        })\r\n        this.tableData = data\r\n      })\r\n    },\r\n    selectLeft() {\r\n      let td = this.tableData.filter(function (row) {\r\n        if (row.tableFlag === '1') {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      if (td.length === 0) {\r\n        return false\r\n      }\r\n      this.$nextTick(function () {\r\n        let leftData = []\r\n        let rightData = this.resultData\r\n        this.tableData.forEach(row => {\r\n          if (row.tableFlag === '1') {\r\n            rightData.push(row)\r\n          }\r\n        })\r\n        leftData = this.tableData.filter(function (row) {\r\n          if (row.tableFlag === '1') {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        })\r\n        leftData.forEach(row => {\r\n          this.$set(row, 'tableFlag', '')\r\n        })\r\n        rightData.forEach(row => {\r\n          this.$set(row, 'tableFlag', '')\r\n        })\r\n        this.tableData = leftData\r\n        this.resultData = rightData\r\n      })\r\n    },\r\n    selectRight() {\r\n      let td = this.resultData.filter(function (row) {\r\n        if (row.tableFlag === '1') {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      if (td.length === 0) {\r\n        return false\r\n      }\r\n      this.$nextTick(function () {\r\n        let leftData = this.tableData\r\n        let rightData = []\r\n        this.resultData.forEach(row => {\r\n          if (row.tableFlag === '1') {\r\n            leftData.push(row)\r\n          }\r\n        })\r\n        rightData = this.resultData.filter(function (row) {\r\n          if (row.tableFlag === '1') {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        })\r\n        leftData.forEach(row => {\r\n          this.$set(row, 'tableFlag', '')\r\n        })\r\n        rightData.forEach(row => {\r\n          this.$set(row, 'tableFlag', '')\r\n        })\r\n        this.tableData = leftData\r\n        this.resultData = rightData\r\n      })\r\n    },\r\n    handleInfo(row) {\r\n      this.form.id = row.id\r\n      this.form.datasourceName = row.datasourceName\r\n      this.form.datasourceType = row.datasourceType\r\n      this.form.datasourceDriverType = row.datasourceDriverType\r\n      this.form.datasourceDriver = row.datasourceDriver\r\n      this.form.datasourceSchema = row.datasourceSchema\r\n      this.form.datasourceDesc = row.datasourceDesc\r\n      this.form.datasourceUrl = row.datasourceUrl\r\n      this.form.datasourceUser = row.datasourceUser\r\n      this.form.datasourcePassword = row.datasourcePassword\r\n      this.form.tenant = row.tenant\r\n      this.form.maxConnNum = row.maxConnNum\r\n      this.form.vallidationMethod = row.vallidationMethod\r\n      this.form.vallidationSql = row.vallidationSql\r\n      this.form.dbCharset = row.dbCharset\r\n      this.form.dbToCharset = row.dbToCharset\r\n      this.form.quoteString = row.quoteString\r\n      this.form.transitionIsolation = row.transitionIsolation\r\n      this.form.crtUserCode = row.crtUserCode\r\n      this.form.crtOrgCode = row.crtOrgCode\r\n      this.form.crtDate = this.parseTime(row.crtDate)\r\n      this.form.updUserCode = row.updUserCode\r\n      this.form.updOrgCode = row.updOrgCode\r\n      this.form.updDate = this.parseTime(row.updDate)\r\n      this.showDataInfo = true\r\n    },\r\n    handleColumn(row) {\r\n      this.columnData = []\r\n      getColumnListByDatabase(this.dataSourceId, row.tableName).then(data => {\r\n        console.log(\"========getColumnListByDatabase====>>>>\", data)\r\n        if (data.code === 0) {\r\n          this.columnData = data.data\r\n          this.$nextTick(function () {\r\n            this.columnData.forEach(row => {\r\n              if (row.columnFlag === '1') {\r\n                this.$refs.multipleTable.toggleRowSelection(row, true)\r\n              }\r\n            })\r\n          })\r\n        } else {\r\n          this.columnData = []\r\n        }\r\n      })\r\n      this.showColumnInfo = true\r\n    },\r\n    saveColumnInfo() {\r\n      console.log('=====columnData====>>>>', this.columnData)\r\n      saveColumnList(this.columnData).then(data => {\r\n        if (data.code === 0) {\r\n          this.$message.success({\r\n            message: '保存成功'\r\n          })\r\n        } else {\r\n          this.$message.error({\r\n            message: '保存失败'\r\n          })\r\n        }\r\n      })\r\n      this.showColumnInfo = false\r\n      this.columnData = []\r\n    }\r\n\r\n  }\r\n}\r\n",null]}