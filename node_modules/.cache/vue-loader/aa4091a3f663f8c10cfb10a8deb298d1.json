{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\views\\indicators\\indicator\\atom\\relationship.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\src\\views\\indicators\\indicator\\atom\\relationship.vue","mtime":1647917138761},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n  import echarts from \"echarts\";\n  import crudIndAtomRelation,{getData} from '../../../../api/indicators/indAtomRelation'\n  import CRUD, { presenter, header, form, crud } from '@crud/crud'\n\n\n const data={}\n  const links={}\n  const names={}\n\n  export default {\n    data(){\n      return {\n        data,\n        links,\n        names,\n        value: ''\n      }\n    },\n    methods: {\n      // 获取数据前设置好接口地址\n      [CRUD.HOOK.beforeRefresh]() {\n        return true\n      },\n      //初始化echarts\n      initChart: function () {\n        let myChart = echarts.init(document.getElementById(\"relation-main\"));\n        myChart.resize();  //自适应大小\n        myChart.setOption(this.setOption());\n        var _this = this;\n        myChart.on('click',function (params) {\n            if(params.dataType == 'node'){\n              var atomName = params.data.name;\n              _this.$router.push({path: '/indicator/atomIndicator',query:{ieName:atomName,comeFrom:'atom_rel'}});\n\n            }\n        })\n      },\n      setOption: function () {\n\n        let option = {\n          title: {\n            x: 'center',\n            text: \"指标关联关系\",\n          },\n          tooltip: {}, //提示框\n          animationDurationUpdate: 1500,\n          animationEasingUpdate: \"quinticInOut\",\n          series: [\n            {\n              type: \"graph\",\n              layout: \"force\",\n\n              data: this.data,\n              links: this.links,\n              // symbolSize: 50, //倘若该属性不在link里，则其表示节点的大小；否则即为线两端标记的大小\n              symbolSize: (value, params) => {\n\n                switch (params.data.category) {\n                  case 1:\n                    return 80;\n                    break;\n                  case 2:\n                    return 60;\n                    break;\n                  case 3:\n                    return 60;\n                    break;\n                  case 4:\n                    return 60;\n                    break;\n                }\n              },\n              categories: [\n                {\n                  name: 1,\n                  itemStyle: {\n                    normal: {\n                      color: '#ff1600'\n                    }\n                  }\n                },\n                {\n                  name: 2,\n                  itemStyle: {\n                    normal: {\n                      color: '#ff1600'\n                    }\n                  }\n                },\n                {\n                  name: 3,\n                  itemStyle: {\n                    normal: {\n                      color: '#658cff'\n                    }\n                  }\n                },\n                {\n                  name: 4,\n                  itemStyle: {\n                    normal: {\n                      color: '#ffa500'\n                    }\n                  }\n                },\n                {\n                  name: 5,\n                  itemStyle: {\n                    normal: {\n                      color: '#30ff00'\n                    }\n                  }\n                },\n              ],\n              roam: true, //鼠标缩放功能\n              label: {\n                show: true, //是否显示标签\n              },\n              focusNodeAdjacency: true, //鼠标移到节点上时突出显示结点以及邻节点和边\n              edgeSymbol: [\"none\", \"arrow\"], //关系两边的展现形式，也即图中线两端的展现形式。arrow为箭头\n              edgeSymbolSize: [4, 10],\n              draggable: true,//可不可以拖动\n              edgeLabel: {\n                fontSize: 20, //关系（也即线）上的标签字体大小\n                length: 30,\n              },\n              //设置距离\n              force: {\n                repulsion: 200,\n                edgeLength: 120,\n              },\n\n              lineStyle: {\n                opacity: 0.9,\n                width: 2,\n                curveness: 0,\n              },\n            },\n          ],\n        };\n\n        return option;\n      },\n\n      findByName() {\n        const bizName =this.value;\n        getData(bizName).then(data => {\n\n          this.data = data[0].data\n          this.links = data[0].links\n          console.log(\"data:\"+JSON.stringify(data[0].data));\n          console.log(\"link:\"+JSON.stringify(data[0].links));\n\n          this.initChart();\n        })\n\n      },\n/*      toDetail() {\n        console.log(\"11111111111111\")\n      }*/\n    },\n    mounted() {\n      getData(\"\").then(data => {\n\n        this.data = data[0].data\n        this.links = data[0].links\n        this.names=data[0].data;\n        this.initChart();\n      })\n\n    }\n  }\n",null]}