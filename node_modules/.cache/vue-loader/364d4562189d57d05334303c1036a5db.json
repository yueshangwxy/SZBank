{"remainingRequest":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\components\\operation.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\src\\components\\operation.vue","mtime":1654824275270},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1650418872733},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650418873221},{"path":"D:\\code\\DataAssetPlatform000\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1650418886580}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  props: {\r\n    tabList: {\r\n      type: Array,\r\n      default: () => {\r\n        return [];\r\n      },\r\n    },\r\n    tableData: {\r\n      type: Array,\r\n      default: () => {\r\n        return [];\r\n      },\r\n    },\r\n    pageSize: {\r\n      type: Number,\r\n      default: 10,\r\n    },\r\n    nowPage: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 50,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      currentPage: this.nowPage,\r\n      activeTab: \"publish\",\r\n      // 树形控件\r\n      filterText: \"\",\r\n      defaultProps: {\r\n        id: \"contentsId\",\r\n        children: \"children\",\r\n        label: \"name\",\r\n      },\r\n      treeData: [],\r\n      publishTree: [],\r\n      unpublishedTree: [],\r\n      // 目录列表\r\n      catalogueList: [],\r\n      // 一级目录\r\n      firstType: \"all\",\r\n      firstList: [],\r\n      // 二级目录\r\n      secondType: \"all\",\r\n      secondList: [],\r\n      // 四级目录\r\n      thirdType: \"all\",\r\n      thirdList: [],\r\n      // 精准筛选\r\n      // 表\r\n      belongSys: \"\",\r\n      tableName: \"\",\r\n      project: \"\",\r\n      // api\r\n      application: \"\",\r\n      apiDept: \"\",\r\n      // 指标\r\n      targetCode: \"\",\r\n      targetName: \"\",\r\n      targetType: \"\",\r\n      businessDept: \"\",\r\n      classifyOne: \"\",\r\n      // 标签\r\n      labelName: \"\",\r\n      objectCode: \"\",\r\n      fromCode: \"\",\r\n      branchOrInsideCode: \"\",\r\n      // 列表部分\r\n      // 收藏\r\n      save: true,\r\n      // 路由\r\n      routerName: \"\",\r\n      // 应用列表\r\n      appList: [],\r\n      // 指标类型\r\n      targetTypeList: [],\r\n      // 一级分类\r\n      classifyOneList: [],\r\n      // 部门树\r\n      deptTreeList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    save(val) {\r\n      console.log(val);\r\n    },\r\n    // 节点过滤\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n    // 树状图tab\r\n    activeTab(val) {\r\n      if (val === \"publish\") {\r\n        this.firstType = \"all\";\r\n        this.secondType = \"all\";\r\n        this.thirdType = \"all\";\r\n        this.treeData = this.publishTree;\r\n        this.queryFromFirstPage();\r\n      } else {\r\n        this.firstType = \"all\";\r\n        this.secondType = \"all\";\r\n        this.thirdType = \"all\";\r\n        this.treeData = this.unpublishedTree;\r\n        this.queryFromFirstPage();\r\n      }\r\n    },\r\n    // 目录联动\r\n    // 一级\r\n    firstType(val) {\r\n      this.secondType = \"all\";\r\n      let data;\r\n      data = this.firstList.filter((item) => {\r\n        return item.contentsId == val;\r\n      });\r\n      if (data.length < 1) {\r\n        this.secondList = [];\r\n      } else {\r\n        this.secondList = JSON.parse(JSON.stringify(data[0].children));\r\n        if (this.secondList.length > 0) {\r\n          this.secondList.unshift({\r\n            contentsId: \"all\",\r\n            name: \"全部\",\r\n            children: [],\r\n          });\r\n        }\r\n      }\r\n      this.queryFromFirstPage()\r\n      this.$refs.tree.setCurrentKey(val);\r\n    },\r\n    // 二级\r\n    secondType(val) {\r\n      this.thirdType = \"all\";\r\n      let data;\r\n      data = this.secondList.filter((item) => {\r\n        return item.contentsId == val;\r\n      });\r\n      if (data.length < 1) {\r\n        this.thirdList = [];\r\n      } else {\r\n        this.thirdList = JSON.parse(JSON.stringify(data[0].children));\r\n        if (this.thirdList.length > 0) {\r\n          this.thirdList.unshift({\r\n            contentsId: \"all\",\r\n            name: \"全部\",\r\n            children: [],\r\n          });\r\n        }\r\n      }\r\n      this.queryFromFirstPage()\r\n      this.$refs.tree.setCurrentKey(val);\r\n    },\r\n    // 三级\r\n    thirdType(val) {\r\n      this.queryFromFirstPage()\r\n      this.$refs.tree.setCurrentKey(val);\r\n    }\r\n  },\r\n  created() {\r\n    // 全部目录\r\n    this.$api.getAllCatalogueList({}).then((res) => {\r\n      this.firstList = res;\r\n      this.firstList.unshift({\r\n        contentsId: \"all\",\r\n        name: \"全部\",\r\n        children: [],\r\n      });\r\n    });\r\n    // 查询所有应用   appList\r\n    // 查询指标类型, 一级分类，二级分类\r\n    // 查询部门树\r\n    this.$api.qryOpenApp({}).then((res) => {\r\n      this.appList = res.data;\r\n    });\r\n    this.$api.getTargetSelect({}).then((res) => {\r\n      this.targetTypeList = res.data.targetTypeList;\r\n    });\r\n    // this.$api.getClassifyList({}).then((res) => {\r\n    //   this.classifyOneList = res.classifyOne;\r\n    // });\r\n    if(this.$route.name === 'targetOperation') {\r\n      this.$api.getTargetSelect({}).then((res) => {\r\n        this.classifyOneList = res.data.classifyOneList;\r\n      });\r\n    }\r\n    this.$api.getDeptTree({}).then((res) => {\r\n      this.deptTreeList = [res.data];\r\n    });\r\n    this.routerName = this.$route.name;\r\n    this.getCatalogueList();\r\n  },\r\n  methods: {\r\n    getAssetTypeInfo() {\r\n      if (this.routerName === \"tableOperation\") {\r\n        return {\r\n          tagColor: \"success\",\r\n          tagName: \"表\",\r\n          codeName: \"tableName\",\r\n        };\r\n      } else if (this.routerName === \"targetOperation\") {\r\n        return {\r\n          tagColor: \"warning\",\r\n          tagName: \"指标\",\r\n          codeName: \"targetName\",\r\n        };\r\n      } else if (this.routerName === \"apiOperation\") {\r\n        return {\r\n          tagColor: \"normal\",\r\n          tagName: \"API\",\r\n          codeName: \"indexName\",\r\n        };\r\n      } else if (this.routerName === \"labelOperation\") {\r\n        return {\r\n          tagColor: \"danger\",\r\n          tagName: \"标签\",\r\n          codeName: \"labelName\",\r\n        };\r\n      }\r\n    },\r\n    getCatalogueList() {\r\n      if (this.routerName === \"apiOperation\") {\r\n        loadFunction.call(this, \"getCatalogueListApi\");\r\n      } else if (this.routerName === \"targetOperation\") {\r\n        loadFunction.call(this, \"getCatalogueListTarget\");\r\n      } else if (this.routerName === \"labelOperation\") {\r\n        loadFunction.call(this, \"getCatalogueListLabel\");\r\n      } else {\r\n        loadFunction.call(this);\r\n      }\r\n      function loadFunction(apiUrl = \"getCatalogueList\") {\r\n        // 已发布\r\n        this.$api[apiUrl]({ state: \"publish\" }).then((res) => {\r\n          this.publishTree = res;\r\n          this.treeData = res;\r\n        });\r\n        // 未发布\r\n        this.$api[apiUrl]({ state: \"unpublished\" }).then((res) => {\r\n          this.unpublishedTree = res;\r\n        });\r\n      }\r\n    },\r\n    // 树状图tab\r\n    handleClick(tab, event) {\r\n      this.$emit(\"handleClick\", tab, event);\r\n    },\r\n    // 节点过滤\r\n    filterNode(value, data) {\r\n      if (!value) return true;\r\n      return data.name.indexOf(value.toString()) !== -1;\r\n    },\r\n    // 节点点击   --- 树状图节点点击调接口重新查询列表\r\n    handleNodeClick(data, node) {\r\n      let levelMap = {\r\n        1: \"firstType\",\r\n        2: \"secondType\",\r\n        3: \"thirdType\",\r\n      };\r\n      if (data.level == 1) {\r\n        this.secondType = \"\";\r\n        this.thirdType = \"\";\r\n      } else if (data.level == 2) {\r\n        this.thirdType = \"\";\r\n      }\r\n      this[levelMap[data.level]] = data.contentsId;\r\n      if (!data.children || data.children.length === 0) {\r\n        this.queryFromFirstPage();\r\n      }\r\n    },\r\n    // 从第一页开始查询\r\n    queryFromFirstPage() {\r\n      this.currentPage = 1;\r\n      this.queryList();\r\n    },\r\n    // 列表查询  搜索\r\n    queryList() {\r\n      // 表\r\n      let request = {};\r\n      if (this.routerName === \"tableOperation\") {\r\n        request = {\r\n          page: String(this.currentPage),\r\n          size: String(this.pageSize),\r\n          tableName: this.tableName,\r\n          assetsState: this.activeTab,\r\n          project: this.project,\r\n          deptCode: this.belongSys,\r\n          contentsOne: this.firstType,\r\n          contentsTwo: this.secondType,\r\n          contentsThree: this.thirdType,\r\n        };\r\n        if (this.firstType === \"all\") {\r\n          request.contentsOne = \"\";\r\n        }\r\n        if (this.secondType === \"all\") {\r\n          request.contentsTwo = \"\";\r\n        }\r\n        if (this.thirdType === \"all\") {\r\n          request.contentsThree = \"\";\r\n        }\r\n      } else if (this.routerName === \"apiOperation\") {\r\n        request = {\r\n          page: String(this.currentPage),\r\n          size: String(this.pageSize),\r\n          driverType: \"\",\r\n          assetsState: this.activeTab,\r\n          contacts: \"\",\r\n          deptCode: this.apiDept,\r\n          application: this.application,\r\n          contentsOne: this.firstType,\r\n          contentsTwo: this.secondType,\r\n          contentsThree: this.thirdType,\r\n        };\r\n        if (this.firstType === \"all\") {\r\n          request.contentsOne = \"\";\r\n        }\r\n        if (this.secondType === \"all\") {\r\n          request.contentsTwo = \"\";\r\n        }\r\n        if (this.thirdType === \"all\") {\r\n          request.contentsThree = \"\";\r\n        }\r\n      } else if (this.routerName === \"targetOperation\") {\r\n        request = {\r\n          page: String(this.currentPage),\r\n          size: String(this.pageSize),\r\n          assetsState: this.activeTab,\r\n          targetCode: this.targetCode,\r\n          classifyOne: this.classifyOne,\r\n          targetName: this.targetName,\r\n          targetType: this.targetType,\r\n          deptCode: this.businessDept,\r\n          contentsOne: this.firstType,\r\n          contentsTwo: this.secondType,\r\n          contentsThree: this.thirdType,\r\n        };\r\n        if (this.firstType === \"all\") {\r\n          request.contentsOne = \"\";\r\n        }\r\n        if (this.secondType === \"all\") {\r\n          request.contentsTwo = \"\";\r\n        }\r\n        if (this.thirdType === \"all\") {\r\n          request.contentsThree = \"\";\r\n        }\r\n      } else if (this.routerName === \"labelOperation\") {\r\n        request = {\r\n          page: String(this.currentPage),\r\n          size: String(this.pageSize),\r\n          deptCode: this.branchOrInsideCode,\r\n          assetsState: this.activeTab,\r\n          objectCode: this.objectCode,\r\n          classifyName: \"\",\r\n          fromCode: this.fromCode,\r\n          labelName: this.labelName,\r\n          description: \"\",\r\n          contentsOne: this.firstType,\r\n          contentsTwo: this.secondType,\r\n          contentsThree: this.thirdType,\r\n        };\r\n        if (this.firstType === \"all\") {\r\n          request.contentsOne = \"\";\r\n        }\r\n        if (this.secondType === \"all\") {\r\n          request.contentsTwo = \"\";\r\n        }\r\n        if (this.thirdType === \"all\") {\r\n          request.contentsThree = \"\";\r\n        }\r\n      }\r\n      this.$emit(\"queryList\", request);\r\n    },\r\n    // 分页\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val;\r\n      this.queryList();\r\n    },\r\n    // 修改\r\n    modify(item) {\r\n      this.$router.push({\r\n        path: \"/detailsMod/\" + item.assetType,\r\n        query: {\r\n          id: item.id,\r\n        },\r\n      });\r\n    },\r\n    // 下线\r\n    offline(item) {\r\n      let request = {\r\n        id: item.id,\r\n        activeTab: this.activeTab,\r\n        assetsState: this.activeTab === \"publish\" ? \"unpublished\" : \"publish\",\r\n      };\r\n      this.$emit(\"offline\", request);\r\n    },\r\n    // 添加收藏\r\n    addFavorite(item) {\r\n      this.$api\r\n        .addFavorite({\r\n          assetId: item.id,\r\n          assetType: item.assetType,\r\n        })\r\n        .then((res) => {\r\n          this.$message.success(\"添加收藏成功!\");\r\n          this.queryList();\r\n        });\r\n    },\r\n    // 删除收藏\r\n    delFavorite(item) {\r\n      this.$api\r\n        .delFavorite({\r\n          assetId: item.id,\r\n          assetType: item.assetType,\r\n        })\r\n        .then((res) => {\r\n          this.$message.success(\"取消收藏成功!\");\r\n          this.queryList();\r\n        });\r\n    },\r\n    // 失效时间转换\r\n    transInvalidTime(time) {\r\n      let invalidTime = time ? (time.indexOf(\"9999\") > -1 ? \"永久\" : time) : \"\";\r\n      return invalidTime;\r\n    },\r\n  },\r\n};\r\n",null]}