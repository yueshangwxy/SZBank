{"remainingRequest":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-common\\src\\views\\mnt\\deploy\\deploy.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-common\\src\\views\\mnt\\deploy\\deploy.vue","mtime":1647917128158},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1647917124178},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647917124586},{"path":"D:\\code\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1647917137429}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { add, edit, getApps, getServers } from '../../../api/mnt/deploy'\r\nimport { mapGetters } from 'vuex'\r\nimport { getToken } from '../../../utils/auth'\r\n\r\nexport default {\r\n  props: {},\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      dialog: false,\r\n      apps: [],\r\n      servers: [],\r\n      headers: {\r\n        Authorization: getToken()\r\n      },\r\n      deployInfo: {},\r\n      form: {\r\n        id: '',\r\n        appId: '',\r\n        ip: '',\r\n        selectIp: []\r\n      },\r\n      rules: {}\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['deployUploadApi'])\r\n  },\r\n  created() {\r\n    this.initWebSocket()\r\n  },\r\n  mounted() {\r\n    this.initSelect()\r\n  },\r\n  methods: {\r\n    cancel() {\r\n      this.resetForm()\r\n    },\r\n    doSubmit() {\r\n      this.loading = true\r\n      if (this.isAdd) {\r\n        this.doAdd()\r\n      } else {\r\n        this.doEdit()\r\n      }\r\n    },\r\n    joinIp() {\r\n      this.form.ip = ''\r\n      this.form.selectIp.forEach(ip => {\r\n        if (this.form.ip !== '') {\r\n          this.form.ip += ','\r\n        }\r\n        this.form.ip += ip\r\n      })\r\n    },\r\n    doAdd() {\r\n      this.joinIp()\r\n      add(this.form)\r\n        .then(res => {\r\n          this.resetForm()\r\n          this.$notify({\r\n            title: '添加成功',\r\n            type: 'success',\r\n            duration: 2500\r\n          })\r\n          this.loading = false\r\n          this.$parent.init()\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n          console.log(err.response.data.message)\r\n        })\r\n    },\r\n    doEdit() {\r\n      this.joinIp()\r\n      edit(this.form)\r\n        .then(res => {\r\n          this.resetForm()\r\n          this.$notify({\r\n            title: '修改成功',\r\n            type: 'success',\r\n            duration: 2500\r\n          })\r\n          this.loading = false\r\n          this.$parent.init()\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n          console.log(err.response.data.message)\r\n        })\r\n    },\r\n    resetForm() {\r\n      this.dialog = false\r\n      this.$refs['form'].resetFields()\r\n      this.form = {\r\n        id: '',\r\n        appId: '',\r\n        ip: '',\r\n        selectIp: []\r\n      }\r\n    },\r\n    initSelect() {\r\n      getApps().then(res => {\r\n        this.apps = res.content\r\n      })\r\n      getServers().then(res => {\r\n        this.servers = res.content\r\n      })\r\n    },\r\n    handleSuccess(response, file, fileList) {\r\n      this.cancel()\r\n    },\r\n    // 监听上传失败\r\n    handleError(e, file, fileList) {\r\n      const msg = JSON.parse(e.message)\r\n      this.$notify({\r\n        title: msg.message,\r\n        type: 'error',\r\n        duration: 2500\r\n      })\r\n    },\r\n    initWebSocket() {\r\n      const wsUri = process.env.VUE_APP_WS_API + '/webSocket/deploy'\r\n      this.websock = new WebSocket(wsUri)\r\n      this.websock.onerror = this.webSocketOnError\r\n      this.websock.onmessage = this.webSocketOnMessage\r\n    },\r\n    webSocketOnError(e) {\r\n      this.$notify({\r\n        title: 'WebSocket连接发生错误',\r\n        type: 'error',\r\n        duration: 0\r\n      })\r\n    },\r\n    webSocketOnMessage(e) {\r\n      const data = JSON.parse(e.data)\r\n      if (data.msgType === 'INFO') {\r\n        this.$notify({\r\n          title: '',\r\n          message: data.msg,\r\n          type: 'success',\r\n          dangerouslyUseHTMLString: true,\r\n          duration: 5500\r\n        })\r\n      } else if (data.msgType === 'ERROR') {\r\n        this.$notify({\r\n          title: '',\r\n          message: data.msg,\r\n          dangerouslyUseHTMLString: true,\r\n          type: 'error',\r\n          duration: 0\r\n        })\r\n      }\r\n    },\r\n    webSocketSend(agentData) {\r\n      this.websock.send(agentData)\r\n    }\r\n  }\r\n}\r\n",null]}