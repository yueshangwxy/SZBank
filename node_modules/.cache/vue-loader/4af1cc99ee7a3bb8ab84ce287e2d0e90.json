{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\views\\tools\\storage\\local\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\eladmin-common\\src\\views\\tools\\storage\\local\\index.vue","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport { getToken } from '../../../../utils/auth'\nimport crudFile from '../../../../api/tools/localStorage'\nimport CRUD, { presenter, header, form, crud } from '../../../../components/Crud/crud'\nimport rrOperation from '../../../../components/Crud/RR.operation'\nimport crudOperation from '../../../../components/Crud/CRUD.operation'\nimport pagination from '../../../../components/Crud/Pagination'\n\n// crud交由presenter持有\nconst defaultCrud = CRUD({ title: '文件', url: 'api/localStorage', crudMethod: { ...crudFile }})\nconst defaultForm = { id: null, name: '', portal_visible: '0' }\nexport default {\n  name: 'LocalStorage',\n  components: { pagination, crudOperation, rrOperation },\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  // 设置数据字典\n  dicts: ['yes_or_no'],\n  data() {\n    return {\n      delAllLoading: false,\n      loading: false,\n      headers: { 'Authorization': getToken() },\n      permission: {\n        edit: ['admin', 'storage:edit'],\n        del: ['admin', 'storage:del']\n      },\n      fileList: []\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'baseApi',\n      'fileUploadApi'\n    ])\n  },\n  created() {\n    this.crud.optShow.add = false\n    this.crud.optShow.edit = false\n  },\n  methods: {\n    upload() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.fileList.length === 0) {\n            this.$message.error('请选择上传文件!')\n          } else {\n            this.loading = true\n            this.$refs.upload.submit()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    handleChange(file, fileList) {\n      if (fileList.length > 0) {\n        this.fileList = [fileList[fileList.length - 1]]\n      }\n      this.form.name = file.name\n    },\n    beforeUpload(file) {\n      let isLt2M = true\n      isLt2M = file.size / 1024 / 1024 < 100\n      if (!isLt2M) {\n        this.loading = false\n        this.$message.error('上传文件大小不能超过 100MB!')\n      }\n      this.form.name = file.name\n      return isLt2M\n    },\n    handleSuccess(response, file, fileList) {\n      this.crud.notify('上传成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\n      this.$refs.upload.clearFiles()\n      this.crud.status.add = CRUD.STATUS.NORMAL\n      this.crud.resetForm()\n      file.name = ''\n      this.loading = false\n      this.crud.toQuery()\n    },\n    handleError(e, file, fileList) {\n      const msg = JSON.parse(e.message)\n      file.name = ''\n      this.$refs.upload.clearFiles()\n      this.$notify({\n        title: msg.message,\n        type: 'error',\n        duration: 2500\n      })\n      this.loading = false\n    },\n    beforeRemove(file, fileList) {\n      this.form.name = ''\n    },\n\n    // 添加取消 - 之前 */\n    [CRUD.HOOK.beforeAddCancel](crud, form) {\n      this.loading = false\n      this.$refs.upload.clearFiles()\n    },\n\n    // 改变状态\n    changeEnabled(data, val) {\n      var s = '取消设置'\n      if (val == 1) {\n        s = '设置'\n      }\n      this.$confirm('此操作将 [' + s + '] \"' + data.name + '\" 为制度文件,是否继续？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n          crudFile.edit(data).then(res => {\n          this.$notify({\n            title: '设置成功',\n            type: 'success',\n            duration: 2500\n          })\n        }).catch(() => {\n          data.visible = data.visible === '1' ? '0' : '1'\n        })\n      }).catch(() => {\n        data.visible = data.visible === '1' ? '0' : '1'\n      })\n    },\n    // 下载文件\n    handleClick(url, name) {\n      var xhh = new XMLHttpRequest()\n      xhh.open('get', url)\n      xhh.setRequestHeader('Authorization', getToken())\n      xhh.setRequestHeader('Content-Type', 'application/json')\n      xhh.responseType = 'blob'\n      xhh.onload = function() {\n        const blob = this.response\n        var filename = name\n        var a = document.createElement('a')\n        var new_url = window.URL.createObjectURL(blob)\n        a.href = new_url\n        a.download = filename\n        var body = document.getElementsByTagName('body')[0]\n        body.appendChild(a)\n        a.click()\n        body.removeChild(a)\n        window.URL.revokeObjectURL(new_url)\n      }\n      xhh.send()\n    }\n  }\n}\n",null]}