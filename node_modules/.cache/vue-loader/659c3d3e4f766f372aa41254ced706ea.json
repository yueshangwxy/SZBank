{"remainingRequest":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\pncui-datasource\\src\\views\\datasources\\datasource\\index.vue","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudIndDatasource from '../../../api/datasources/indDatasource'\nimport CRUD, {presenter, header, form, crud} from '@crud/crud'\nimport rrOperation from '@crud/RR.operation'\nimport crudOperation from '@crud/CRUD.operation'\nimport udOperation from '@crud/UD.operation'\nimport pagination from '@crud/Pagination'\nimport {test, saveTableAndColumnForList} from '../../../api/datasources/indDatasource'\nimport {getTableList, getTableListById} from '../../../api/datasources/indDataTable'\nimport {getColumnListByDatabase, saveColumnList} from '../../../api/datasources/indDataColumn'\n\n// crud交由presenter持有\nconst defaultCrud = CRUD({\n  title: '数据源',\n  url: crudIndDatasource.url,\n  sort: 'id,desc',\n  crudMethod: {...crudIndDatasource.method}\n})\nconst defaultForm = {\n  datasourceName: null,\n  datasourceType: null,\n  datasourceSchema: null,\n  datasourceDriver: null,\n  datasourceUrl: null,\n  datasourceUser: null,\n  datasourcePassword: null,\n  datasourceDesc: null,\n  crtUserCode: null,\n  crtOrgCode: null,\n  crtDate: null,\n  updUserCode: null,\n  updOrgCode: null,\n  updDate: null,\n  id: null,\n  tenant: null,\n  datasourceDriverType: null,\n  maxConnNum: null,\n  vallidationMethod: null,\n  vallidationSql: 'SELECT 1 FROM DUAL',\n  dbCharset: null,\n  dbToCharset: null,\n  quoteString: null,\n  transitionIsolation: null\n}\nexport default {\n  name: 'IndDatasource',\n  components: {pagination, crudOperation, rrOperation, udOperation},\n  mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n  dicts: ['DATASOURCE_TYPE'],\n  data() {\n    return {\n      table: {\n        columns: {\n          id: 'hidden',\n          tenant: 'hidden',\n          datasourceDriverType: 'hidden',\n          datasourceDriver: 'hidden',\n          datasourceUrl: 'hidden',\n          maxConnNum: 'hidden',\n          vallidationMethod: 'hidden',\n          vallidationSql: 'hidden',\n          dbCharset: 'hidden',\n          dbToCharset: 'hidden',\n          quoteString: 'hidden',\n          transitionIsolation: 'hidden',\n          datasourceDesc: 'hidden'\n        }\n      },\n      show: false,\n      showDataInfo: false,\n      showTable: false,\n      showColumnInfo: false,\n      loading: true,\n      editForm: {\n        tableName: '',\n        tableDesc: ''\n      },\n      dataSourceId: '',\n      tabName: '',\n      showType: 'primary',\n      buttonName: '高级选项',\n      tableData: [],\n      columnData: [],\n      tempData: [],\n      resultData: [],\n      passw: 'password',\n      icon: 'el-input__icon el-icon-view',\n      permission: {\n        add: ['admin', 'indDatasource:add'],\n        edit: ['admin', 'indDatasource:edit'],\n        del: ['admin', 'indDatasource:del'],\n        dataBaseManage: ['admin', 'dataBaseManage:del'],\n        details: ['admin', 'indDatasource:details']\n      },\n      rules: {\n        datasourceName: [\n          {required: true, message: '数据源名称不能为空', trigger: 'blur'}\n        ],\n        datasourceType: [\n          {required: true, message: '数据库类型不能为空', trigger: 'blur'}\n        ],\n        datasourceSchema: [\n          {required: true, message: '数据库SCHEMA不能为空', trigger: 'blur'}\n        ],\n        datasourceDriver: [\n          {required: true, message: '数据库驱动不能为空', trigger: 'blur'}\n        ],\n        datasourceUrl: [\n          {required: true, message: '连接URL不能为空', trigger: 'blur'}\n        ],\n        datasourceUser: [\n          {required: true, message: '用户名不能为空', trigger: 'blur'}\n        ],\n        datasourcePassword: [\n          {required: true, message: '密码不能为空', trigger: 'blur'}\n        ]\n      }\n    }\n  },\n  created() {\n    this.$nextTick(() => {\n      // const para = {\n      // 'dataSource_id': 'd123',\n      // 'table_id': 't1'\n      // }\n      // getColumnListById(para).then(data => {\n      // console.log('=====getColumnListById====>>>>', data)\n      // })\n    })\n  },\n  methods: {\n    // 获取数据前设置好接口地址\n    [CRUD.HOOK.beforeRefresh]() {\n      return true\n    },\n    // 密码的隐藏和显示\n    showPass() {\n      // 点击图标是密码隐藏或显示\n      if (this.passw === 'text') {\n        this.passw = 'password'\n        // 更换图标\n        // this.icon=\"el-input__icon el-icon-view\"\n      } else {\n        this.passw = 'text'\n        // this.icon=\"el-input__icon el-icon-view\"\n      }\n    },\n    setDriverType() {\n      this.form.datasourceDriverType = this.form.datasourceType\n      if (this.form.datasourceType === 'mysql') {\n        this.form.datasourceDriver = 'com.mysql.jdbc.Driver'\n        this.form.datasourceUrl = 'jdbc:mysql://<servername>:<port>/<database>?useOldAliasMetadataBehavior=true&useUnicode=true&characterEntableFlag=GBK&zeroDateTimeBehavior=convertToNull'\n      } else if (this.form.datasourceType === 'oracle') {\n        this.form.datasourceDriver = 'oracle.jdbc.driver.OracleDriver'\n        this.form.datasourceUrl = 'jdbc:oracle:thin:@<ip>:1521/<serviceName>'\n      } else if (this.form.datasourceType === 'db2') {\n        this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver'\n        this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>'\n      } else if (this.form.datasourceType === 'db2') {\n        this.form.datasourceDriver = 'com.ibm.db2.jcc.DB2Driver'\n        this.form.datasourceUrl = 'jdbc:db2://<servername>:<port>/<database>'\n      } else if (this.form.datasourceDriverType === 'postgresql') {\n        this.form.datasourceDriver = 'org.postgresql.Driver'\n        this.form.datasourceUrl = 'jdbc:postgresql://<servername>:<port>/<database>'\n      } else {\n        this.form.datasourceDriver = null\n        this.form.datasourceUrl = null\n      }\n    },\n    showInfo(show) {\n      if (show) { // true 关闭高级选项\n        this.show = false\n        this.showType = 'info'\n        this.buttonName = '高级选项'\n      } else {\n        this.show = true // false 打开高级选项\n        this.showType = 'primary'\n        this.buttonName = '隐藏高级选项'\n      }\n    },\n    doTest() {\n      this.$refs['form'].validate((valid) => {\n        if (!valid) { // rules规则校验不通过\n          return\n        } else {\n          test(this.form).then(data => {\n            // console.log(\"测试数据源返回数据\", data)\n            if (data.code === 0) {\n              this.$message.success({\n                message: '连接成功'\n              })\n            } else {\n              this.$message.error({\n                message: '数据源连接错误'\n              })\n            }\n          })\n        }\n      })\n    },\n    dataBaseManage(data, index) {\n      let tempId\n      if (index === 1) { // 只选中一行 取该行数据源id\n        tempId = data.id\n      } else { // 未选行 默认查询local本地数据源\n        tempId = 'local'\n      }\n      this.tableData = []\n      this.resultData = []\n      this.columnData = []\n      this.tempData = []\n      this.tabName = null\n      this.dataSourceId = tempId\n      this.loading = true\n      // 查询已有表\n      getTableListById(tempId).then(data => {\n        if (data.code === 0) {\n          this.resultData = data.data\n          console.log('=====resultData====>>>>', this.resultData)\n        } else {\n          this.resultData = []\n          this.$message.error({\n            message: '数据源连接错误'\n          })\n        }\n      })\n      // 查询全部表\n      setTimeout(() => {\n        getTableList(tempId).then(data => {\n          if (data.code === 0) {\n            this.loading = false\n            this.tableData = data.data\n            this.tempData = data.data\n            console.log('=====tableData====>>>>', this.tableData)\n            // 做默认选中遍历\n            this.$nextTick(function () {\n              this.resultData.forEach(item => {\n                for (let i = 0; i < this.tableData.length; i++) {\n                  if (item.tableName === this.tableData[i].tableName) {\n                    this.tableData.splice(i, 1)\n                    return false\n                  }\n                }\n              })\n            })\n          } else {\n            this.tableData = []\n            this.loading = false\n            this.$message.error({\n              message: '数据源连接错误'\n            })\n          }\n        })\n      }, 1000)\n      this.showTable = true\n    },\n    select(selection, row) {\n      this.$nextTick(function () {\n        if (row.tableFlag === '1') {\n          this.$set(row, 'tableFlag', '') // 取消选中\n        } else {\n          this.$set(row, 'tableFlag', '1') // 选中\n        }\n      })\n    },\n    selectColumn(selection, row) {\n      this.$nextTick(function () {\n        if (row.columnFlag === '1') {\n          this.$set(row, 'columnFlag', '') // 取消选中\n        } else {\n          this.$set(row, 'columnFlag', '1') // 选中\n        }\n      })\n    },\n    selectAll(selection) {\n      this.$nextTick(function () {\n        if (selection.length === this.tableData.length) { // 取消全选\n          for (let i = 0; i < this.tableData.length; i++) {\n            this.$set(this.tableData[i], 'tableFlag', '1')\n          }\n        } else {\n          for (let i = 0; i < this.tableData.length; i++) {\n            this.$set(this.tableData[i], 'tableFlag', '') // 全部选中\n          }\n        }\n      })\n    },\n    selectAllColumn(selection) {\n      this.$nextTick(function () {\n        if (selection.length === this.columnData.length) { // 取消全选\n          for (let i = 0; i < this.columnData.length; i++) {\n            this.$set(this.columnData[i], 'columnFlag', '1')\n          }\n        } else {\n          for (let i = 0; i < this.columnData.length; i++) {\n            this.$set(this.columnData[i], 'columnFlag', '') // 全部选中\n          }\n        }\n      })\n    },\n    selectRightAll(selection) {\n      this.$nextTick(function () {\n        if (selection.length === this.resultData.length) { // 取消全选\n          for (let i = 0; i < this.resultData.length; i++) {\n            this.$set(this.resultData[i], 'tableFlag', '1')\n          }\n        } else {\n          for (let i = 0; i < this.resultData.length; i++) {\n            this.$set(this.resultData[i], 'tableFlag', '') // 全部选中\n          }\n        }\n      })\n    },\n    save() {\n      console.log('=====resultData====>>>>', this.resultData)\n      saveTableAndColumnForList(this.resultData, this.dataSourceId).then(data => {\n        if (data.code === 0) {\n          console.log('保存成功', data.code)\n        } else {\n          console.log('保存失败', data.code)\n        }\n      })\n      this.$message.success({\n        message: '保存成功'\n      })\n      this.showTable = false\n      this.tableData = []\n    },\n    searchName() {\n      this.$nextTick(function () {\n        var tabName = (this.tabName === null) ? '' : this.tabName\n        let temp = this.tempData\n        let result = this.resultData\n        for (let i = 0; i < temp.length; i++) {\n          for (let j = 0; j < result.length; j++) {\n            if (temp[i].tableName === result[j].tableName) {\n              temp.splice(i, 1)\n            }\n          }\n        }\n        let data = []\n        data = temp.filter(function (row) {\n          return row.tableName.indexOf(tabName) > -1\n        })\n        this.tableData = data\n      })\n    },\n    selectLeft() {\n      let td = this.tableData.filter(function (row) {\n        if (row.tableFlag === '1') {\n          return true\n        } else {\n          return false\n        }\n      })\n      if (td.length === 0) {\n        return false\n      }\n      this.$nextTick(function () {\n        let leftData = []\n        let rightData = this.resultData\n        this.tableData.forEach(row => {\n          if (row.tableFlag === '1') {\n            rightData.push(row)\n          }\n        })\n        leftData = this.tableData.filter(function (row) {\n          if (row.tableFlag === '1') {\n            return false\n          } else {\n            return true\n          }\n        })\n        leftData.forEach(row => {\n          this.$set(row, 'tableFlag', '')\n        })\n        rightData.forEach(row => {\n          this.$set(row, 'tableFlag', '')\n        })\n        this.tableData = leftData\n        this.resultData = rightData\n      })\n    },\n    selectRight() {\n      let td = this.resultData.filter(function (row) {\n        if (row.tableFlag === '1') {\n          return true\n        } else {\n          return false\n        }\n      })\n      if (td.length === 0) {\n        return false\n      }\n      this.$nextTick(function () {\n        let leftData = this.tableData\n        let rightData = []\n        this.resultData.forEach(row => {\n          if (row.tableFlag === '1') {\n            leftData.push(row)\n          }\n        })\n        rightData = this.resultData.filter(function (row) {\n          if (row.tableFlag === '1') {\n            return false\n          } else {\n            return true\n          }\n        })\n        leftData.forEach(row => {\n          this.$set(row, 'tableFlag', '')\n        })\n        rightData.forEach(row => {\n          this.$set(row, 'tableFlag', '')\n        })\n        this.tableData = leftData\n        this.resultData = rightData\n      })\n    },\n    handleInfo(row) {\n      this.form.id = row.id\n      this.form.datasourceName = row.datasourceName\n      this.form.datasourceType = row.datasourceType\n      this.form.datasourceDriverType = row.datasourceDriverType\n      this.form.datasourceDriver = row.datasourceDriver\n      this.form.datasourceSchema = row.datasourceSchema\n      this.form.datasourceDesc = row.datasourceDesc\n      this.form.datasourceUrl = row.datasourceUrl\n      this.form.datasourceUser = row.datasourceUser\n      this.form.datasourcePassword = row.datasourcePassword\n      this.form.tenant = row.tenant\n      this.form.maxConnNum = row.maxConnNum\n      this.form.vallidationMethod = row.vallidationMethod\n      this.form.vallidationSql = row.vallidationSql\n      this.form.dbCharset = row.dbCharset\n      this.form.dbToCharset = row.dbToCharset\n      this.form.quoteString = row.quoteString\n      this.form.transitionIsolation = row.transitionIsolation\n      this.form.crtUserCode = row.crtUserCode\n      this.form.crtOrgCode = row.crtOrgCode\n      this.form.crtDate = this.parseTime(row.crtDate)\n      this.form.updUserCode = row.updUserCode\n      this.form.updOrgCode = row.updOrgCode\n      this.form.updDate = this.parseTime(row.updDate)\n      this.showDataInfo = true\n    },\n    handleColumn(row) {\n      this.columnData = []\n      getColumnListByDatabase(this.dataSourceId, row.tableName).then(data => {\n        console.log(\"========getColumnListByDatabase====>>>>\", data)\n        if (data.code === 0) {\n          this.columnData = data.data\n          this.$nextTick(function () {\n            this.columnData.forEach(row => {\n              if (row.columnFlag === '1') {\n                this.$refs.multipleTable.toggleRowSelection(row, true)\n              }\n            })\n          })\n        } else {\n          this.columnData = []\n        }\n      })\n      this.showColumnInfo = true\n    },\n    saveColumnInfo() {\n      console.log('=====columnData====>>>>', this.columnData)\n      saveColumnList(this.columnData).then(data => {\n        if (data.code === 0) {\n          this.$message.success({\n            message: '保存成功'\n          })\n        } else {\n          this.$message.error({\n            message: '保存失败'\n          })\n        }\n      })\n      this.showColumnInfo = false\n      this.columnData = []\n    }\n\n  }\n}\n",null]}