{"remainingRequest":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-common\\src\\components\\Echarts\\Line3D.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\eladmin-common\\src\\components\\Echarts\\Line3D.vue","mtime":1650772036908},{"path":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650772030926},{"path":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\babel-loader\\lib\\index.js","mtime":1650772030306},{"path":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650772030926},{"path":"C:\\Users\\rdren\\Desktop\\workspace\\DataAssetPlatform\\Pncui-Ind\\node_modules\\vue-loader\\lib\\index.js","mtime":1650772056629}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport echarts from 'echarts'\r\nimport 'echarts-gl'\r\n\r\nrequire('echarts/theme/macarons') // echarts theme\r\nimport { debounce } from '../../utils'\r\n\r\nexport default {\r\n  props: {\r\n    className: {\r\n      type: String,\r\n      default: 'chart'\r\n    },\r\n    width: {\r\n      type: String,\r\n      default: '100%'\r\n    },\r\n    height: {\r\n      type: String,\r\n      default: '300px'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chart: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart()\r\n    this.__resizeHandler = debounce(() => {\r\n      if (this.chart) {\r\n        this.chart.resize()\r\n      }\r\n    }, 100)\r\n    window.addEventListener('resize', this.__resizeHandler)\r\n  },\r\n  beforeDestroy() {\r\n    if (!this.chart) {\r\n      return\r\n    }\r\n    window.removeEventListener('resize', this.__resizeHandler)\r\n    this.chart.dispose()\r\n    this.chart = null\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chart = echarts.init(this.$el, 'macarons')\r\n      const data = []\r\n      for (let t = 0; t < 25; t += 0.001) {\r\n        const x = (1 + 0.25 * Math.cos(75 * t)) * Math.cos(t)\r\n        const y = (1 + 0.25 * Math.cos(75 * t)) * Math.sin(t)\r\n        const z = t + 2.0 * Math.sin(75 * t)\r\n        data.push([x, y, z])\r\n      }\r\n      this.chart.setOption({\r\n        tooltip: {},\r\n        backgroundColor: '#fff',\r\n        visualMap: {\r\n          show: false,\r\n          dimension: 2,\r\n          min: 0,\r\n          max: 30,\r\n          inRange: {\r\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\r\n          }\r\n        },\r\n        xAxis3D: {\r\n          type: 'value'\r\n        },\r\n        yAxis3D: {\r\n          type: 'value'\r\n        },\r\n        zAxis3D: {\r\n          type: 'value'\r\n        },\r\n        grid3D: {\r\n          viewControl: {\r\n            projection: 'orthographic'\r\n          }\r\n        },\r\n        series: [{\r\n          type: 'line3D',\r\n          data: data,\r\n          lineStyle: {\r\n            width: 4\r\n          }\r\n        }]\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}