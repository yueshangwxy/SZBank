"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Animation = void 0;
var util_1 = require("../util");
var common_1 = require("../common");
var Animation = /** @class */ (function () {
    function Animation(cell) {
        this.cell = cell;
        this.ids = {};
    }
    Animation.prototype.get = function () {
        return Object.keys(this.ids);
    };
    Animation.prototype.start = function (path, target, options, delim) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (delim === void 0) { delim = '/'; }
        var localOptions = __assign({ delay: 10, duration: 100, timing: 'linear' }, options);
        var timing = common_1.Timing.linear;
        if (localOptions.timing != null) {
            if (typeof localOptions.timing === 'string') {
                timing = common_1.Timing[localOptions.timing];
            }
            else {
                timing = localOptions.timing;
            }
        }
        var current = this.cell.getPropByPath(path);
        var interp = localOptions.interp;
        var interpolate;
        if (interp) {
            interpolate = interp(current, target);
        }
        else if (typeof target === 'object') {
            interpolate = common_1.Interp.object(current, target);
        }
        else if (typeof target === 'number') {
            interpolate = common_1.Interp.number(current, target);
        }
        else if (typeof target === 'string') {
            if (target[0] === '#') {
                interpolate = common_1.Interp.color(current, target);
            }
            else {
                interpolate = common_1.Interp.unit(current, target);
            }
        }
        var startTime = 0;
        var pathStr = Array.isArray(path) ? path.join(delim) : path;
        var setter = function () {
            var id;
            var val;
            var now = new Date().getTime();
            if (startTime === 0) {
                startTime = now;
            }
            var elaspe = now - startTime;
            var progress = elaspe / localOptions.duration;
            if (progress < 1) {
                _this.ids[pathStr] = id = util_1.Dom.requestAnimationFrame(setter);
            }
            else {
                progress = 1;
                delete _this.ids[pathStr];
            }
            val = interpolate(timing(progress));
            options.transitionId = id;
            _this.cell.setPropByPath(Array.isArray(path) ? path : path.split(delim), val);
            if (id == null) {
                _this.cell.notify('transition:end', { cell: _this.cell, path: pathStr });
            }
        };
        var initiator = function (transition) {
            _this.stop(path, delim);
            _this.ids[pathStr] = util_1.Dom.requestAnimationFrame(transition);
            _this.cell.notify('transition:begin', { cell: _this.cell, path: pathStr });
        };
        return setTimeout(function () {
            initiator(setter);
        }, options.delay);
    };
    Animation.prototype.stop = function (path, delim) {
        var _this = this;
        if (delim === void 0) { delim = '/'; }
        var paths = Array.isArray(path) ? path : path.split(delim);
        Object.keys(this.ids)
            .filter(function (key) {
            return util_1.ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length));
        })
            .forEach(function (key) {
            util_1.Dom.cancelAnimationFrame(_this.ids[key]);
            delete _this.ids[key];
            _this.cell.notify('transition:end', { cell: _this.cell, path: key });
        });
        return this;
    };
    return Animation;
}());
exports.Animation = Animation;
//# sourceMappingURL=animation.js.map