"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.smooth = void 0;
var geometry_1 = require("../../geometry");
exports.smooth = function (sourcePoint, targetPoint, routePoints, options) {
    if (options === void 0) { options = {}; }
    var path;
    if (routePoints && routePoints.length !== 0) {
        var points = __spreadArrays([sourcePoint], routePoints, [targetPoint]);
        var curves = geometry_1.Curve.throughPoints(points);
        path = new geometry_1.Path(curves);
    }
    else {
        // If we have no route, use a default cubic bezier curve, cubic bezier
        // requires two control points, the control points have `x` midway
        // between source and target. This produces an S-like curve.
        path = new geometry_1.Path();
        path.appendSegment(geometry_1.Path.createSegment('M', sourcePoint));
        if (Math.abs(sourcePoint.x - targetPoint.x) >=
            Math.abs(sourcePoint.y - targetPoint.y)) {
            var controlPointX = (sourcePoint.x + targetPoint.x) / 2;
            path.appendSegment(geometry_1.Path.createSegment('C', controlPointX, sourcePoint.y, controlPointX, targetPoint.y, targetPoint.x, targetPoint.y));
        }
        else {
            var controlPointY = (sourcePoint.y + targetPoint.y) / 2;
            path.appendSegment(geometry_1.Path.createSegment('C', sourcePoint.x, controlPointY, targetPoint.x, controlPointY, targetPoint.x, targetPoint.y));
        }
    }
    return options.raw ? path : path.serialize();
};
//# sourceMappingURL=smooth.js.map