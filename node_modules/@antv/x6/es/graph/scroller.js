var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModifierKey } from '../types';
import { Base } from './base';
export class ScrollerManager extends Base {
    get widgetOptions() {
        return this.options.scroller;
    }
    get pannable() {
        return this.widgetOptions && this.widgetOptions.pannable === true;
    }
    init() {
        this.widget = this.graph.hook.createScroller();
        this.autoSetCursor();
        this.startListening();
        if (this.widget) {
            this.widget.center();
        }
    }
    startListening() {
        this.graph.on('blank:mousedown', this.preparePanning, this);
        this.graph.on('node:unhandled:mousedown', this.preparePanning, this);
        this.graph.on('edge:unhandled:mousedown', this.preparePanning, this);
    }
    stopListening() {
        this.graph.off('blank:mousedown', this.preparePanning, this);
        this.graph.off('node:unhandled:mousedown', this.preparePanning, this);
        this.graph.off('edge:unhandled:mousedown', this.preparePanning, this);
    }
    preparePanning({ e }) {
        if (this.widget &&
            this.pannable &&
            ModifierKey.test(e, this.widgetOptions.modifiers) &&
            this.graph.hook.allowPanning(e)) {
            this.widget.startPanning(e);
        }
    }
    autoSetCursor() {
        var _a;
        const options = this.widgetOptions;
        if (options.cursor == null) {
            const cursor = options.pannable ? 'grab' : '';
            (_a = this.widget) === null || _a === void 0 ? void 0 : _a.setCursor(cursor, { silent: true });
        }
    }
    enablePanning() {
        if (!this.pannable) {
            this.widgetOptions.pannable = true;
            if (ModifierKey.equals(this.graph.options.scroller.modifiers, this.graph.options.selecting.modifiers)) {
                this.graph.selection.disableRubberband();
            }
        }
        this.autoSetCursor();
    }
    disablePanning() {
        if (this.pannable) {
            this.widgetOptions.pannable = false;
        }
        this.autoSetCursor();
    }
    lock() {
        if (this.widget) {
            this.widget.lock();
        }
    }
    unlock() {
        if (this.widget) {
            this.widget.unlock();
        }
    }
    update() {
        if (this.widget) {
            this.widget.update();
        }
    }
    setCursor(cursor) {
        if (this.widget) {
            this.widget.setCursor(cursor);
        }
    }
    resize(width, height) {
        if (this.widget) {
            this.widget.resize(width, height);
        }
    }
    dispose() {
        if (this.widget) {
            this.widget.dispose();
        }
        this.stopListening();
    }
}
__decorate([
    Base.dispose()
], ScrollerManager.prototype, "dispose", null);
//# sourceMappingURL=scroller.js.map