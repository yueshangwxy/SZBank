import request from '@/utils/request'
import qs from 'qs'

const url = 'v1/workflow'
const urls = 'v1/workflows'

/**
 * 不推荐使用
 * @param definitionId
 * @param instanceId
 */
export function getImage(definitionId, instanceId) {
  let url = '/rest/activiti/process-definitions/' + definitionId + '/model-json?nocaching=' + new Date().getTime()
  if (instanceId != null) {
    url = '/rest/activiti/process-instances/' + instanceId + '/model-json?processDefinitionId=' + definitionId + '&nocaching=' + new Date().getTime()
  }
  return request({
    url: url,
    method: 'get'
  })
}

/**
 * 获取服务端所有流程文件名称
 */
export function getBpmnFileNames() {
  return request({
    url: url + '/bpmnfiles/server',
    method: 'get'
  })
}

/**
 * 根据流程文件名称发布流程
 */
export function publishFileName(fileName, deployName, category) {
  return request({
    url: url + '/deploy/file/server/' + fileName,
    method: 'post',
    data: { deployName: deployName, category: category }
  })
}

/**
 * 删除已发布流程
 */
export function deleteDeployment(deploymentId) {
  return request({
    url: url + '/deployment/' + deploymentId,
    method: 'delete'
  })
}

/**
 * 创建测试流程实例
 */
export function startTestFlow(processId, businessKey, parameter) {
  return request({
    url: url + '/start/' + processId + '/' + businessKey,
    method: 'post',
    data: parameter
  })
}

/**
 * 处理任务
 */
export function processTask(taskId, comment, parameter) {
  return request({
    url: url + '/task/' + taskId,
    method: 'post',
    data: Object.assign({ comment: comment }, parameter)
  })
}

/**
 * 任务转办
 */
export function assigneeTask(taskId, assignee, comment, parameter) {
  return request({
    url: url + '/task/' + taskId + '/' + assignee,
    method: 'post',
    data: Object.assign({ comment: comment }, parameter)
  })
}

/**
 * 添加流程模型
 * @param param
 */
export function addModel(key, name) {
  return request({
      url: `${url}/model/${key}/${name}`,
      method: 'post'
    }
  )
}

/**
 * 删除流程模型
 * @param param
 */
export function delModel(id) {
  return request({
      url: `${url}/model/${id}`,
      method: 'delete'
    }
  )
}

/**
 * 发布流程模型
 * @param param
 */
export function pubModel(id, param) {
  return request({
      url: `${url}/deploy/model/${id}`,
      method: 'post',
      data: param
    }
  )
}

/**
 * 导出流程模型
 * @param param
 */
export function expModel(id) {
  return request({
      url: `${url}/model/export/${id}`,
      method: 'get',
      responseType: 'blob'
    }
  )
}

/**
 * 导入流程模型
 * @param param
 */
export function impModel(file) {
  return request({
    url: `${url}/model/import`,
    method: 'post',
    data: file
  })
}

/**
 * 查询流程模型
 * @param param
 */
export function models(param) {
  return request({
      url: urls + '/models?' + qs.stringify(param),
      method: 'get'
    }
  )
}

/**
 * 查询已发布的流程
 * @param param
 */
export function deployments(param) {
  return request({
      url: urls + '/deployments?' + qs.stringify(param),
      method: 'get'
    }
  )
}

/**
 * 查询流程定义
 * @param param
 */
export function definitions(param) {
  return request({
      url: urls + '/definitions?' + qs.stringify(param),
      method: 'get'
    }
  )
}

/**
 * 查询流程实例
 * @param param
 */
export function instances(param) {
  return request({
      url: urls + '/instances',
      method: 'post',
      data: param
    }
  )
}

/**
 * 查询任务
 * @param param
 */
export function tasks(param) {
  return request({
      url: urls + '/tasks',
      method: 'post',
      data: param
    }
  )
}

/**
 * 查询我的相关任务
 * @param param
 */
export function myTasks(param) {
  return request({
      url: urls + '/tasks/my?' + qs.stringify(param),
      method: 'get'
    }
  )
}

/**
 * 查询任务处理记录
 * @param param
 */
export function processList(processInstanceId) {
  return request({
      url: urls + '/tasks/process/' + processInstanceId,
      method: 'get'
    }
  )
}

/**
 * 查询我的相关任务
 * @param param
 */
export function todoCount() {
  return request({
      url: urls + '/tasks/todo/count',
      method: 'get'
    }
  )
}

/**
 * 查询任务
 * @param param
 */
export function getUsers(param) {
  return request({
      url: 'api/users?' + qs.stringify(param),
      method: 'get'
    }
  )
}

export default {
  getImage,
  getBpmnFileNames,
  publishFileName,
  deleteDeployment,
  startTestFlow,
  processTask,
  assigneeTask,
  models,
  addModel,
  delModel,
  pubModel,
  expModel,
  impModel,
  deployments,
  definitions,
  instances,
  tasks,
  todoCount,
  myTasks,
  processList,
  getUsers
}
